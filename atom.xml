<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blue&#39;s blog</title>
  <subtitle>coding is funny.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chanran.github.io/"/>
  <updated>2016-11-12T04:06:06.572Z</updated>
  <id>https://chanran.github.io/</id>
  
  <author>
    <name>blue</name>
    <email>rong650751@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转载]web前端开发培训之前端开发必会的二十五个知识点</title>
    <link href="https://chanran.github.io/2016/11/11/%E8%BD%AC%E8%BD%BD-web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%B9%E8%AE%AD%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E4%BC%9A%E7%9A%84%E4%BA%8C%E5%8D%81%E4%BA%94%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://chanran.github.io/2016/11/11/转载-web前端开发培训之前端开发必会的二十五个知识点/</id>
    <published>2016-11-11T14:24:02.000Z</published>
    <updated>2016-11-12T04:06:06.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自 <a href="http://www.cnblogs.com/Ma-lulu/p/5719997.html" target="_blank" rel="external">web前端开发培训之前端开发必会的二十五个知识点</a></p>
</blockquote>
<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="1-常用那几种浏览器测试？有哪些内核-Layout-Engine"><a href="#1-常用那几种浏览器测试？有哪些内核-Layout-Engine" class="headerlink" title="1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?"></a>1. 常用那几种浏览器测试？有哪些内核(Layout Engine)?</h2><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。</p>
<h2 id="2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）"><a href="#2-说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）" class="headerlink" title="2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）"></a>2. 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）</h2><ul>
<li><p>(Q1) 行内元素：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。块级元素：各占据一行，垂直方向排列。从新行开始结束接着一个断行。</p>
</li>
<li><p>(Q2) 兼容性：<code>display:inline-block;*display:inline;*zoom:1;</code></p>
</li>
</ul>
<h2 id="3-清除浮动有哪些方式？比较好的方式是哪一种？"><a href="#3-清除浮动有哪些方式？比较好的方式是哪一种？" class="headerlink" title="3. 清除浮动有哪些方式？比较好的方式是哪一种？"></a>3. 清除浮动有哪些方式？比较好的方式是哪一种？</h2><ul>
<li><p>(Q1)</p>
<ul>
<li><p>（1）父级div定义height。</p>
</li>
<li><p>（2）结尾处加空div标签clear:both。</p>
</li>
<li><p>（3）父级div定义伪类:after和zoom。</p>
</li>
<li><p>（4）父级div定义overflow:hidden。</p>
</li>
<li><p>（5）父级div定义overflow:auto。</p>
</li>
<li><p>（6）父级div也浮动，需要定义宽度。</p>
</li>
<li><p>（7）父级div定义display:table。</p>
</li>
<li><p>（8）结尾处加br标签clear:both。</p>
</li>
</ul>
</li>
<li><p>(Q2) 比较好的是第3种方式，好多网站都这么用。</p>
</li>
</ul>
<h2 id="4-box-sizing常用的属性有哪些？分别有什么作用？"><a href="#4-box-sizing常用的属性有哪些？分别有什么作用？" class="headerlink" title="4. box-sizing常用的属性有哪些？分别有什么作用？"></a>4. box-sizing常用的属性有哪些？分别有什么作用？</h2><ul>
<li><p>(Q1)box-sizing: content-box|border-box|inherit;</p>
</li>
<li><p>(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。<br>border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>
</li>
</ul>
<h2 id="5-Doctype作用？标准模式与兼容模式各有什么区别"><a href="#5-Doctype作用？标准模式与兼容模式各有什么区别" class="headerlink" title="5. Doctype作用？标准模式与兼容模式各有什么区别?"></a>5. Doctype作用？标准模式与兼容模式各有什么区别?</h2><ul>
<li><p>(Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>
</li>
<li><p>(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>
</li>
</ul>
<h2 id="6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#6-HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h2><p>HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>
<h2 id="7-页面导入样式时，使用link和-import有什么区别？"><a href="#7-页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="7. 页面导入样式时，使用link和@import有什么区别？"></a>7. 页面导入样式时，使用link和@import有什么区别？</h2><ul>
<li>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。</li>
</ul>
<h2 id="8-介绍一下你对浏览器内核的理解？"><a href="#8-介绍一下你对浏览器内核的理解？" class="headerlink" title="8. 介绍一下你对浏览器内核的理解？"></a>8. 介绍一下你对浏览器内核的理解？</h2><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>
<blockquote>
<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>
<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>
<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>
</blockquote>
<h2 id="9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#9-html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><ul>
<li><p>(Q1)</p>
<blockquote>
<p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>
</blockquote>
<ul>
<li><p>(1)绘画 canvas;</p>
</li>
<li><p>(2)用于媒介回放的 video 和 audio 元素;</p>
</li>
<li><p>(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</p>
</li>
<li>(4)sessionStorage 的数据在浏览器关闭后自动删除;</li>
<li>(5)语意化更好的内容元素，比如 article、footer、header、nav、section;</li>
<li>(6)表单控件，calendar、date、time、email、url、search;</li>
<li><p>(7)新的技术webworker, websocket, Geolocation;</p>
</li>
<li><p>(Q2)</p>
<blockquote>
<p>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式。<br>当然也可以直接使用成熟的框架、比如html5shim，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="10-简述一下你对HTML语义化的理解？"><a href="#10-简述一下你对HTML语义化的理解？" class="headerlink" title="10. 简述一下你对HTML语义化的理解？"></a>10. 简述一下你对HTML语义化的理解？</h2><blockquote>
<p>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
</blockquote>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1-介绍js的基本数据类型"><a href="#1-介绍js的基本数据类型" class="headerlink" title="1. 介绍js的基本数据类型"></a>1. 介绍js的基本数据类型</h2><blockquote>
<p>Undefined、Null、Boolean、Number、String</p>
</blockquote>
<h2 id="2-js有哪些内置对象？"><a href="#2-js有哪些内置对象？" class="headerlink" title="2. js有哪些内置对象？"></a>2. js有哪些内置对象？</h2><blockquote>
<p>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegExp、Error</p>
</blockquote>
<h2 id="3-this对象的理解"><a href="#3-this对象的理解" class="headerlink" title="3. this对象的理解"></a>3. this对象的理解</h2><blockquote>
<p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。</p>
</blockquote>
<h2 id="4-eval是做什么的？"><a href="#4-eval是做什么的？" class="headerlink" title="4. eval是做什么的？"></a>4. eval是做什么的？</h2><blockquote>
<p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’)。</p>
</blockquote>
<h2 id="5-DOM怎样添加、移除、移动、复制、创建和查找节点"><a href="#5-DOM怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="5. DOM怎样添加、移除、移动、复制、创建和查找节点"></a>5. DOM怎样添加、移除、移动、复制、创建和查找节点</h2><p>&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 创建新节点</div><div class="line">createDocumentFragment()    //创建一个DOM片段</div><div class="line">createElement()   //创建一个具体的元素</div><div class="line">createTextNode()   //创建一个文本节点</div><div class="line">// 添加、移除、替换、插入</div><div class="line">appendChild()</div><div class="line">removeChild()</div><div class="line">replaceChild()</div><div class="line">insertBefore() //在已有的子节点前插入一个新的子节点</div><div class="line">// 查找</div><div class="line">getElementsByTagName()    //通过标签名称</div><div class="line">getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class="line">getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>
<h2 id="6-null和undefined的区别？"><a href="#6-null和undefined的区别？" class="headerlink" title="6. null和undefined的区别？"></a>6. null和undefined的区别？</h2><blockquote>
<p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p>
<p>undefined：</p>
<ul>
<li>（1）变量被声明了，但没有赋值时，就等于undefined。</li>
<li>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>
<li>（3）对象没有赋值的属性，该属性的值为undefined。</li>
<li>（4）函数没有返回值时，默认返回undefined。</li>
</ul>
<p>null：</p>
<ul>
<li>（1） 作为函数的参数，表示该函数的参数不是对象。</li>
<li>（2） 作为对象原型链的终点。</li>
</ul>
</blockquote>
<h2 id="7-new操作符具体干了什么呢"><a href="#7-new操作符具体干了什么呢" class="headerlink" title="7. new操作符具体干了什么呢?"></a>7. new操作符具体干了什么呢?</h2><ul>
<li>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>
<li>（2）属性和方法被加入到 this 引用的对象中。</li>
<li>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。</li>
</ul>
<h2 id="8-JSON-的了解？"><a href="#8-JSON-的了解？" class="headerlink" title="8. JSON 的了解？"></a>8. JSON 的了解？</h2><blockquote>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。</p>
<p>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}</p>
</blockquote>
<h2 id="9-call-和-apply-的区别和作用？"><a href="#9-call-和-apply-的区别和作用？" class="headerlink" title="9. call() 和 apply() 的区别和作用？"></a>9. call() 和 apply() 的区别和作用？</h2><blockquote>
<p>apply()函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。</p>
<p>如：function.apply(this,[1,2,3]);</p>
<p>call()的第一个参数是上下文，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>
</blockquote>
<h2 id="10-如何获取UA？"><a href="#10-如何获取UA？" class="headerlink" title="10. 如何获取UA？"></a>10. 如何获取UA？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function whatBrowser() &#123;  </div><div class="line">    document.Browser.Name.value=navigator.appName;  </div><div class="line">    document.Browser.Version.value=navigator.appVersion;  </div><div class="line">    document.Browser.Code.value=navigator.appCodeName;  </div><div class="line">    document.Browser.Agent.value=navigator.userAgent;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><hr>
<h2 id="1-HTTP状态码知道哪些？"><a href="#1-HTTP状态码知道哪些？" class="headerlink" title="1. HTTP状态码知道哪些？"></a>1. HTTP状态码知道哪些？</h2><blockquote>
<p>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</p>
<p>200  OK   正常返回信息</p>
<p>201  Created  请求成功并且服务器创建了新的资源</p>
<p>202  Accepted  服务器已接受请求，但尚未处理</p>
<p>301  Moved Permanently  请求的网页已永久移动到新位置。</p>
<p>302 Found  临时性重定向。</p>
<p>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</p>
<p>304  Not Modified  自从上次请求后，请求的网页未修改过。</p>
<p>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p>
<p>401 Unauthorized  请求未授权。</p>
<p>403 Forbidden  禁止访问。</p>
<p>404 Not Found  找不到如何与 URI 相匹配的资源。</p>
<p>500 Internal Server Error  最常见的服务器端错误。</p>
<p>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>
</blockquote>
<h2 id="2-你有哪些性能优化的方法？"><a href="#2-你有哪些性能优化的方法？" class="headerlink" title="2. 你有哪些性能优化的方法？"></a>2. 你有哪些性能优化的方法？</h2><ul>
<li>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li>
<li>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li>
<li>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li>
<li>（4） 当需要设置的样式很多时设置className而不是直接操作style。</li>
<li>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</li>
<li>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</li>
<li>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</li>
</ul>
<h2 id="3-什么叫优雅降级和渐进增强？"><a href="#3-什么叫优雅降级和渐进增强？" class="headerlink" title="3. 什么叫优雅降级和渐进增强？"></a>3. 什么叫优雅降级和渐进增强？</h2><blockquote>
<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。</p>
<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>
</blockquote>
<h2 id="4-哪些常见操作会造成内存泄漏？"><a href="#4-哪些常见操作会造成内存泄漏？" class="headerlink" title="4. 哪些常见操作会造成内存泄漏？"></a>4. 哪些常见操作会造成内存泄漏？</h2><blockquote>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</p>
</blockquote>
<h2 id="5-线程与进程的区别"><a href="#5-线程与进程的区别" class="headerlink" title="5. 线程与进程的区别"></a>5. 线程与进程的区别</h2><blockquote>
<p>一个程序至少有一个进程,一个进程至少有一个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p>
<p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&quot;http://www.cnblogs.com/Ma-lulu/p/5719997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web前端开发培训之前端开发必会的二十五个知识点&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="面试" scheme="https://chanran.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://chanran.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>重构页面遇到的各种奇怪问题</title>
    <link href="https://chanran.github.io/2016/11/11/%E9%87%8D%E6%9E%84%E9%A1%B5%E9%9D%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://chanran.github.io/2016/11/11/重构页面遇到的各种奇怪问题/</id>
    <published>2016-11-11T13:22:38.000Z</published>
    <updated>2016-11-11T13:45:08.451Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/rebuild.png" alt="重构"></p>
<h1 id="记录一下干货"><a href="#记录一下干货" class="headerlink" title="记录一下干货"></a>记录一下干货</h1><ul>
<li><a href="https://www.zhihu.com/question/19736007" target="_blank" rel="external">怎样可以很好地保证网页的浏览器兼容性</a></li>
</ul>
<h1 id="特定html标签相关的奇怪问题"><a href="#特定html标签相关的奇怪问题" class="headerlink" title="特定html标签相关的奇怪问题"></a>特定html标签相关的奇怪问题</h1><ul>
<li><h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;!--推荐这样写--&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;  &lt;!--会出现几个空格--&gt;</div><div class="line">&lt;/textarea&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--换行之后有几个空格--&gt;</div><div class="line"></div><div class="line">&lt;/textarea&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>chrome下第二个textarea会出现几个空格,第三个textarea会换行再加几个空格,所以最好使用第一个textarea的写法句号 (其他浏览器有空切换到windows测试)</p>
</blockquote>
<h1 id="css相关的奇怪问题"><a href="#css相关的奇怪问题" class="headerlink" title="css相关的奇怪问题"></a>css相关的奇怪问题</h1><ul>
<li><h2 id="行内块元素之间的奇怪间隔"><a href="#行内块元素之间的奇怪间隔" class="headerlink" title="行内块元素之间的奇怪间隔"></a>行内块元素之间的奇怪间隔</h2></li>
</ul>
<blockquote>
<p>以span为例(设置了display:inline-block)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        html,body,div&#123;</div><div class="line">            height:100%;</div><div class="line">            width:100%;</div><div class="line">        &#125;</div><div class="line">        #span1&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:black;</div><div class="line">        &#125;</div><div class="line">        #span2&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:red;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>左图出现奇怪的间距(元素换行之后会有一个换行符),右图是解决之后的状态</p>
</blockquote>
<p><img src="/img/strangeSpace.png" alt="奇怪的间距"><br><img src="/img/clearSpace.png" alt="清除了边距"></p>
<blockquote>
<p>解决方法</p>
</blockquote>
<ol>
<li><p>把行内块元素写一在同一行 (不推荐,如果元素多的话太长了,可读性差)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加注释(推荐)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;!--</div><div class="line">    --&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用浮动(不推荐,脱离文本流了,弄起来有点麻烦)</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/rebuild.png&quot; alt=&quot;重构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;记录一下干货&quot;&gt;&lt;a href=&quot;#记录一下干货&quot; class=&quot;headerlink&quot; title=&quot;记录一下干货&quot;&gt;&lt;/a&gt;记录一下干货&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="重构" scheme="https://chanran.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="html" scheme="https://chanran.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(三)--插值</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%89%E6%8F%92%E5%80%BC/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门三插值/</id>
    <published>2016-11-01T05:56:17.000Z</published>
    <updated>2016-11-01T06:27:31.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插值-interporation"><a href="#插值-interporation" class="headerlink" title="插值(interporation)"></a>插值(interporation)</h1><blockquote>
<p>插值相当于解析表达式或者变量，让它们的值替换插值的位置。<br><strong>注：</strong> 不能用于属性值的插值（但属性值可以使用变量替换）。</p>
</blockquote>
<ul>
<li>在css属性名中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">div</div><div class="line">    border-&#123;partOfProp&#125; value  /*切记属性值这里不可以使用插值*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>在选择器中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">selector = div</div><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">&#123;selector&#125;</div><div class="line">    border-&#123;partOfProp&#125; value</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">selectors = &apos;#foo,#bar,.baz&apos;</div><div class="line"></div><div class="line">&#123;selectors&#125;</div><div class="line">  background: #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#foo,</div><div class="line">#bar,</div><div class="line">.baz &#123;</div><div class="line">  background: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与mixins配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vendor(prop, args)</div><div class="line">  -webkit-&#123;prop&#125; args</div><div class="line">  -moz-&#123;prop&#125; args</div><div class="line">  &#123;prop&#125; args</div><div class="line"></div><div class="line">border-radius()</div><div class="line">  vendor(&apos;border-radius&apos;, arguments)</div><div class="line"></div><div class="line">box-shadow()</div><div class="line">  vendor(&apos;box-shadow&apos;, arguments)</div><div class="line"></div><div class="line">button</div><div class="line">  border-radius 1px 2px / 3px 4px</div></pre></td></tr></table></figure>
<p>转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button &#123;</div><div class="line">  -webkit-border-radius: 1px 2px / 3px 4px;</div><div class="line">  -moz-border-radius: 1px 2px / 3px 4px;</div><div class="line">  border-radius: 1px 2px / 3px 4px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与循环迭代(iteration)配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table</div><div class="line">  for row in 1 2 3 4 5</div><div class="line">    tr:nth-child(&#123;row&#125;)</div><div class="line">      height: 10px * row</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">table tr:nth-child(1) &#123;</div><div class="line">  height: 10px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(2) &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(3) &#123;</div><div class="line">  height: 30px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(4) &#123;</div><div class="line">  height: 40px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(5) &#123;</div><div class="line">  height: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插值-interporation&quot;&gt;&lt;a href=&quot;#插值-interporation&quot; class=&quot;headerlink&quot; title=&quot;插值(interporation)&quot;&gt;&lt;/a&gt;插值(interporation)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(二)--变量</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%BA%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门二变量/</id>
    <published>2016-11-01T05:54:34.000Z</published>
    <updated>2016-11-01T06:27:22.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量-variables"><a href="#变量-variables" class="headerlink" title="变量(variables)"></a>变量(variables)</h1><blockquote>
<p><strong>变量的标识符可以由$、下划线、字母、数字组成，其中数字不能作为变量的开头。其实这里的变量只是理解为单纯的字符替换</strong></p>
</blockquote>
<p><strong>外部定义变量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_font-size = 14px</div><div class="line">font = _font-size &quot;Lucida Grande&quot;, Arial</div><div class="line"></div><div class="line">body</div><div class="line">  font font, sans-serif</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  font: 14px &quot;Lucida Grande&quot;, Arial, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p> <strong>下面是变量的另外一种用法，不在外部定义变量:</strong></p>
<ul>
<li>内部重新定义当前变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (w / 2)</div><div class="line">  margin-top: (h / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>使用内部变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (@width / 2)</div><div class="line">  margin-top: (@height / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量的深入用法：写在mixins里，与分支结构配合定义初始属性值等。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">position()</div><div class="line">  position: arguments</div><div class="line">  z-index: 1 unless @z-index /*这里是mixins，如果不懂可以先忽略。*/</div><div class="line"></div><div class="line">#logo</div><div class="line">  z-index: 20</div><div class="line">  position: absolute</div><div class="line"></div><div class="line">#logo2</div><div class="line">  position: absolute</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  z-index: 20;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line">#logo2 &#123;</div><div class="line">  position: absolute;</div><div class="line">  z-index: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量冒泡查询</strong></p>
</blockquote>
<p>先看一个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line"> color: red</div><div class="line"> ul</div><div class="line">   li</div><div class="line">     color: blue</div><div class="line">     p</div><div class="line">         color:black</div><div class="line">         a</div><div class="line">             background-color: @color</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">body ul li &#123;</div><div class="line">  color: #00f;</div><div class="line">&#125;</div><div class="line">body ul li p &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">body ul li p a &#123;</div><div class="line">  background-color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：从当前层开始，一直往上层查询，直到找到为止，找不到则返回null。上面例子中选择器”body ul li p”就定义了color属性了，而且选择器a被”body ul li p”嵌套的。所以查询到了上层的color属性，停止查询。</p>
</blockquote>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量-variables&quot;&gt;&lt;a href=&quot;#变量-variables&quot; class=&quot;headerlink&quot; title=&quot;变量(variables)&quot;&gt;&lt;/a&gt;变量(variables)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;变量的标识符可
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(一)--选择器</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%80%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门一选择器/</id>
    <published>2016-11-01T05:50:46.000Z</published>
    <updated>2016-11-01T06:27:42.522Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><ul>
<li>官网：<a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a></li>
<li>中文文档：<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="external">stylus中文版参考文档</a> by 张鑫旭</li>
<li>理解css预处理器：<a href="http://leeluolee.github.io/2013/08/01/mcss-start/" target="_blank" rel="external">css预处理器初识</a> by 栓萝卜的棍子</li>
<li>三种css预处理器语言详解：<a href="http://www.oschina.net/question/12_44255" target="_blank" rel="external">less|sass|stylus</a> by 开源中国</li>
</ul>
<hr>
<h1 id="CSS预处理器语言的个人理解"><a href="#CSS预处理器语言的个人理解" class="headerlink" title="CSS预处理器语言的个人理解"></a>CSS预处理器语言的个人理解</h1><ul>
<li>用另外一种可读性高、语法性强的语言来写CSS。stylus可以使用循环、分支、定义变量和函数结构来写css，这样写起来既方便又快捷。</li>
<li>通过一种转换机制将这种语法转化为原生css。每种语言的转化机制也有很多种，可以使用各种语言官网的方法转化，例如<a href="http://lesscss.org/#using-less" target="_blank" rel="external">less</a>。也可以使用构建工具webpack的<a href="https://github.com/shama/stylus-loader" target="_blank" rel="external">stylus-loader</a>来将stylus语言转化为原生css。</li>
</ul>
<hr>
<h1 id="stylus的特点"><a href="#stylus的特点" class="headerlink" title="stylus的特点"></a>stylus的特点</h1><ul>
<li>官网可以直接将stylus代码放在官网<a href="http://stylus-lang.com/try.html#?code=body%20%7B%0A%20%20font%3A%2014px%2F1.5%20Helvetica%2C%20arial%2C%20sans-serif%3B%0A%20%20%23logo%20%7B%0A%20%20%20%20border-radius%3A%205px%3B%0A%20%20%7D%0A%7D" target="_blank" rel="external">这一页</a>测试生成原生css（本人硬加上去的特点）</li>
<li>通过缩进来解释语言（喜欢python的geek应该会比较喜欢）。</li>
<li>待补充..</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  div</div><div class="line">  	color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body div &#123;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="stylus的优点"><a href="#stylus的优点" class="headerlink" title="stylus的优点"></a>stylus的优点</h1><ul>
<li>类python语法（官网称stylus为pythonic）。</li>
<li>语法灵活（可选的括号，冒号，分号等）。</li>
</ul>
<hr>
<h1 id="stylus的缺点"><a href="#stylus的缺点" class="headerlink" title="stylus的缺点"></a>stylus的缺点</h1><ul>
<li>由于其语法灵活的问题，如果没有团队规范，那么就会带来团队开发混乱，维护起来比较麻烦，各种语法混杂。</li>
</ul>
<hr>
<h1 id="stylus语法介绍"><a href="#stylus语法介绍" class="headerlink" title="stylus语法介绍"></a>stylus语法介绍</h1><h2 id="选择器-selectors"><a href="#选择器-selectors" class="headerlink" title="选择器(selectors)"></a>选择器(selectors)</h2><h3 id="缩进-换行缩进表示语句前进"><a href="#缩进-换行缩进表示语句前进" class="headerlink" title="缩进(换行缩进表示语句前进)"></a><strong>缩进(换行缩进表示语句前进)</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="同级选择器"><a href="#同级选择器" class="headerlink" title="同级选择器"></a><strong>同级选择器</strong></h3><ul>
<li>element,element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div,p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element &gt;element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	&gt;p</div><div class="line">      color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &gt;p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>element +element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	+p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div +p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>例外：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo bar baz</div><div class="line">&gt;span</div><div class="line">	color:white;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面代码的foo bar baz编译器解析有可能是”标签 属性 属性”，有可能是”标签 标签 标签”（有可能是自定义的标签）</strong>（编译器只会识别文档结构而不是标签或者属性）</p>
</blockquote>
<hr>
<p>建议写成下面这样（在最后的选择器后面加一个逗号[comma]）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo bar baz,</div><div class="line">&gt;span</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面的同级选择器是<a href="http://www.w3school.com.cn/cssref/css_selectors.ASP" target="_blank" rel="external">这里</a>的优化，没有提到的其他选择器大多数保留原来的语法，或者与上面的语法类似，当然上面提到的选择器也可以使用原来的语法</strong></p>
</blockquote>
<hr>
<h3 id="引用父级选择器"><a href="#引用父级选择器" class="headerlink" title="引用父级选择器"></a><strong>引用父级选择器</strong></h3><blockquote>
<p><strong>使用&amp;指向父级选择器，有可能是选择器数组，也有可能是单独的一个选择器。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:#FFF;</div><div class="line">    &amp;:hover</div><div class="line">    	color:#000;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">div,</div><div class="line">p &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">div:hover,</div><div class="line">p:hover &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>解释：其实”&amp;”可以理解为代替了上一层的选择器，比如上面例子，”&amp;”的上一层是”div,p”，这样说比较好理解。</strong></p>
</blockquote>
<p>下面是引用父级选择器的另一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">box-shadow()</div><div class="line">  -webkit-box-shadow arguments</div><div class="line">  -moz-box-shadow arguments</div><div class="line">  box-shadow arguments</div><div class="line">  html.ie8 &amp;,</div><div class="line">  html.ie7 &amp;,</div><div class="line">  html.ie6 &amp;</div><div class="line">    border 2px solid arguments[length(arguments) - 1]</div><div class="line"></div><div class="line">body</div><div class="line">  #login</div><div class="line">    box-shadow 1px 1px 3px #eee</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">body #login &#123;</div><div class="line">  -webkit-box-shadow: 1px 1px 3px #eee;</div><div class="line">  -moz-box-shadow: 1px 1px 3px #eee;</div><div class="line">  box-shadow: 1px 1px 3px #eee;</div><div class="line">&#125;</div><div class="line">html.ie8 body #login,</div><div class="line">html.ie7 body #login,</div><div class="line">html.ie6 body #login &#123;</div><div class="line">  border: 2px solid #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果想在代码里使用”&amp;”符号而不是stylus的”&amp;”，可以在&amp;字符前加一个反斜杠并加上引号，如下：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.foo[title*=&apos;\&amp;&apos;]  /*.foo[title*=&apos;&amp;&apos;]*/</div></pre></td></tr></table></figure>
<hr>
<h3 id="部分引用父级选择器之单层选择器"><a href="#部分引用父级选择器之单层选择器" class="headerlink" title="部分引用父级选择器之单层选择器"></a><strong>部分引用父级选择器之单层选择器</strong></h3><blockquote>
<p>使用^ [N] 引用第N层父级选择器。如果N是正数，这里的第N层指的是最上层上层选择器到第N层选择器，如果N是负数，这里的第N层指的是最上层选择器到倒数第|N|层选择器。</p>
</blockquote>
<ul>
<li>有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;__bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo__bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo__bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>没有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  .bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo .bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>N为0或者正数则从最上层开始到最下层，N为负数则从最下层开始到最上层。其实第N层的选择器是包含了上一层的选择器的，例如下面的例子，第一层选择器是foo,第二层就是foo bar,第三层是foo bar baz，如此类推（官网说的是嵌套）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      width: 10px</div><div class="line"></div><div class="line">      ^[-1]:hover &amp;</div><div class="line">        width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar:hover .foo bar baz &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果写在mixins里的话，推荐将N写成负数。因为你并不知道你在调用哪一层（ 有可能还有隐藏的上层选择器）</strong></p>
</blockquote>
<hr>
<h3 id="部分引用父级选择器之范围选择器"><a href="#部分引用父级选择器之范围选择器" class="headerlink" title="部分引用父级选择器之范围选择器"></a><strong>部分引用父级选择器之范围选择器</strong></h3><blockquote>
<p>^ [N..M] 引用第N层选择器到第M层选择器组成的选择器。<br>注：这里有些跟引用单层选择器有点不同，这里的第几层是不包括上层选择器的，具体来看例子感受一下。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ^[-1]:hover ^[-2..-1]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar baz:hover baz test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="其他部分引用父级选择器"><a href="#其他部分引用父级选择器" class="headerlink" title="其他部分引用父级选择器"></a>其他部分引用父级选择器</h3><ul>
<li>最上层父级选择器(~/)，相当于^ [0]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.block</div><div class="line">  &amp;__element</div><div class="line">    ~/:hover &amp;</div><div class="line">      color: red</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.block:hover .block__element &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>相对父级选择器(../)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ../:hover ^[-1..-2]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar .baz .test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo .bar .baz:hover .baz .test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>脱离嵌套的选择器(/)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">   span</div><div class="line">      color #A7A7A7</div><div class="line">      &amp;:hover,</div><div class="line">      /.is-hovered</div><div class="line">        color #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">div span,</div><div class="line">p span &#123;</div><div class="line">  color: #a7a7a7;</div><div class="line">&#125;</div><div class="line">div span:hover,</div><div class="line">p span:hover,</div><div class="line">.is-hovered &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>上面的例子里，转化后的代码.is-hovered已经脱离了嵌套结构了，已经不在任何选择器嵌套里。</strong></p>
</blockquote>
<hr>
<h3 id="选择器的值"><a href="#选择器的值" class="headerlink" title="选择器的值"></a><strong>选择器的值</strong></h3><blockquote>
<p><strong>selector()获取当前嵌套层的值，selectors()获取从最上层到当前层每一层的选择器的list</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;:hover</div><div class="line">       class selector()</div><div class="line">       color black</div><div class="line">       span</div><div class="line">          color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo:hover &#123;</div><div class="line">  class: &apos;.foo:hover&apos;; /*这个是selector()的值*/</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.foo:hover span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a</div><div class="line">  .b</div><div class="line">    &amp;__c</div><div class="line">      content: selectors()</div><div class="line">      span</div><div class="line">            color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a .b__c &#123;</div><div class="line">  content: &apos;.a&apos;, &apos;&amp; .b&apos;, &apos;&amp;__c&apos;;</div><div class="line">&#125;</div><div class="line">.a .b__c span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;相关网站&quot;&gt;&lt;a href=&quot;#相关网站&quot; class=&quot;headerlink&quot; title=&quot;相关网站&quot;&gt;&lt;/a&gt;相关网站&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://stylus-lang.com/&quot; target=&quot;_blank
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css3动画笔记</title>
    <link href="https://chanran.github.io/2016/11/01/css3%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://chanran.github.io/2016/11/01/css3动画笔记/</id>
    <published>2016-11-01T05:34:41.000Z</published>
    <updated>2016-11-01T06:27:57.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="some-sites"><a href="#some-sites" class="headerlink" title="some sites"></a>some sites</h1><ul>
<li><a href="http://www.w3school.com.cn/css3/css3_animation.asp" target="_blank" rel="external">css3动画文档</a> by W3CSchool</li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">css3动画简介</a> by阮一峰</li>
<li><a href="http://isux.tencent.com/css3/" target="_blank" rel="external">css3动画手册</a> by 腾讯 isux</li>
<li><a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">css3动画之硬件加速</a> by w3cplus</li>
<li><a href="http://www.w3ctech.com/topic/1472" target="_blank" rel="external">调试css3 动画 keyframe</a> by w3ctech</li>
<li><a href="http://zencode.in/14.CSS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">css动画的性能优化</a> by zencode.in</li>
<li><a href="http://code.leozhang2018.me/2016/03/07/%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9B%86%E9%94%A6/" target="_blank" rel="external">浏览器是如何渲染页面的</a> by code.leozhang2018.me (读完了之后会更加懂得如何提升css动画性能)</li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a> by 张云龙 （这个链接是作为拓展的）</li>
</ul>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul>
<li>grammar: tansition: property duration timing-function delay;</li>
<li>detail<ul>
<li>transition-property：要过渡的css属性</li>
<li>transition-duration：要过渡持续多少秒或者毫秒</li>
<li>transition-timing-function：速度效果的速度曲线</li>
<li>transition-delay：延迟多少秒执行过渡</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：transition:all 0 ease 0</li>
<li>如果transition-duration属性没有被设置，则默认为0，即不会产生过渡效果</li>
<li>tanstion-timing-function: linear/<em>匀速</em>/ | ease-in /<em>加速</em>/ | ease-out /<em>减速</em>/ | ease /<em>逐渐放慢</em>/ | cubic-bezier /<em>函数，自定义速度模式，可以使用 <a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a> 这个网站制作</em>/</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</li>
<li>不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</li>
<li>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</li>
</ul>
</li>
<li>advantage : 简单易用</li>
<li>disavantage<ul>
<li>transition需要事件触发，所以没法在网页加载时自动发生。</li>
<li>transition是一次性的，不能重复发生，除非一再触发。</li>
<li>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</li>
<li>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</li>
</ul>
</li>
</ul>
<h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><ul>
<li>grammar: name duration timing-function delay iteration-count direction</li>
<li>detail<ul>
<li>@keyframes：规定动画</li>
<li>animation-name：绑定选择器的keyframe名称</li>
<li>animation-duration：动画的持续时间，以秒或者毫秒计</li>
<li>animation-timing-function：动画的速度曲线</li>
<li>animation-delay：延迟多少秒执行动画</li>
<li>animation-iteration-count：动画播放次数</li>
<li>animation-diretion：是否应该轮流反向播放动画</li>
<li>animation-play-state(通常用在js控制是否播放,object.style.animationPlayState)：（paused[停止] | running[播放]）规定动画正在播放还是暂停</li>
<li>animation-fill-mode(通常用在js控制动画效果是否可见,object.style.animationFillMode)：（none[不改变默认行为] | forwards[当动画完成后，保持最后一个属性值] | backwards[在animation-delay 所制定的一段时间内，在动画显示之前，应该开始属性值] | both[向前和向后填充模式都被应用]）规定动画在播放之前或之后，其动画效果是否可见。</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：animation:none 0 ease 0 1 normal</li>
<li>尽量少在@keyframe里使用除了transform,opacity,filter以外的元素，因为会触发浏览器的重绘(repaint)<a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">详情</a></li>
<li>@keyframe<ul>
<li>定义：以百分比来规定改变发生的时间，或者通过关键词”from” 和 “to”，等价于0%和100%，0%是动画的开始时间，100%是结束时间</li>
<li>grammar:@keyframes animationname{ keyframes-selector { css-styles;} }</li>
<li>detail<ul>
<li>animationname：（必需）定义动画名称</li>
<li>keyframes-selector：（必需）动画时长的百分比，合法的值：0%-100%（可以使用 from[0%] 和 to[100%]）</li>
<li>css-styles：（必需）一个或多个合法的css样式属性</li>
</ul>
</li>
<li>example</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<pre><code>@keyframes mymove
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
@-moz-keyframes mymove /* Firefox */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-webkit-keyframes mymove /* Safari 和 Chrome */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-o-keyframes mymove /* Opera */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
</code></pre><hr>
<ul>
<li>如果animation-duration属性没有设置，则时长为0，即动画不会被播放</li>
<li>animation-iteration-count默认值为1，可设置为infinite（无限次播放）</li>
<li>animation-direction:normal /<em>正常播放</em>/ | alternate /<em>轮流反向播放</em>/<ul>
<li>advantage ：解决了transition过渡效果不能循环播放的弊端</li>
<li>disvantage：目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。代码必须写成下面这样。</li>
</ul>
</li>
</ul>
<hr>
<pre><code>div:hover {
  -webkit-animation: 1s rainbow;
  animation: 1s rainbow;  
}

@-webkit-keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}

@keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}
</code></pre><hr>
<h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><ul>
<li>grammar:transform:none | transform-functions</li>
<li>detail:none and transform-functions<ul>
<li>none：不定义转换</li>
<li>matrix(n,n,n,n,n,n)：定义2D转换，使用六个值的矩阵</li>
<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义3D转换，使用16个值的4X4矩阵</li>
<li>translate(x,y)：定义2D转换（参数：x轴移动量，y轴移动量。+即向右移动，-即向左移动。单独一个量时表示x轴移动量与y轴移动量相等）</li>
<li>translate3d(x,y,z)：定义3D转换（参数基于translate(x,y)扩展）</li>
<li>translateX(x)：定义转换，只用于X轴的值</li>
<li>translateY(y)：定义转换，只用于Y轴的值</li>
<li>translateZ(z)：定义转换，只用于Z轴的值</li>
<li>scale(x,y)：定义2D缩放转换（参数x,y是倍数）</li>
<li>scale(x,y,z)：定义3D缩放转换（参数基于scale(x,y)扩展）</li>
<li>scaleX(x)：设置X轴的值来定义缩放转换</li>
<li>scaleY(y)：设置Y轴的值来定义缩放转换</li>
<li>scaleZ(z)：设置Z轴的值来定义缩放转换</li>
<li>rotate(angle)：定义2D旋转。在参数中规定角度（正是顺时针，负是逆时针）</li>
<li>rotate3d(x,y,z,angle)：定义3D旋转</li>
<li>rotateX(angle)：定义沿着X轴的3D旋转</li>
<li>rotateY(angle)：定义沿着Y轴的3D旋转</li>
<li>rotateZ(angle)：定义沿着Z轴的3D旋转</li>
<li>skew(x-angle,y-angle)：定义沿着X和Y轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着X轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着Y轴的2D倾斜转换</li>
<li>perspective(n)：为3D转换元素定义透视视图</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
<li>Internet Explorer 10 和 Firefox 支持 3D 转换</li>
<li>Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Opera 仍然不支持 3D 转换（它只支持 2D 转换）</li>
</ul>
</li>
<li>notice<ul>
<li>transform-origin可以定义改变被转换元素的位置<ul>
<li>grammar：transform-origin:x-axis,y-axis,z-zxis</li>
<li>默认值：transform-origin:50% 50% 0</li>
<li>detail<ul>
<li>x-axis | y-axis：定义视图被置于X轴的何处。可能的值：left | center | right | length | %</li>
<li>z-axis：定义视图被置于Z轴的何处。可能的值：length</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform-origin 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
</ul>
</li>
</ul>
</li>
<li>transform-style规定如何在3D空间中呈现被嵌套的元素<ul>
<li>grammar:transform-style:flat | preserve-3d</li>
<li>tranform-style默认值：transform-style:flat</li>
<li>compatibility<ul>
<li>Firefox 支持 transform-style 属性</li>
<li>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective定义3D元素距视图的距离，以像素计。<ul>
<li>grammar:perspective number | none</li>
<li>perspective默认值：perspective:none</li>
<li>detail<ul>
<li>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>perspective 属性只影响 3D 转换元素</li>
<li>通常和perspective-origin属性配合改变3D元素的底部位置</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspective 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective-origin定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置<ul>
<li>grammar:perspective-origin:x-axis,y-axis</li>
<li>perspective-origin默认值：perspective-origin:50% 50%</li>
<li>detail<ul>
<li>当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective-origin 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性</li>
</ul>
</li>
</ul>
</li>
<li>backface-visibility定义当元素不面向屏幕时是否可见<ul>
<li>grammar:backface-visibility: visible | hidden</li>
<li>backface-visibility默认值：backface-visibility:visible</li>
<li>detail<ul>
<li>如果在旋转元素不希望看到其背面时，该属性很有用</li>
</ul>
</li>
<li>compatility<ul>
<li>只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性</li>
<li>Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;some-sites&quot;&gt;&lt;a href=&quot;#some-sites&quot; class=&quot;headerlink&quot; title=&quot;some sites&quot;&gt;&lt;/a&gt;some sites&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css3" scheme="https://chanran.github.io/tags/css3/"/>
    
      <category term="动画" scheme="https://chanran.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="animation" scheme="https://chanran.github.io/tags/animation/"/>
    
  </entry>
  
</feed>
