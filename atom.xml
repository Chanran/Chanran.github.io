<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blue&#39;s blog</title>
  <subtitle>coding is funny.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chanran.github.io/"/>
  <updated>2016-12-11T07:27:47.495Z</updated>
  <id>https://chanran.github.io/</id>
  
  <author>
    <name>blue</name>
    <email>rong650751@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack react 在浏览器报错:Uncaught ReferenceError: React is not defined</title>
    <link href="https://chanran.github.io/2016/12/11/webpack-react-error-Uncaught-ReferenceError-React-is-not-defined/"/>
    <id>https://chanran.github.io/2016/12/11/webpack-react-error-Uncaught-ReferenceError-React-is-not-defined/</id>
    <published>2016-12-11T07:21:25.000Z</published>
    <updated>2016-12-11T07:27:47.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题出在webpack-config-js内容"><a href="#问题出在webpack-config-js内容" class="headerlink" title="问题出在webpack.config.js内容"></a>问题出在webpack.config.js内容</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">module.exports = &#123;</div><div class="line">    entry: [</div><div class="line">        &apos;webpack/hot/dev-server&apos;,</div><div class="line">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</div><div class="line">        &apos;./src/components/index/app.js&apos;</div><div class="line">    ],</div><div class="line">    output: &#123;</div><div class="line">        path: &apos;./build/&apos;,</div><div class="line">        filename: &apos;bundle.js&apos;</div><div class="line">    &#125;,</div><div class="line">    externals: &#123;</div><div class="line">        &apos;react&apos;: &apos;React&apos;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123; test: /\.js$/, loader: &apos;jsx!babel&apos;, include: /src/&#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>这里的<code>externals:{&#39;react&#39;:&#39;React&#39;}</code></strong>会将React赋给交给windows.React.而且给commonJS的require(‘React’)用。</p>
<h1 id="在代码里使用import而不是require的话就会在浏览器报错了。-请忽略长长的代码"><a href="#在代码里使用import而不是require的话就会在浏览器报错了。-请忽略长长的代码" class="headerlink" title="在代码里使用import而不是require的话就会在浏览器报错了。(请忽略长长的代码)"></a>在代码里使用import而不是require的话就会在浏览器报错了。(请忽略长长的代码)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import LocalDb from &apos;localDb&apos;;</div><div class="line">import TodoHeader from &apos;./TodoHeader&apos;;</div><div class="line">import TodoMain from &apos;./TodoMain&apos;;</div><div class="line">import TodoFooter from &apos;./TodoFooter&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。</div><div class="line"> * 上面的TodoHeader是用来输入任务的地方，中间的TodoMain是用来展示任务列表的,</div><div class="line"> * 下面的TodoFooter提供一些特殊的方法，比如全选、删除等。</div><div class="line"> */</div><div class="line"></div><div class="line">class App extends React.Component&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        super();</div><div class="line">        this.db = new LocalDb(&apos;ReactDemo&apos;);</div><div class="line">        //定义组件状态</div><div class="line">        this.state  =&#123;</div><div class="line">            todos:this.db.get(&apos;todos&apos;) || [],</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 判断是否所有任务的状态都完成，同步底部的全选框</div><div class="line">    allChecked()&#123;</div><div class="line">        let isAllChecked = false;</div><div class="line">        if (this.state.todos.every(todo  =&gt; todo.isDone))&#123;</div><div class="line">            isAllChecked = true;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:this.state.todos,</div><div class="line">            isAllChecked:isAllChecked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 添加任务，是传递给Header组件的方法</div><div class="line">    addTodo(todoItem)&#123;</div><div class="line">        this.state.todos.push(todoItem);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">        this.allChecked();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 删除当前的任务，传递给TodoItem的方法</div><div class="line">    deleteTodo(index)&#123;</div><div class="line">        this.state.todos.splice(index,1);</div><div class="line">        this.setState(&#123;todos:this.state.todos&#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 清除已完成的任务，传递给Footer组件的方法</div><div class="line">    clearDone()&#123;</div><div class="line">        let todos = this.state.todos.filter(todo =&gt; !todo.isDone);</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:todos,</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 改变任务状态，传递给TodoItem和Footer组件的方法</div><div class="line">    changeTodoState(index,isDone,isChangeAll=false)&#123;</div><div class="line">        if(isChangeAll)&#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                todos:this.state.todos.map( (todo) =&gt; &#123;</div><div class="line">                    todo.isDone = isDone;</div><div class="line">                    return todo;</div><div class="line">                &#125;),</div><div class="line">                isAllChecked:isDone</div><div class="line">            &#125;);</div><div class="line">        &#125;else&#123;</div><div class="line">            this.state.todos[index].isDone = isDone;</div><div class="line">            this.allChecked();</div><div class="line">        &#125;</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//组件渲染方法</div><div class="line">    render()&#123;</div><div class="line">        let info = &#123;</div><div class="line">            isAllChecked:this.state.isAllChecked,</div><div class="line">            todoCount:this.state.todos.length || 0,</div><div class="line">            todoDoneCount:(this.state.todos &amp;&amp; this.state.todos.filter((todo)=&gt;todo.isDone)).length || 0</div><div class="line">        &#125;;</div><div class="line">        return (</div><div class="line">        &lt;div className=&quot;todo-wrap&quot;&gt;</div><div class="line">            &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">React.render(&lt;App/&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题出在webpack-config-js内容&quot;&gt;&lt;a href=&quot;#问题出在webpack-config-js内容&quot; class=&quot;headerlink&quot; title=&quot;问题出在webpack.config.js内容&quot;&gt;&lt;/a&gt;问题出在webpack.confi
    
    </summary>
    
      <category term="react" scheme="https://chanran.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://chanran.github.io/tags/react/"/>
    
      <category term="webpack" scheme="https://chanran.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>eslint react xxx is assigned a value but never used 的解决办法</title>
    <link href="https://chanran.github.io/2016/12/11/eslint-react-xxx-is-assigned-a-value-but-never-used-solution/"/>
    <id>https://chanran.github.io/2016/12/11/eslint-react-xxx-is-assigned-a-value-but-never-used-solution/</id>
    <published>2016-12-10T16:09:15.000Z</published>
    <updated>2016-12-10T16:28:17.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint中文翻译"><a href="#ESLint中文翻译" class="headerlink" title="ESLint中文翻译"></a>ESLint中文翻译</h1><ul>
<li><a href="http://eslint.cn/" target="_blank" rel="external">ESLint</a></li>
</ul>
<h1 id="问题重现-定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误"><a href="#问题重现-定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误" class="headerlink" title="问题重现(定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误)"></a>问题重现(定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">let Form = React.createClass(&#123;</div><div class="line">	render: () =&gt; &#123; &lt; div className = &quot;form&quot; &gt; &lt; div className = &quot;form-title&quot; &gt; Simple Login Form &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;name-div&quot;&gt;&lt;label htmlFor=&quot;username&quot; className=&quot;name-label&quot;&gt;Name:&lt;/label &gt; &lt;input id=&quot;username&quot; className=&quot;name-input&quot; name=&quot;username&quot; type=&quot;text&quot;/&gt; &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;pwd-div&quot;&gt;&lt;label htmlFor=&quot;password&quot; className=&quot;pwd-label&quot;&gt;Password:&lt;/label &gt; &lt;input id=&quot;password&quot; className=&quot;pwd-input&quot; name=&quot;password&quot; type=&quot;password&quot;/&gt; &lt; /div&gt;</div><div class="line">        &lt;/div &gt;;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Form /&gt;,document.getElementById(&apos;loginForm&apos;));</div></pre></td></tr></table></figure>
<p>然后atom 的eslint报了<code>no-unused-vars &#39;Form&#39; is assigned a value but never used.at line 4 col 5</code>的错误。</p>
<h1 id="比较麻烦的解决办法–每一行报错的地方都加一行注释"><a href="#比较麻烦的解决办法–每一行报错的地方都加一行注释" class="headerlink" title="比较麻烦的解决办法–每一行报错的地方都加一行注释"></a>比较麻烦的解决办法–每一行报错的地方都加一行注释</h1><p>在声明变量的当前行加上一条注释 <code>// eslint-disable-line no-unused-vars</code></p>
<p>即是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">let Form = React.createClass(&#123; // eslint-disable-line no-unused-vars</div><div class="line">	render: () =&gt; &#123; &lt; div className = &quot;form&quot; &gt; &lt; div className = &quot;form-title&quot; &gt; Simple Login Form &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;name-div&quot;&gt;&lt;label htmlFor=&quot;username&quot; className=&quot;name-label&quot;&gt;Name:&lt;/label &gt; &lt;input id=&quot;username&quot; className=&quot;name-input&quot; name=&quot;username&quot; type=&quot;text&quot;/&gt; &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;pwd-div&quot;&gt;&lt;label htmlFor=&quot;password&quot; className=&quot;pwd-label&quot;&gt;Password:&lt;/label &gt; &lt;input id=&quot;password&quot; className=&quot;pwd-input&quot; name=&quot;password&quot; type=&quot;password&quot;/&gt; &lt; /div&gt;</div><div class="line">        &lt;/div &gt;;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Form /&gt;,document.getElementById(&apos;loginForm&apos;));</div></pre></td></tr></table></figure></p>
<h1 id="比较暴力的解决方法–直接禁用变量声明但未使用的提示-但是也比较省心，不用加一堆注释"><a href="#比较暴力的解决方法–直接禁用变量声明但未使用的提示-但是也比较省心，不用加一堆注释" class="headerlink" title="比较暴力的解决方法–直接禁用变量声明但未使用的提示,但是也比较省心，不用加一堆注释"></a>比较暴力的解决方法–直接禁用变量声明但未使用的提示,但是也比较省心，不用加一堆注释</h1><p>设置.eslint.json(或者是yaml等)的”no-unused-vars”规则为禁用(0为禁用)。具体可以看<a href="http://eslint.cn/docs/rules/no-unused-vars" target="_blank" rel="external">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;rules&quot;:&#123;</div><div class="line">    &quot;no-unused-vars&quot;:0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ESLint中文翻译&quot;&gt;&lt;a href=&quot;#ESLint中文翻译&quot; class=&quot;headerlink&quot; title=&quot;ESLint中文翻译&quot;&gt;&lt;/a&gt;ESLint中文翻译&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eslint.cn/&quot; targ
    
    </summary>
    
      <category term="react" scheme="https://chanran.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://chanran.github.io/tags/react/"/>
    
      <category term="eslint" scheme="https://chanran.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>写electron遇到的坑</title>
    <link href="https://chanran.github.io/2016/12/08/%E5%86%99electron%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://chanran.github.io/2016/12/08/写electron遇到的坑/</id>
    <published>2016-12-07T16:37:28.000Z</published>
    <updated>2016-12-07T17:20:02.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="electron进程之间的通信"><a href="#electron进程之间的通信" class="headerlink" title="electron进程之间的通信"></a>electron进程之间的通信</h1><h2 id="渲染进程和主进程之间的通信"><a href="#渲染进程和主进程之间的通信" class="headerlink" title="渲染进程和主进程之间的通信"></a>渲染进程和主进程之间的通信</h2><ol>
<li>渲染进程和主进程之间通过ipc通信，渲染进程使用的是ipcRenderer,而主进程使用的是ipcMain。</li>
</ol>
<h2 id="渲染进程和渲染进程之间的通信"><a href="#渲染进程和渲染进程之间的通信" class="headerlink" title="渲染进程和渲染进程之间的通信"></a>渲染进程和渲染进程之间的通信</h2><ol>
<li>渲染进程和渲染进程之间的通信：渲染进程1-&gt;主进程-&gt;渲染进程2。</li>
</ol>
<h2 id="进程之间数据共享：IPC，HTML5-API-Storage-API-IndexedDB-等"><a href="#进程之间数据共享：IPC，HTML5-API-Storage-API-IndexedDB-等" class="headerlink" title="进程之间数据共享：IPC，HTML5 API(Storage API,IndexedDB)等"></a>进程之间数据共享：IPC，HTML5 API(Storage API,IndexedDB)等</h2><p><strong>注意不要犯的错</strong>:比如在进程1中改变过了ES6类1的静态属性，如果在进程2中require了这个类1，那么进程2只能得到进程1改变类1的静态属性之前的值。</p>
<ul>
<li>IPC通信:可以使用Electron中提供的IPC系统。它在主进程中将一个对象储存为全局变量，然后可以通过remote模块操作它们</li>
<li>HTML5 API</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;electron进程之间的通信&quot;&gt;&lt;a href=&quot;#electron进程之间的通信&quot; class=&quot;headerlink&quot; title=&quot;electron进程之间的通信&quot;&gt;&lt;/a&gt;electron进程之间的通信&lt;/h1&gt;&lt;h2 id=&quot;渲染进程和主进程之间的通信
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="electron" scheme="https://chanran.github.io/tags/electron/"/>
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://chanran.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>写vuejs需要注意的地方</title>
    <link href="https://chanran.github.io/2016/12/06/%E5%86%99vuejs%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://chanran.github.io/2016/12/06/写vuejs需要注意的地方/</id>
    <published>2016-12-06T10:36:11.000Z</published>
    <updated>2016-12-06T10:42:48.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue的实例嵌套"><a href="#Vue的实例嵌套" class="headerlink" title="Vue的实例嵌套"></a>Vue的实例嵌套</h1><h2 id="最高级的实例为主，低级的实例方法"><a href="#最高级的实例为主，低级的实例方法" class="headerlink" title="最高级的实例为主，低级的实例方法"></a>最高级的实例为主，低级的实例方法</h2><h1 id="Vue的数组更新问题"><a href="#Vue的数组更新问题" class="headerlink" title="Vue的数组更新问题"></a>Vue的数组更新问题</h1><h2 id="不能直接赋值数组，触发不了视图更新"><a href="#不能直接赋值数组，触发不了视图更新" class="headerlink" title="不能直接赋值数组，触发不了视图更新"></a>不能直接赋值数组，触发不了视图更新</h2><h2 id="使用变异方法和非变异方法"><a href="#使用变异方法和非变异方法" class="headerlink" title="使用变异方法和非变异方法"></a>使用变异方法和非变异方法</h2><h1 id="Vue对src属性的处理"><a href="#Vue对src属性的处理" class="headerlink" title="Vue对src属性的处理"></a>Vue对src属性的处理</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue的实例嵌套&quot;&gt;&lt;a href=&quot;#Vue的实例嵌套&quot; class=&quot;headerlink&quot; title=&quot;Vue的实例嵌套&quot;&gt;&lt;/a&gt;Vue的实例嵌套&lt;/h1&gt;&lt;h2 id=&quot;最高级的实例为主，低级的实例方法&quot;&gt;&lt;a href=&quot;#最高级的实例为主，低级的实
    
    </summary>
    
      <category term="javascript" scheme="https://chanran.github.io/categories/javascript/"/>
    
    
      <category term="vuejs" scheme="https://chanran.github.io/tags/vuejs/"/>
    
      <category term="MVVM" scheme="https://chanran.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu放wifi(热点)给安卓手机</title>
    <link href="https://chanran.github.io/2016/11/30/ubuntu%E6%94%BEwifi(%E7%83%AD%E7%82%B9)%E7%BB%99%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/"/>
    <id>https://chanran.github.io/2016/11/30/ubuntu放wifi(热点)给安卓手机/</id>
    <published>2016-11-30T01:19:38.000Z</published>
    <updated>2016-11-30T02:24:15.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/ubuntu.png" alt="ubuntu"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于宿舍路由器坏了，手机流量急剧下降（刷twitter…)，所以只能出此下册（个人不太喜欢电脑放wifi）。</p>
<h1 id="ubuntu16-04lts软件中心安装kde5-nm-connection-editor"><a href="#ubuntu16-04lts软件中心安装kde5-nm-connection-editor" class="headerlink" title="ubuntu16.04lts软件中心安装kde5-nm-connection-editor"></a>ubuntu16.04lts软件中心安装kde5-nm-connection-editor</h1><blockquote>
<p>注：ubuntu14.04lts该软件为kde5-nm-connection-editor。</p>
</blockquote>
<p><img src="/img/kdeInstall.png" alt="install kde"></p>
<h1 id="在终端打开kde5-nm-connection-editor"><a href="#在终端打开kde5-nm-connection-editor" class="headerlink" title="在终端打开kde5-nm-connection-editor"></a>在终端打开kde5-nm-connection-editor</h1><blockquote>
<p>注：ubuntu14.04lts:在终端输入kde-nm-connection-editor</p>
</blockquote>
<p><img src="/img/openKde.png" alt="open kde"></p>
<h1 id="添加无线-共享-连接"><a href="#添加无线-共享-连接" class="headerlink" title="添加无线(共享)连接"></a>添加无线(共享)连接</h1><p><img src="/img/shareWIFI.jpg" alt="add wireless(shared)"></p>
<h1 id="填写连接信息：连接名称，SSID-模式。设置热点密码"><a href="#填写连接信息：连接名称，SSID-模式。设置热点密码" class="headerlink" title="填写连接信息：连接名称，SSID,模式。设置热点密码"></a>填写连接信息：连接名称，SSID,模式。设置热点密码</h1><p><img src="/img/fillBlank.png" alt="fill blank"></p>
<p><img src="/img/setPasswd.png" alt="set passwd"></p>
<h1 id="记得连接有线网络，不然是释放不了wifi-热点的-点击右上角网络连接的icon-选择连接隐藏网络，选择你设置的连接名称"><a href="#记得连接有线网络，不然是释放不了wifi-热点的-点击右上角网络连接的icon-选择连接隐藏网络，选择你设置的连接名称" class="headerlink" title="记得连接有线网络，不然是释放不了wifi(热点的),点击右上角网络连接的icon,选择连接隐藏网络，选择你设置的连接名称"></a><strong>记得连接有线网络</strong>，不然是释放不了wifi(热点的),点击右上角网络连接的icon,选择连接隐藏网络，选择你设置的连接名称</h1><p><img src="/img/connectToWIFI.jpg" alt="connect to wifi"></p>
<p><img src="/img/connectToBlueWIFI.jpg" alt="connect to blue&#39;wifi"></p>
<blockquote>
<p>点击连接</p>
</blockquote>
<p><img src="/img/blueWIFI.png" alt="blue&#39;wifi"></p>
<p><strong>这里有点小问题</strong>：好像不能设置wifi安全性，连不上<strong>blue’wifi</strong>。没关系，我们可以另辟蹊径。</p>
<p><img src="/img/setWIFI.jpg" alt="set wifi"></p>
<p><img src="/img/setBlueWIFI.png" alt="set blue&#39;wifi"></p>
<blockquote>
<p>打开之后切换到Wi-Fi安全性的tab那里</p>
</blockquote>
<p><img src="/img/setWIFISec.png" alt="set wifi security"></p>
<h1 id="都设置好了之后就拿去你手机连接你设置的热点吧～"><a href="#都设置好了之后就拿去你手机连接你设置的热点吧～" class="headerlink" title="都设置好了之后就拿去你手机连接你设置的热点吧～"></a>都设置好了之后就拿去你手机连接你设置的热点吧～</h1><blockquote>
<p>可能刚设置完，需要等几分钟才能生效的。</p>
</blockquote>
<p><img src="/img/mobileWIFI.jpg" alt="mobile connect to hot point"></p>
<p><img src="/img/succeedConnect.jpg" alt="success"></p>
<h1 id="如果还是设置不好，那就参考下面的链接"><a href="#如果还是设置不好，那就参考下面的链接" class="headerlink" title="如果还是设置不好，那就参考下面的链接"></a>如果还是设置不好，那就参考下面的链接</h1><ul>
<li><p><a href="http://ubuntuhandbook.org/index.php/2014/06/share-internet-with-android-ubuntu-1404/" target="_blank" rel="external">Share Internet Connection With Android in Ubuntu 14.04</a></p>
</li>
<li><p><a href="http://www.jb51.net/os/Ubuntu/344088.html" target="_blank" rel="external">ubuntu14.04怎么建立wifi热点？</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/ubuntu.png&quot; alt=&quot;ubuntu&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于宿舍路由器坏了，手机流量急剧下降（刷tw
    
    </summary>
    
      <category term="瞎折腾" scheme="https://chanran.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="ubuntu" scheme="https://chanran.github.io/tags/ubuntu/"/>
    
      <category term="wifi" scheme="https://chanran.github.io/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>electron开发跨平台桌面应用</title>
    <link href="https://chanran.github.io/2016/11/29/electron%E5%BC%80%E5%8F%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>https://chanran.github.io/2016/11/29/electron开发跨平台桌面应用/</id>
    <published>2016-11-29T15:49:23.000Z</published>
    <updated>2016-11-30T01:18:34.379Z</updated>
    
    <content type="html"><![CDATA[<p>留坑======</p>
<h1 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装electron</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;留坑======&lt;/p&gt;
&lt;h1 id=&quot;安装electron&quot;&gt;&lt;a href=&quot;#安装electron&quot; class=&quot;headerlink&quot; title=&quot;安装electron&quot;&gt;&lt;/a&gt;安装electron&lt;/h1&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="electron" scheme="https://chanran.github.io/tags/electron/"/>
    
      <category term="js" scheme="https://chanran.github.io/tags/js/"/>
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>写nodejs时遇到的坑</title>
    <link href="https://chanran.github.io/2016/11/29/%E5%86%99nodejs%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://chanran.github.io/2016/11/29/写nodejs时遇到的坑/</id>
    <published>2016-11-29T11:16:45.000Z</published>
    <updated>2016-12-06T01:28:17.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/nodejs.jpg" alt="nodejs"></p>
<h1 id="坑一：模块require"><a href="#坑一：模块require" class="headerlink" title="坑一：模块require"></a>坑一：模块require</h1><h2 id="在html引入的js文件里require的时候是基于该html文件的。"><a href="#在html引入的js文件里require的时候是基于该html文件的。" class="headerlink" title="在html引入的js文件里require的时候是基于该html文件的。"></a>在html引入的js文件里require的时候是基于该html文件的。</h2><p><code>目录结构</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">   index.html</div><div class="line">   js/</div><div class="line">      index.js</div><div class="line">      test.js</div></pre></td></tr></table></figure>
<p><code>src/index.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;script src=&quot;./js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>src/js/index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const test = require(&apos;./test&apos;);</div><div class="line">test();</div></pre></td></tr></table></figure>
<p><code>src/js/test.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = function()&#123;</div><div class="line">  console.log(&apos;you are require src/js/test.js&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用<strong>nodejs</strong>运行上面的代码，打开<strong>index.html</strong>，会报找不到<strong>./test</strong>模块的错误，将<strong>index.js</strong>的代码改成下面的就行了。</p>
<p><code>src/js/index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const test = require(&apos;./js/test&apos;); //基于index.html所在目录下。</div><div class="line">test();</div></pre></td></tr></table></figure>
<h2 id="nodejs循环依赖（每种情况不同解决方法）。"><a href="#nodejs循环依赖（每种情况不同解决方法）。" class="headerlink" title="nodejs循环依赖（每种情况不同解决方法）。"></a>nodejs循环依赖（每种情况不同解决方法）。</h2><blockquote>
<p>定义： 当有require()模块循环时，模块返回的时候还没有执行完。<br>即： a模块 require b模块，b模块也 require a模块。</p>
<p>官网例子:</p>
</blockquote>
<p>1.当<strong>main.js先require a.js</strong>时，此时程序进入a.js执行require b.js，然后程序又进入b.js之后b.js尝试require a.js，此时就发现有问题,<strong> a.js返回了没有执行完的模块</strong>给b.js,即a.js执行到<code>exports.done =false</code>就返回给b.js了，所以在b.js里的<strong>a.js是没有执行完</strong>的。而如果是另一种情况，a.js是用module.exports出来的，那么b.js得到的是一个空对象object{}。（这里有点绕，有空画一张图出来比较好理解）</p>
<p><code>a.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;a starting&apos;);</div><div class="line">exports.done = false;</div><div class="line">const b = require(&apos;./b.js&apos;);</div><div class="line">console.log(&apos;in a, b.done = %j&apos;, b.done);</div><div class="line">exports.done = true;</div><div class="line">console.log(&apos;a done&apos;);</div></pre></td></tr></table></figure>
<p><code>b.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;b starting&apos;);</div><div class="line">exports.done = false;</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">console.log(&apos;in b, a.done = %j&apos;, a.done);</div><div class="line">exports.done = true;</div><div class="line">console.log(&apos;b done&apos;);</div></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;main starting&apos;);</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">const b = require(&apos;./b.js&apos;);</div><div class="line">console.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</div></pre></td></tr></table></figure>
<p><code>执行结果</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">main starting</div><div class="line">a starting</div><div class="line">b starting</div><div class="line">in b, a.done = false</div><div class="line">b done</div><div class="line">in a, b.done = true</div><div class="line">a done</div><div class="line">in main, a.done=true, b.done=true</div></pre></td></tr></table></figure>
<p>2.基本同上，但是main.js有所改动。这里main.js先调用b.js。对比上面main.js先调用a.js。程序入口不一样，程序的执行顺序也不一样，结果也反过来了。</p>
<p><code>main.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;main starting&apos;);</div><div class="line">const b = require(&apos;./b.js&apos;);     //对比之前的main.js，这里先调用b.js</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">console.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</div></pre></td></tr></table></figure>
<p><code>执行结果</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">main starting</div><div class="line">b starting</div><div class="line">a starting</div><div class="line">in a, b.done = false</div><div class="line">a done</div><div class="line">in b, a.done = true</div><div class="line">b done</div><div class="line">in main, a.done=true, b.done=true</div></pre></td></tr></table></figure>
<h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/nodejs.jpg&quot; alt=&quot;nodejs&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;坑一：模块require&quot;&gt;&lt;a href=&quot;#坑一：模块require&quot; class=&quot;headerlink&quot; title=&quot;坑一：模块require&quot;&gt;&lt;/a&gt;坑一
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
      <category term="commonjs" scheme="https://chanran.github.io/tags/commonjs/"/>
    
  </entry>
  
  <entry>
    <title>记录读过的有意义的书籍</title>
    <link href="https://chanran.github.io/2016/11/13/%E8%AE%B0%E5%BD%95%E8%AF%BB%E8%BF%87%E7%9A%84%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    <id>https://chanran.github.io/2016/11/13/记录读过的有意义的书籍/</id>
    <published>2016-11-13T11:50:50.000Z</published>
    <updated>2016-11-29T12:29:14.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/yuedu.jpg" alt="阅读的猫"></p>
<blockquote>
<p>无论书读没读完,都对自己的成长有帮助。</p>
</blockquote>
<h1 id="文学类"><a href="#文学类" class="headerlink" title="文学类"></a>文学类</h1><h2 id="《薄暮》"><a href="#《薄暮》" class="headerlink" title="《薄暮》"></a>《薄暮》</h2><h2 id="《三国演义》"><a href="#《三国演义》" class="headerlink" title="《三国演义》"></a>《三国演义》</h2><h2 id="《水浒传》"><a href="#《水浒传》" class="headerlink" title="《水浒传》"></a>《水浒传》</h2><h1 id="杂志类"><a href="#杂志类" class="headerlink" title="杂志类"></a>杂志类</h1><h2 id="《青年文摘》"><a href="#《青年文摘》" class="headerlink" title="《青年文摘》"></a>《青年文摘》</h2><h2 id="《读者》"><a href="#《读者》" class="headerlink" title="《读者》"></a>《读者》</h2><h2 id="《哲思》"><a href="#《哲思》" class="headerlink" title="《哲思》"></a>《哲思》</h2><h1 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h1><blockquote>
<p>技术无分方向,学多了实践多了便会贯通。</p>
</blockquote>
<h2 id="《JavaScript高级程序设计-第2版-》"><a href="#《JavaScript高级程序设计-第2版-》" class="headerlink" title="《JavaScript高级程序设计(第2版)》"></a>《JavaScript高级程序设计(第2版)》</h2><h2 id="《JavaScript权威指南》"><a href="#《JavaScript权威指南》" class="headerlink" title="《JavaScript权威指南》"></a>《JavaScript权威指南》</h2><h2 id="《Javascript-Dom编程设计-第3版-》"><a href="#《Javascript-Dom编程设计-第3版-》" class="headerlink" title="《Javascript Dom编程设计(第3版)》"></a>《Javascript Dom编程设计(第3版)》</h2><h2 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a>《HTTP权威指南》</h2><h2 id="《Node-js权威指南》"><a href="#《Node-js权威指南》" class="headerlink" title="《Node.js权威指南》"></a>《Node.js权威指南》</h2><h2 id="《C-Primer-第5版-》"><a href="#《C-Primer-第5版-》" class="headerlink" title="《C++ Primer(第5版)》"></a>《C++ Primer(第5版)》</h2><h2 id="《白帽子讲Web安全-纪念版-》"><a href="#《白帽子讲Web安全-纪念版-》" class="headerlink" title="《白帽子讲Web安全(纪念版)》"></a>《白帽子讲Web安全(纪念版)》</h2><h2 id="《数据库系统概念》"><a href="#《数据库系统概念》" class="headerlink" title="《数据库系统概念》"></a>《数据库系统概念》</h2><h2 id="《Linux指令范例速查手册》-当做字典查指令"><a href="#《Linux指令范例速查手册》-当做字典查指令" class="headerlink" title="《Linux指令范例速查手册》(当做字典查指令)"></a>《Linux指令范例速查手册》(当做字典查指令)</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/yuedu.jpg&quot; alt=&quot;阅读的猫&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论书读没读完,都对自己的成长有帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;文学类&quot;&gt;&lt;a href=&quot;#文学类&quot; class=&quot;header
    
    </summary>
    
      <category term="阅读" scheme="https://chanran.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="书籍" scheme="https://chanran.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="阅读" scheme="https://chanran.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>[转载]计算机常用英语术语、词汇表</title>
    <link href="https://chanran.github.io/2016/11/12/%E8%BD%AC%E8%BD%BD-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
    <id>https://chanran.github.io/2016/11/12/转载-计算机专业术语/</id>
    <published>2016-11-12T07:48:15.000Z</published>
    <updated>2016-11-12T08:35:44.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自<a href="http://www.24en.com/study/words/2006-01-02/373.html" target="_blank" rel="external">计算机常用英语术语、词汇表</a></p>
</blockquote>
<p>Computer Vocabulary In Common Use<br>一、硬件类(Hardware)<br>二、软件类(Software)<br>三、网络类(Network)<br>四、其它</p>
<p>CPU(Center Processor Unit)中央处理单元<br>mainboard主板<br>RAM(random access<br>memory)随机存储器(内存)<br>ROM(Read Only Memory)只读存储器<br>Floppy Disk软盘<br>Hard Disk硬盘<br>CD-ROM光盘驱动器(光驱)<br>monitor监视器<br>keyboard键盘<br>mouse鼠标<br>chip芯片<br>CD-R光盘刻录机<br>HUB集线器<br>Modem= MOdulator-DEModulator,调制解调器<br>P-P(Plug and Play)即插即用<br>UPS(Uninterruptable Power Supply)不间断电源<br>BIOS(Basic-input-Output<br>System)基本输入输出系统<br>CMOS(Complementary Metal-Oxide-Semiconductor)互补金属氧化物半导体<br>setup安装<br>uninstall卸载<br>wizzard向导<br>OS(Operation Systrem)操作系统<br>OA(Office AutoMation)办公自动化<br>exit退出<br>edit编辑<br>copy复制<br>cut剪切<br>paste粘贴<br>delete删除<br>select选择<br>find查找<br>select all全选<br>replace替换<br>undo撤消<br>redo重做<br>program程序<br>license许可(证)<br>back前一步<br>next下一步<br>finish结束<br>folder文件夹<br>Destination Folder目的文件夹<br>user用户<br>click点击<br>double click双击<br>right click右击<br>settings设置<br>update更新<br>release发布<br>data数据<br>data base数据库<br>DBMS(Data Base Manege<br>System)数据库管理系统<br>view视图<br>insert插入<br>object对象<br>configuration配置<br>command命令<br>document文档<br>POST(power-on-self-test)电源自检程序<br>cursor光标<br>attribute属性<br>icon图标<br>service pack服务补丁<br>option pack功能补丁<br>Demo演示<br>short cut快捷方式<br>exception异常<br>debug调试<br>previous前一个<br>column行<br>row列<br>restart重新启动<br>text文本<br>font字体<br>size大小<br>scale比例<br>interface界面<br>function函数<br>access访问<br>manual指南<br>active激活<br>computer language计算机语言<br>menu菜单<br>GUI(graphical user<br>interfaces )图形用户界面<br>template模版<br>page setup页面设置<br>password口令<br>code密码<br>print preview打印预览<br>zoom in放大<br>zoom out缩小<br>pan漫游<br>cruise漫游<br>full screen全屏<br>tool bar工具条<br>status bar状态条<br>ruler标尺<br>table表<br>paragraph段落<br>symbol符号<br>style风格<br>execute执行<br>graphics图形<br>image图像<br>Unix用于服务器的一种操作系统<br>Mac OS苹果公司开发的操作系统<br>OO(Object-Oriented)面向对象<br>virus病毒<br>file文件<br>open打开<br>colse关闭<br>new新建<br>save保存<br>exit退出<br>clear清除<br>default默认<br>LAN局域网<br>WAN广域网<br>Client/Server客户机/服务器<br>ATM( Asynchronous<br>Transfer Mode)异步传输模式<br>Windows NT微软公司的网络操作系统<br>Internet互联网<br>WWW(World Wide Web)万维网<br>protocol协议<br>HTTP超文本传输协议<br>FTP文件传输协议<br>Browser浏览器<br>homepage主页<br>Webpage网页<br>website网站<br>URL在Internet的WWW服务程序上<br>用于指定信息位置的表示方法<br>Online在线<br>Email电子邮件<br>ICQ网上寻呼<br>Firewall防火墙<br>Gateway网关<br>HTML超文本标识语言<br>hypertext超文本<br>hyperlink超级链接<br>IP(Address)互联网协议(地址)<br>SearchEngine搜索引擎<br>TCP/IP用于网络的一组通讯协议<br>Telnet远程登录<br>IE(Internet Explorer)探索者(微软公司的网络浏览器)<br>Navigator引航者(网景公司的浏览器)<br>multimedia多媒体<br>ISO国际标准化组织<br>ANSI美国国家标准协会<br>able 能<br>activefile 活动文件<br>addwatch 添加监视点<br>allfiles 所有文件<br>allrightsreserved 所有的权力保留<br>altdirlst 切换目录格式<br>andfixamuchwiderrangeofdiskproblems 并能够解决更大范围内的磁盘问题<br>andotherinFORMation 以及其它的信息<br>archivefileattribute 归档文件属性<br>assignto 指定到<br>autoanswer 自动应答<br>autodetect 自动检测<br>autoindent 自动缩进<br>autosave 自动存储<br>availableonvolume 该盘剩余空间<br>badcommand 命令错<br>badcommandorfilename 命令或文件名错<br>batchparameters 批处理参数<br>binaryfile 二进制文件<br>binaryfiles 二进制文件<br>borlandinternational borland国际公司<br>bottommargin 页下空白<br>bydate 按日期<br>byextension 按扩展名<br>byname 按名称<br>bytesfree 字节空闲<br>callstack 调用栈<br>casesensitive 区分大小写<br>causespromptingtoconfirmyouwanttooverwritean 要求出现确认提示,在你想覆盖一个<br>centralpointsoftwareinc central point 软件股份公司<br>changedirectory 更换目录<br>changedrive 改变驱动器<br>changename 更改名称<br>characterset 字符集<br>checkingfor 正在检查<br>checksadiskanddisplaysastatusreport 检查磁盘并显示一个状态报告<br>chgdrivepath 改变盘/路径</p>
<p>node 节点<br>npasswd UNIX的一种代理密码检查器，在提交给密码文件前，它将对潜在的密码进行筛选。<br>OSPF 开放最短路径优先协议<br>OSI Model 开放系统互连模式<br>out-of-band attack 带外攻击<br>packet filter 分组过滤器<br>password 口令<br>path 路径<br>payload 净负荷<br>PBX 专用交换机<br>PCS 个人通信业务<br>peer 对等<br>permission 权限<br>plaintext 明文<br>PPTP 点到点隧道协议<br>port 端口<br>prority 优先权<br>protocol 协议<br>potential browser 潜在浏览器<br>POP 互联网电子邮件协议标准<br>是Post Office Protocol 的缩写，是互联网电子邮件协议标准。我们可以通过有POP<br>服务功能的主机传送及接收电子邮件。该协议的缺陷是，当你接收电子邮件时，所有<br>的信件都从服务器上清除，下载到你的本地硬盘。当然也有一些客户端程序可以将电<br>子邮件留在服务器上，或设置成超过一定大小的文件不可下载。随着邮件采用多媒体<br>格式，邮件会越来越大，我们希望能够灵活掌握下载什么文件、何时下载，这就需要<br>IMAP 协议。目前POP的版本为POP3。<br>process 进程<br>proxy 代理<br>proxy server 代理服务器<br>代理服务就是代理Web用户去取得资料回来，通常使用WWW软件要去连结远方的终端取得资<br>料时，必须送出要求信号然后再一个字节一个字节的传送回来。有了proxy的设定以后，要<br>求资料的信号会先送到Proxy Server。当Proxy Server得到用户的请求时，首先会到cache<br>中寻找有没有同样的资料，如果有，就由Proxy Server直接将资料传给用户，如果cache没<br>有资料，Proxy Server就会利用网络上所可以使用的频宽，到远端站台取回资料，一边储存<br>在cache中，一边传送给用户。即使线路阻塞，还是比用户自己直接抓取要来得快速的。<br>paseudorandom 伪随机<br>phreaking 指控制电话系统的过程<br>RAS 远程访问服务<br>Remote control 远程控制<br>RPC 远程过程调用<br>remote boot 远程引导<br>route 路由<br>router 路由器<br>routing 路由选择<br>RIP 路由选择信息协议<br>routed daemon 一种利用RIP的UNIX寻径服务<br>routing table 路由表<br>R.U.P 路由更新协议<br>RSA 一种公共密匙加密算法。而RSA也许是最流行的。<br>script 脚本<br>search engine 搜索引擎<br>SSL 安全套接层<br>secure 密码<br>SID 安全标识符<br>sender 发送者<br>SLIP 串行线网际协议<br>server 服务器<br>server-based network 基于服务器的网络<br>session layer 会话层<br>share、sharing 共享<br>share-level security 共享级安全性<br>SMTP 简单邮件传送协议<br>SNMP 简单网络管理协议<br>Site 站点<br>SCSI 小型计算机系统接口<br>snffer 检错器<br>snooping 探听<br>standalone server 独立服务器<br>strong cipher 强密码<br>stream cipher 流密码<br>strong password 强口令<br>SQL 结构化查询语言<br>subnet mask 子网掩码<br>subdirectory 子目录<br>subnet 子网<br>swap file 交换文件<br>SACL 系统访问控制表<br>S/Key 安全连接的一次性密码系统，在S/Key中，密码从不会经过网络发送，因此不可能被窃取。<br>sniffer（嗅探器） 秘密捕获穿过网络的数据报文的程序，黑客一般用它来设法盗取用户名和密码的。<br>spoofing（电子欺骗） 任何涉及假扮其他用户或主机以对目标进行未授权访问的过程<br>time bomb（时间炸弹） 指等待某一特定时间或事件出先才激活，从而导致机器故障的程序<br>TCPDUMP 是UNIX中捕获数据包的实用工具，常被用语获得详细的网络通信记录的。<br>Traceroute 一个UNIX上的常用TCP程序，用语跟踪本机和远程主机之间的路由<br>T0,DS0 56或者64kbps<br>T1,DS1 24路PCM数字话，总速率为1.544Mbps<br>T3,DS3 28个T1信道，作品能够速率为44.736Mbps<br>thin client 瘦客户机<br>thread 线程<br>throughput 吞吐量<br>transport layer 传输量<br>Transport Protocol 传输协议<br>trust 信任<br>tunnel 安全加密链路<br>vector of attack 攻击向量<br>Virtual directory 虚目录<br>Virtual Machine 虚拟机<br>VRML 虚拟现实模型语言<br>volume 文件集<br>vulnerability 脆弱性<br>weak passwurd 弱口令<br>well-known ports 通用端口<br>workstation 工作站<br>X.25 一种分组交换网协议<br>zone transfer 区域转换</p>
<p>authentication 认证、鉴别<br>authorization 授权<br>Back Office Microsoft公司的一种软件包<br>Back up 备份<br>backup browser 后备浏览器<br>BDC 备份域控制器<br>baseline 基线<br>BIOS 基本输入/输出系统<br>Binding 联编、汇集<br>bit 比特、二进制位<br>BOOTP 引导协议<br>BGP 引导网关协议<br>Bottleneck 瓶径<br>bridge 网桥、桥接器<br>browser 浏览器<br>browsing 浏览<br>channel 信道、通路<br>CSU/DSU 信道服务单元/数字服务单元<br>Checksum 校验和<br>Cluster 簇、群集<br>CGI 公共网关接口<br>CGI（Common Gateway Interface公用网关接口是一个可以产生相同结果或结果随用户输入<br>而变化的程序。它可以用一种解释性的界面语言编写，也可以用一种编译方式的编程语言<br>编写。CGI规定了Web服务器调用其它可执行程序的接口协议标准。Web服务器通过调用CGI程<br>序实现和Web浏览器的交互，也就是CGI程序接受Web浏览器发送给Web服务器的信息，进行处<br>理，并将响应结果再回送给Web服务器和Web浏览器。CGI程序一般完成Web网页中表单数据的<br>处理、数据库查询和实现与传统应用系统的集成等工作。CGI程序虽然可以用任何程序设计<br>语言编写，但是用C语言编写的CGI程序具有执行速度快、安全性高等特点。<br>CGI-based attack（基于CGI攻击）它利用公共网关接口的脆弱点进行攻击，通常借助www站<br>点进行<br>crash（崩溃） 系统突然失效，需要从新引导<br>CD-ROM 只读型光盘<br>Component 组件<br>data link 数据链路<br>datagram 数据报<br>default document 缺省文档<br>digital key system 数字键控系统<br>disk mirroring 磁盘镜像<br>distributed file system 分布式文件系统<br>data-driven attack（数据驱动攻击）依靠隐藏或者封装数据进行的攻击，那些数据可不被察觉<br>的通过防火墙。<br>DNS spoofing（域名服务器电子欺骗）攻击者用来损害域名服务器的方法，可通过欺骗DNS的高速<br>缓存或者内应攻击来实现的一种方式（通常为攻击者假扮合法的DNS服务器角色）<br>DoS（嘿嘿，可不是DOS哦，这个是deniad of service，极为服务拒绝）用户恶意使用网络信息服<br>务器时，将拒绝为合法的用户提供服务。<br>eavesdropping 窃听、窃取<br>encrypted tunnel 加密通道<br>enterprise network 企业网<br>Ethernet 以太网<br>External security 外部安全性<br>environment variable 环境变量<br>fax modem 传真猫<br>file attribute 文件属性<br>file system 文件系统<br>file 文件<br>FORM 格式<br>fragments 分段<br>frame relay 桢中继<br>firewall 防火墙<br>Firework(防火墙)是加强加 Internet 与 Intranetp(内部网)之间安全防范的一个或一组系统。防火<br>墙可以确定哪些内部服务允许外部访问，哪些外人被许可访问所允许的内部服务，那些外部服务可由<br>内部人员访问。为了使防火墙发挥效力，来自和发往 Internet 的所有信息都必须经由防火墙出入。<br>防火墙只允许授权信息通过，而防火墙本身不能被渗透。<br>gated daemon gated进程（好象是一种早期的UNIX寻径服务）<br>gateway 网关<br>global account 全局帐号<br>global group 全局组<br>group 组<br>group account 组帐号<br>group identifier 组标识符<br>HCL 硬件兼容性表<br>hash 散表<br>HPFS 高性能文件系统<br>Home directory 主目录<br>home page 竹叶<br>hop 驿站、中继段<br>host 主机<br>hyperlink 超文本链接<br>highjacking 劫持终端，即为攻击者捕获另一个用户会话的控制。这<br>是很少发生的，一旦发生就表明目标的安全性已经被破坏。<br>其实NetXRay在这一点就做的很好。<br>HTPASSWD 一种用密码来保护WWW(UNIX)上的站点的系统<br>icon 图标<br>impersonation attack 伪装攻击<br>index server 索引服务器<br>ISA 工业标准结构<br>Inherieted Rights Filter 继承权限过滤器<br>ISDN 综合业务数字网<br>interactive user 交互性用户<br>intermediate system 中介系统<br>internal security 内部安全性<br>Internet Explorer（IE） IBM的万维网浏览器<br>Internet server 因特网服务器<br>Interpreter 解释程序<br>intranet 内联网，企业内部网<br>intruder 入 侵 者<br>IMAP 一种邮件协议<br>是Internet Message Access Protocal 的缩写。IMAP 提供了一个在远程服务器上管理邮件的手<br>段，它与POP 协议相似，但功能比POP 要多，功能包括：只下载邮件的标题、建立多个邮箱和在<br>服务器上建立保存邮件的文件夹。<br>Java Virtual Machine Java虚拟机<br>java script 基于Java语言的一种脚本语言<br>jack in 一句黑客常用的口语，意思为破坏服务器安全的行为<br>kernel 内核<br>keys 密钥<br>keyspace 密钥空间<br>Keystroke Recorder（按键记录器） 一些用语窃取他人用户名和密码的工具<br>LAN Server 局域网服务器<br>Local security 局部安全性<br>log 日志、记录<br>logging 登录<br>logoff 退出、注销<br>logical port 逻辑端口<br>logon 注册<br>logon script 登录脚本<br>LFN 长文件名<br>logic bomb（逻辑炸弹）一种可导致系统加锁或者故障的程序或代码。<br>mass browser 主浏览器<br>MAPI<br>是Messaging Application Progrmming Interface 的缩写。微软和其它一些公司开发了MAPI，<br>可使Windows 应用程序接入到从Microsoft Mail 到Novell MHS的多种消息系统。但是， MAPI<br>仅限于在日常工作的水平上工作，即感知邮件的应用程序，它可在网络上交换邮件与数据。<br>member server 成员服务器<br>menu 菜单<br>message 消息<br>multilink 多链接<br>MIME 多媒体Internet邮件扩展<br>MPR 多协议路由器<br>multiprocessing 多重处理<br>Module 模块<br>multihomed host 多穴主机<br>MUD<br>MUD的英文全名是Multiple User Dimension、Multiple User Dialogue或<br>Multiple User Dungeon，译为“多人世界”、“多人对话”或“多人地牢”，<br>俗称“泥巴”游戏。<br>named pipes 命名管道<br>NDS NetWare目录服务<br>NetBEUI NetBIOS扩展用户接口<br>NetBIOS gateway NetBIOS网关<br>NetWare 网络操作系统（不好意思，我忘了是那个公司开发的了）<br>network 网络<br>NetBIOS 网络基本输入/输出系统<br>NDIS 网络驱动程序接口规范<br>NetDDE 网络动态数据交换<br>NIC 网络接口卡<br>network layer 网络层<br>Network Monitor 一个网络监控程序<br>network operating system 网络操作系统<br>network printer 网络打印机<br>network security 网络安全<br>network user 网络用户<br>NFS 网络文件系统</p>
<p>我把网络安全方面的专业词汇整理了一下，虽然大多是乱谈，但初衷在于初学者能更好的了解这些词汇。不全和错误的地方还望高手补充：<br>Access Control List（ACL） 访问控制列表<br>access token 访问令牌<br>account lockout 帐号封锁<br>account policies 记帐策略<br>accounts 帐号<br>adapter 适配器<br>adaptive speed leveling 自适应速率等级调整<br>Address Resolution Protocol(ARP) 地址解析协议<br>Administrator account 管理员帐号<br>ARPANET 阿帕网（internet的前身）<br>algorithm 算法<br>alias 别名<br>allocation 分配、定位<br>alias 小应用程序<br>allocation layer 应用层<br>API 应用程序编程接口<br>anlpasswd 一种与Passwd+相似的代理密码检查器<br>applications 应用程序<br>ATM 异步传递模式<br>attack 攻击<br>audio policy 审记策略<br>auditing 审记、监察<br>back-end 后端<br>borde 边界<br>borde gateway 边界网关<br>breakabie 可破密的<br>breach 攻破、违反<br>cipher 密码<br>ciphertext 密文<br>CAlass A domain A类域<br>CAlass B domain B类域<br>CAlass C domain C类域<br>classless addressing 无类地址分配<br>cleartext 明文<br>CSNW Netware客户服务<br>client 客户，客户机<br>client/server 客户机/服务器<br>code 代码<br>COM port COM口（通信端口）<br>CIX 服务提供者<br>computer name 计算机名<br>crack 闯入<br>cryptanalysis 密码分析<br>DLC 数据链路控制<br>decryption 解密<br>database 数据库<br>dafault route 缺省路由<br>dafault share 缺省共享<br>denial of service 拒绝服务<br>dictionary attack 字典式攻击<br>directory 目录<br>directory replication 目录复制<br>domain 域<br>domain controller 域名控制器<br>domain name 域名<br>域名其实就是入网计算机的名字，它的作用就象寄信需要写明人们的名字、地址一样重<br>要。域名结构如下：计算机主机名.机构名.网络名.最高层域名。域名用文字表达，比<br>用数字表达的IP地址容易记忆。加入Internet的各级网络依照DNS的命名规则对本网内<br>的计算机命名，并负责完成通讯时域名到IP地址的转换 。<br>DNS 域名服务器<br>DNS(Domain Name System,域名系统)是指在 Internet上查询域名或IP地址的目录服务系<br>统。在接收到请求时，它可将另一台主机的域名翻译为IP地址，或反之。大部分域名系<br>统都维护着一个大型的数据库，它描述了域名与 IP地址的对应关系，并且这个数据库被<br>定期地更新。翻译请求通常来自网络上的另一台计算机，它需要IP地址以便进行路由选择。<br>DDE 动态数据交换<br>DHCP 动态主机配置协议<br>encryption 加密<br>EGP 外部网关协议<br>FDDI 光纤分布式数据接口<br>FAT 文件分配表<br>FTP(File Transfer Protocol） 文件传送协议<br>filter 过滤器<br>firmware 固件<br>flooding 淹没<br>GSNW NetWare网关服务<br>GDI(graphical device interface) 图形设备界面<br>GUI 图形用户界面<br>HTML 超文本标记语言<br>HTTP 超文本传送协议<br>IGP 内部安全性<br>ICMP(Internet Control Message Protocol) 网际控制报文协议<br>ICMP用来发送关于IP数据报传输的控制和错误信息的TCP/IP协议。当一个IP数据报不能传送<br>到目的地时，可能是因为目的地的机器暂停服务或者信息交通阻塞，路由器可能使用ICMP将<br>失败信息通知发送者。<br>IGMP（Internet Group Management Protocol，Internet群组管理协议）<br>这种TCP/IP协议允许Internet主机参加多点播送（multicasting）—-一种向计算机群广播<br>信息的有效手段<br>IIS 信息服务器<br>IP(Internet Protocol) 网际协议<br>IRC 网上交谈<br>ISP 网络服务提供者<br>IPX 互连网分组协议<br>IPC 进程间通信<br>IRQ 中断请求<br>IP address IP地址<br>IP地址称作网络协议地址，是分配给主机的一个32位地址，由4个字节组成，分为动<br>态IP地址和静态IP地址两种。动态IP地址指的是每次连线所取得的地址不同，而静<br>态IP地址是指每次连线均为同样固定的地址。一般情况下，以电话拨号所取得的地址<br>均为动态的，也就是每次所取得的地址不同。<br>IP masquerade IP伪装<br>IP spoofing IP欺骗<br>LAN 局域网<br>LPC 局部过程调用<br>NNTP 网络新闻传送协议<br>PPP 点到点协议<br>称为点对点通信协议(Point to Point Protocol)，是为适应那些不能在网络线上的使<br>用者，通过电话线的连接而彼此通信所制定的协议。<br>PDC 主域控制器<br>Telnet 远程登陆<br>TCP/IP 传输控制协议/网际协议<br>TCP/IP通信协议主要包含了在Internet上网络通信细节的标准，以及一组网络互连的协<br>议和路径选择算法。TCP是传输控制协议，相当于物品装箱单，保证数据在传输过程中不<br>会丢失。IP是网间协议，相当于收发货人的地址和姓名，保证数据到达指定的地点。<br>TFTP 普通文件传送协议<br>TFTP是无盘计算机用来传输信息的一种简化的FTP协议。它非常之简单，所以可固化在硬<br>盘上，而且支持无认证操作。TFTP是一种非常不安全的协议。<br>Trojan Horse 特洛伊木马<br>URL 统一资源定位器<br>UDP 用户数据报协议<br>VDM 虚拟DOS机<br>UUCP 是一种基于猫的使用已经很久的文件传输协议，有时候还使用它在Internet上传输<br>Usenet新闻和E-mail，尤其是在那些间断性联网的站点上。现在很少站提供匿名的UUCP来<br>存取文件。而它做为一种文件传输协议，只有那些没有入网而使用猫的用户使用此方法。<br>WWW 万维网<br>WWW(Word Wide Web)是Internet最新的一种信息服务。它是一种基于超文本文件的<br>交互式浏览检索工具。用户可用WWW在Internet网上浏览、传递、编辑超文本格式的文件。<br>WAN 广域网<br>virtual server 虚拟服务器<br>Usenet<br>用户交流网Usenet是网络新闻服务器的主要信息来源。Usenet完全是一个民间自发建立<br>的，使用Internet交换信息但又不完全依赖Internet进行通讯的用户交流网络。使用Usenet<br>的自愿者共同遵守一些约定的网络使用规则。<br>USER name 用户名<br>USER account 用户帐号<br>Web page 网页<br>OpenGL 开放图形语言<br>ODBC 开放数据库连接<br>PCI 外设连接接口</p>
<p>chooseoneofthefollowing 从下列中选一项<br>clearall 全部清除<br>clearallbreakpoints 清除所有断点<br>clearsanattribute 清除属性<br>clearscommandhistory 清除命令历史<br>clearscreen 清除屏幕<br>closeall 关闭所有文件<br>codegeneration 代码生成<br>colorpalette 彩色调色板<br>commandline 命令行<br>commandprompt 命令提示符<br>compressedfile 压缩文件<br>configuresaharddiskforusewithmsdos 配置硬盘,以为 MS-DOS 所用<br>conventionalmemory 常规内存<br>copiesdirectoriesandsubdirectoriesexceptemptyones 拷贝目录和子目录,空的除外<br>copiesfileswiththearchiveattributeset 拷贝设置了归档属性的文件<br>copiesoneormorefilestoanotherlocation 把文件拷贝或搬移至另一地方<br>copiesthecontentsofonefloppydisktoanother 把一个软盘的内容拷贝到另一个软盘上<br>copydiskette 复制磁盘<br>copymovecompfindrenamedeletevervieweditattribwordpprintlist C拷贝M移动 O比 F搜索R改名 D删除 V版本 E浏览A属性 W写字 P打印 L列表<br>copyrightc 版权(c<br>createdospartitionorlogicaldosdrive 创建DOS分区或逻辑DOS驱动器<br>createextendeddospartition 创建扩展DOS分区<br>createlogicaldosdrivesintheextendeddospartition 在扩展DOS分区中创建逻辑DOS驱动器<br>createprimarydospartition 创建DOS主分区<br>createsadirectory 创建一个目录<br>createschangesordeletesthevolumelabelofadisk 创建,改变或删除磁盘的卷标<br>currentfile 当前文件<br>currentfixeddiskdrive 当前硬盘驱动器<br>currentsettings 当前设置<br>currenttime 当前时间<br>cursorposition 光标位置<br>defrag 整理碎片<br>dele 删去<br>deletepartitionorlogicaldosdrive 删除分区或逻辑DOS驱动器<br>deletesadirectoryandallthesubdirectoriesandfilesinit 删除一个目录和所有的子目录及其中的所有文件<br>deltree 删除树<br>devicedriver 设备驱动程序<br>dialogbox 对话栏<br>directionkeys 方向键<br>directly 直接地<br>directorylistargument 目录显示变量<br>directoryof 目录清单<br>directorystructure 目录结构<br>diskaccess 磁盘存取<br>diskcopy 磁盘拷贝<br>diskservicescopycomparefindrenameverifyvieweditmaplocateinitialize 磁盘服务功能: C拷贝 O比较 F搜索R改卷名V校验 浏览E编缉M图 L找文件 N格式化<br>diskspace 磁盘空间<br>displayfile 显示文件<br>displayoptions 显示选项<br>displaypartitioninFORMation 显示分区信息<br>displaysfilesinspecifieddirectoryandallsubdirectories 显示指定目录和所有目录下的文件<br>displaysfileswithspecifiedattributes 显示指定属性的文件<br>displaysorchangesfileattributes 显示或改变文件属性<br>displaysorsetsthedate 显示或设备日期<br>displayssetupscreensinmonochromeinsteadofcolor 以单色而非彩色显示安装屏信息<br>displaystheamountofusedandfreememoryinyoursystem 显示系统中已用和未用的内存数量<br>displaysthefullpathandnameofeveryfileonthedisk 显示磁盘上所有文件的完整路径和名称<br>displaysthenameoforchangesthecurrentdirectory 显示或改变当前目录<br>doctor 医生<br>doesn 不<br>doesntchangetheattribute 不要改变属性<br>dosshell DOS 外壳<br>doubleclick 双击<br>doyouwanttodisplaythelogicaldriveinFORMationyn 你想显示逻辑驱动器信息吗(y/n)?<br>driveletter 驱动器名<br>editmenu 编辑选单<br>emsmemory ems内存<br>endoffile 文件尾<br>endofline 行尾<br>enterchoice 输入选择<br>entiredisk 转换磁盘<br>environmentvariable 环境变量<br>esc esc<br>everyfileandsubdirectory 所有的文件和子目录<br>existingdestinationfile 已存在的目录文件时<br>expandedmemory 扩充内存<br>expandtabs 扩充标签<br>explicitly 明确地<br>extendedmemory 扩展内存<br>fastest 最快的<br>fatfilesystem fat 文件系统<br>fdiskoptions fdisk选项<br>fileattributes 文件属性<br>fileFORMat 文件格式<br>filefunctions 文件功能<br>fileselection 文件选择<br>fileselectionargument 文件选择变元<br>filesin 文件在<br>filesinsubdir 子目录中文件<br>fileslisted 列出文件<br>filespec 文件说明<br>filespecification 文件标识<br>filesselected 选中文件<br>findfile 文件查寻<br>fixeddisk 硬盘<br>fixeddisksetupprogram 硬盘安装程序<br>fixeserrorsonthedisk 解决磁盘错误<br>floppydisk 软盘<br>FORMatdiskette 格式化磁盘<br>FORMatsadiskforusewithmsdos 格式化用于MS-DOS的磁盘<br>FORMfeed 进纸<br>freememory 闲置内存<br>fullscreen 全屏幕<br>functionprocedure 函数过程<br>graphical 图解的<br>graphicslibrary 图形库<br>groupdirectoriesfirst 先显示目录组<br>hangup 挂断<br>harddisk 硬盘<br>hardwaredetection 硬件检测<br>hasbeen 已经<br>helpfile 帮助文件<br>helpindex 帮助索引<br>helpinFORMation 帮助信息<br>helppath 帮助路径<br>helpscreen 帮助屏<br>helptext 帮助说明<br>helptopics 帮助主题<br>helpwindow 帮助窗口<br>hiddenfile 隐含文件<br>hiddenfileattribute 隐含文件属性<br>hiddenfiles 隐含文件<br>howto 操作方式<br>ignorecase 忽略大小写<br>inbothconventionalanduppermemory 在常规和上位内存<br>incorrectdos 不正确的DOS<br>incorrectdosversion DOS 版本不正确<br>indicatesabinaryfile 表示是一个二进制文件<br>indicatesanasciitextfile 表示是一个ascii文本文件<br>insertmode 插入方式<br>insteadofusingchkdsktryusingscandisk 请用scandisk,不要用chkdsk<br>inuse 在使用<br>invaliddirectory 无效的目录<br>is 是<br>kbytes 千字节<br>keyboardtype 键盘类型<br>labeldisk 标注磁盘<br>laptop 膝上<br>largestexecutableprogram 最大可执行程序<br>largestmemoryblockavailable 最大内存块可用<br>lefthanded 左手习惯<br>leftmargin 左边界<br>linenumber 行号<br>linenumbers 行号<br>linespacing 行间距<br>listbyfilesinsortedorder 按指定顺序显示文件<br>listfile 列表文件<br>listof 清单<br>locatefile 文件定位<br>lookat 查看<br>lookup 查找<br>macroname 宏名字<br>makedirectory 创建目录<br>memoryinfo 内存信息<br>memorymodel 内存模式<br>menubar 菜单条<br>menucommand 菜单命令<br>menus 菜单<br>messagewindow 信息窗口<br>microsoft 微软<br>microsoftantivirus 微软反病毒软件<br>microsoftcorporation 微软公司<br>mini 小的<br>modemsetup 调制解调器安装<br>modulename 模块名<br>monitormode 监控状态<br>monochromemonitor 单色监视器<br>moveto 移至<br>multi 多<br>newdata 新建数据<br>newer 更新的<br>newfile 新文件<br>newname 新名称<br>newwindow 新建窗口<br>norton norton<br>nostack 栈未定义<br>noteusedeltreecautiously 注意:小心使用deltree<br>onlinehelp 联机求助<br>optionally 可选择地<br>or 或<br>pageframe 页面<br>pagelength 页长<br>pausesaftereachscreenfulofinFORMation 在显示每屏信息后暂停一下<br>pctools pc工具<br>postscript 附言<br>prefixmeaningnot 前缀意即”不<br>prefixtoreverseorder 反向显示的前缀<br>presetswitchesbyprefixinganyswitchwithhyphenforexamplew 用前缀和放在短横线-后的开关(例如/-w)预置开关<br>pressakeytoresume 按一键继续<br>pressanykeyforfilefunctions 敲任意键执行文件功能<br>pressentertokeepthesamedate 敲回车以保持相同的日期<br>pressentertokeepthesametime 敲回车以保持相同的时间<br>pressesctocontinue 敲esc继续<br>pressesctoexit 敲键退出<br>pressesctoexitfdisk 敲esc退出fdisk<br>pressesctoreturntofdiskoptions 敲esc返回fdisk选项<br>previously 在以前<br>printall 全部打印<br>printdevice 打印设备<br>printerport 打印机端口<br>processesfilesinalldirectoriesinthespecifiedpath 在指定的路径下处理所有目录下的文件<br>programfile 程序文件<br>programmingenvironment 程序设计环境<br>promptsyoubeforecreatingeachdestinationfile 在创建每个目标文件时提醒你<br>promptsyoutopressakeybeforecopying 在拷贝前提示你敲一下键<br>pulldown 下拉<br>pulldownmenus 下拉式选单<br>quickFORMat 快速格式化<br>quickview 快速查看<br>readonlyfile 只读文件<br>readonlyfileattribute 只读文件属性<br>readonlyfiles 只读文件<br>readonlymode 只读方式<br>redial 重拨<br>repeatlastfind 重复上次查找<br>reportfile 报表文件<br>resize 调整大小<br>respectively 分别地<br>rightmargin 右边距<br>rootdirectory 根目录<br>runsdebugaprogramtestingandeditingtool 运行debug, 它是一个测试和编辑工具<br>runtimeerror 运行时出错<br>saveall 全部保存<br>saveas 另存为<br>scandisk 磁盘扫描程序<br>scandiskcanreliablydetect scandisk可以可靠地发现<br>screencolors 屏幕色彩<br>screenoptions 屏幕任选项<br>screensaver 屏幕暂存器<br>screensavers 屏幕保护程序<br>screensize 屏幕大小<br>scrollbars 翻卷栏<br>scrolllockoff 滚屏已锁定<br>searchfor 搜索<br>sectorspertrack 每道扇区数<br>selectgroup 选定组<br>selectionbar 选择栏<br>setactivepartition 设置活动分区<br>setupoptions 安装选项<br>shortcutkeys 快捷键<br>showclipboard 显示剪贴板<br>singleside 单面<br>sizemove 大小/移动<br>sorthelp S排序H帮助<br>sortorder 顺序<br>specialservicesdirectorymaint 特殊服务功能: D目录维护<br>specifiesdrivedirectoryandorfilestolist 指定要列出的驱动器,目录,和文件<br>specifiesthatyouwanttochangetotheparentdirectory 指定你想把父目录作为当前目录<br>specifiesthedirectoryandorfilenameforthenewfile 指定新文件的目录或文件名<br>specifiesthefileorfilestobecopied 指定要拷贝的文件<br>stackoverflow 栈溢出<br>standalone 独立的<br>startupoptions 启动选项<br>statusline 状态行<br>stepover 单步<br>summaryof 摘要信息<br>suppressespromptingtoconfirmyouwanttooverwritean 取消确认提示,在你想覆盖一个<br>swapfile 交换文件<br>switchesmaybepresetinthedircmdenvironmentvariable 开关可在dircmd环境变量中设置<br>switchto 切换到<br>sync 同步<br>systemfile 系统文件<br>systemfiles 系统文件<br>systeminfo 系统信息<br>systeminFORMation 系统信息程序<br>tableofcontents 目录<br>terminalemulation 终端仿真<br>terminalsettings 终端设置<br>testfile 测试文件<br>testfileparameters 测试文件参数<br>theactivewindow 激活窗口<br>theswitchymaybepresetinthecopycmdenvironmentvariable /y开关可以在copycmd环境变量中预置<br>thetwofloppydisksmustbethesametype 两个软磁盘必须是同种类型的<br>thismaybeoverriddenwithyonthecommandline 在命令行输入/-y可以使之无效<br>togglebreakpoint 切换断点<br>tomsdos 转到MS-DOS<br>topmargin 页面顶栏<br>turnoff 关闭<br>typecddrivetodisplaythecurrentdirectoryinthespecifieddrive 键入cd驱动器:显示指定驱动器的当前目录<br>typecdwithoutparameterstodisplaythecurrentdriveanddirectory 键入无参数的cd以显示当前驱动器的当前目录<br>typedatewithoutparameterstodisplaythecurrentdatesettingand 键入无参数的date,显示当前日期设置和<br>unmark 取消标记<br>unselect 取消选择<br>usesbareFORMat 使用简洁方式<br>useslowercase 使用小写<br>useswidelistFORMat 使用宽行显示<br>usinghelp 使用帮助<br>verbosely 冗长地<br>verifiesthatnewfilesarewrittencorrectly 校验新文件是否正确写入了<br>videomode 显示方式<br>viewwindow 内容浏览<br>viruses 病毒<br>vision 景象<br>vollabel 卷标<br>volumelabel 卷标<br>volumeserialnumberis 卷序号是<br>windowshelp windows 帮助<br>wordwrap 整字换行<br>workingdirectory 正在工作的目录<br>worm 蠕虫<br>writemode 写方式<br>writeto 写到<br>xmsmemory 扩充内存<br>youmay 你可以</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;http://www.24en.com/study/words/2006-01-02/373.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机常用英语术语、词汇表&lt;/a&gt;&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="翻译" scheme="https://chanran.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="计算机术语" scheme="https://chanran.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>[转载]web前端开发培训之前端开发必会的二十五个知识点</title>
    <link href="https://chanran.github.io/2016/11/11/%E8%BD%AC%E8%BD%BD-web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%B9%E8%AE%AD%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E4%BC%9A%E7%9A%84%E4%BA%8C%E5%8D%81%E4%BA%94%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://chanran.github.io/2016/11/11/转载-web前端开发培训之前端开发必会的二十五个知识点/</id>
    <published>2016-11-11T14:24:02.000Z</published>
    <updated>2016-11-12T04:10:53.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自 <a href="http://www.cnblogs.com/Ma-lulu/p/5719997.html" target="_blank" rel="external">web前端开发培训之前端开发必会的二十五个知识点</a></p>
</blockquote>
<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="常用那几种浏览器测试？有哪些内核-Layout-Engine"><a href="#常用那几种浏览器测试？有哪些内核-Layout-Engine" class="headerlink" title="常用那几种浏览器测试？有哪些内核(Layout Engine)?"></a>常用那几种浏览器测试？有哪些内核(Layout Engine)?</h2><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。</p>
<h2 id="说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）"><a href="#说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）" class="headerlink" title="说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）"></a>说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）</h2><ul>
<li><p>(Q1) 行内元素：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。块级元素：各占据一行，垂直方向排列。从新行开始结束接着一个断行。</p>
</li>
<li><p>(Q2) 兼容性：<code>display:inline-block;*display:inline;*zoom:1;</code></p>
</li>
</ul>
<h2 id="清除浮动有哪些方式？比较好的方式是哪一种？"><a href="#清除浮动有哪些方式？比较好的方式是哪一种？" class="headerlink" title="清除浮动有哪些方式？比较好的方式是哪一种？"></a>清除浮动有哪些方式？比较好的方式是哪一种？</h2><ul>
<li><p>(Q1)</p>
<ul>
<li><p>（1）父级div定义height。</p>
</li>
<li><p>（2）结尾处加空div标签clear:both。</p>
</li>
<li><p>（3）父级div定义伪类:after和zoom。</p>
</li>
<li><p>（4）父级div定义overflow:hidden。</p>
</li>
<li><p>（5）父级div定义overflow:auto。</p>
</li>
<li><p>（6）父级div也浮动，需要定义宽度。</p>
</li>
<li><p>（7）父级div定义display:table。</p>
</li>
<li><p>（8）结尾处加br标签clear:both。</p>
</li>
</ul>
</li>
<li><p>(Q2) 比较好的是第3种方式，好多网站都这么用。</p>
</li>
</ul>
<h2 id="box-sizing常用的属性有哪些？分别有什么作用？"><a href="#box-sizing常用的属性有哪些？分别有什么作用？" class="headerlink" title="box-sizing常用的属性有哪些？分别有什么作用？"></a>box-sizing常用的属性有哪些？分别有什么作用？</h2><ul>
<li><p>(Q1)box-sizing: content-box|border-box|inherit;</p>
</li>
<li><p>(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。<br>border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>
</li>
</ul>
<h2 id="Doctype作用？标准模式与兼容模式各有什么区别"><a href="#Doctype作用？标准模式与兼容模式各有什么区别" class="headerlink" title="Doctype作用？标准模式与兼容模式各有什么区别?"></a>Doctype作用？标准模式与兼容模式各有什么区别?</h2><ul>
<li><p>(Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>
</li>
<li><p>(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>
</li>
</ul>
<h2 id="HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h2><p>HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>
<h2 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h2><ul>
<li>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。</li>
</ul>
<h2 id="介绍一下你对浏览器内核的理解？"><a href="#介绍一下你对浏览器内核的理解？" class="headerlink" title="介绍一下你对浏览器内核的理解？"></a>介绍一下你对浏览器内核的理解？</h2><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>
<blockquote>
<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>
<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>
<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>
</blockquote>
<h2 id="html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><ul>
<li><p>(Q1)</p>
<blockquote>
<p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>
</blockquote>
<ul>
<li><p>(1)绘画 canvas;</p>
</li>
<li><p>(2)用于媒介回放的 video 和 audio 元素;</p>
</li>
<li><p>(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</p>
</li>
<li>(4)sessionStorage 的数据在浏览器关闭后自动删除;</li>
<li>(5)语意化更好的内容元素，比如 article、footer、header、nav、section;</li>
<li>(6)表单控件，calendar、date、time、email、url、search;</li>
<li><p>(7)新的技术webworker, websocket, Geolocation;</p>
</li>
<li><p>(Q2)</p>
<blockquote>
<p>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式。<br>当然也可以直接使用成熟的框架、比如html5shim，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="简述一下你对HTML语义化的理解？"><a href="#简述一下你对HTML语义化的理解？" class="headerlink" title="简述一下你对HTML语义化的理解？"></a>简述一下你对HTML语义化的理解？</h2><blockquote>
<p>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
</blockquote>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="介绍js的基本数据类型"><a href="#介绍js的基本数据类型" class="headerlink" title="介绍js的基本数据类型"></a>介绍js的基本数据类型</h2><blockquote>
<p>Undefined、Null、Boolean、Number、String</p>
</blockquote>
<h2 id="js有哪些内置对象？"><a href="#js有哪些内置对象？" class="headerlink" title="js有哪些内置对象？"></a>js有哪些内置对象？</h2><blockquote>
<p>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegExp、Error</p>
</blockquote>
<h2 id="this对象的理解"><a href="#this对象的理解" class="headerlink" title="this对象的理解"></a>this对象的理解</h2><blockquote>
<p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。</p>
</blockquote>
<h2 id="eval是做什么的？"><a href="#eval是做什么的？" class="headerlink" title="eval是做什么的？"></a>eval是做什么的？</h2><blockquote>
<p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’)。</p>
</blockquote>
<h2 id="DOM怎样添加、移除、移动、复制、创建和查找节点"><a href="#DOM怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="DOM怎样添加、移除、移动、复制、创建和查找节点"></a>DOM怎样添加、移除、移动、复制、创建和查找节点</h2><p>&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 创建新节点</div><div class="line">createDocumentFragment()    //创建一个DOM片段</div><div class="line">createElement()   //创建一个具体的元素</div><div class="line">createTextNode()   //创建一个文本节点</div><div class="line">// 添加、移除、替换、插入</div><div class="line">appendChild()</div><div class="line">removeChild()</div><div class="line">replaceChild()</div><div class="line">insertBefore() //在已有的子节点前插入一个新的子节点</div><div class="line">// 查找</div><div class="line">getElementsByTagName()    //通过标签名称</div><div class="line">getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class="line">getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>
<h2 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h2><blockquote>
<p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p>
<p>undefined：</p>
<ul>
<li>（1）变量被声明了，但没有赋值时，就等于undefined。</li>
<li>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>
<li>（3）对象没有赋值的属性，该属性的值为undefined。</li>
<li>（4）函数没有返回值时，默认返回undefined。</li>
</ul>
<p>null：</p>
<ul>
<li>（1） 作为函数的参数，表示该函数的参数不是对象。</li>
<li>（2） 作为对象原型链的终点。</li>
</ul>
</blockquote>
<h2 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h2><ul>
<li>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>
<li>（2）属性和方法被加入到 this 引用的对象中。</li>
<li>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。</li>
</ul>
<h2 id="JSON-的了解？"><a href="#JSON-的了解？" class="headerlink" title="JSON 的了解？"></a>JSON 的了解？</h2><blockquote>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。</p>
<p>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}</p>
</blockquote>
<h2 id="call-和-apply-的区别和作用？"><a href="#call-和-apply-的区别和作用？" class="headerlink" title="call() 和 apply() 的区别和作用？"></a>call() 和 apply() 的区别和作用？</h2><blockquote>
<p>apply()函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。</p>
<p>如：function.apply(this,[1,2,3]);</p>
<p>call()的第一个参数是上下文，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>
</blockquote>
<h2 id="如何获取UA？"><a href="#如何获取UA？" class="headerlink" title="如何获取UA？"></a>如何获取UA？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function whatBrowser() &#123;  </div><div class="line">    document.Browser.Name.value=navigator.appName;  </div><div class="line">    document.Browser.Version.value=navigator.appVersion;  </div><div class="line">    document.Browser.Code.value=navigator.appCodeName;  </div><div class="line">    document.Browser.Agent.value=navigator.userAgent;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><hr>
<h2 id="HTTP状态码知道哪些？"><a href="#HTTP状态码知道哪些？" class="headerlink" title="HTTP状态码知道哪些？"></a>HTTP状态码知道哪些？</h2><blockquote>
<p>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</p>
<p>200  OK   正常返回信息</p>
<p>201  Created  请求成功并且服务器创建了新的资源</p>
<p>202  Accepted  服务器已接受请求，但尚未处理</p>
<p>301  Moved Permanently  请求的网页已永久移动到新位置。</p>
<p>302 Found  临时性重定向。</p>
<p>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</p>
<p>304  Not Modified  自从上次请求后，请求的网页未修改过。</p>
<p>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p>
<p>401 Unauthorized  请求未授权。</p>
<p>403 Forbidden  禁止访问。</p>
<p>404 Not Found  找不到如何与 URI 相匹配的资源。</p>
<p>500 Internal Server Error  最常见的服务器端错误。</p>
<p>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>
</blockquote>
<h2 id="你有哪些性能优化的方法？"><a href="#你有哪些性能优化的方法？" class="headerlink" title="你有哪些性能优化的方法？"></a>你有哪些性能优化的方法？</h2><ul>
<li>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li>
<li>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li>
<li>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li>
<li>（4） 当需要设置的样式很多时设置className而不是直接操作style。</li>
<li>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</li>
<li>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</li>
<li>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</li>
</ul>
<h2 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h2><blockquote>
<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。</p>
<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>
</blockquote>
<h2 id="哪些常见操作会造成内存泄漏？"><a href="#哪些常见操作会造成内存泄漏？" class="headerlink" title="哪些常见操作会造成内存泄漏？"></a>哪些常见操作会造成内存泄漏？</h2><blockquote>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</p>
</blockquote>
<h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><blockquote>
<p>一个程序至少有一个进程,一个进程至少有一个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p>
<p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&quot;http://www.cnblogs.com/Ma-lulu/p/5719997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web前端开发培训之前端开发必会的二十五个知识点&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="面试" scheme="https://chanran.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://chanran.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>重构页面遇到的各种奇怪问题</title>
    <link href="https://chanran.github.io/2016/11/11/%E9%87%8D%E6%9E%84%E9%A1%B5%E9%9D%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://chanran.github.io/2016/11/11/重构页面遇到的各种奇怪问题/</id>
    <published>2016-11-11T13:22:38.000Z</published>
    <updated>2016-11-29T12:29:04.169Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/rebuild.png" alt="重构"></p>
<h1 id="记录一下干货"><a href="#记录一下干货" class="headerlink" title="记录一下干货"></a>记录一下干货</h1><ul>
<li><a href="https://www.zhihu.com/question/19736007" target="_blank" rel="external">怎样可以很好地保证网页的浏览器兼容性</a></li>
</ul>
<h1 id="特定html标签相关的奇怪问题"><a href="#特定html标签相关的奇怪问题" class="headerlink" title="特定html标签相关的奇怪问题"></a>特定html标签相关的奇怪问题</h1><ul>
<li><h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;!--推荐这样写--&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;  &lt;!--会出现几个空格--&gt;</div><div class="line">&lt;/textarea&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--换行之后有几个空格--&gt;</div><div class="line"></div><div class="line">&lt;/textarea&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>chrome下第二个textarea会出现几个空格,第三个textarea会换行再加几个空格,所以最好使用第一个textarea的写法句号 (其他浏览器有空切换到windows测试)</p>
</blockquote>
<h1 id="css相关的奇怪问题"><a href="#css相关的奇怪问题" class="headerlink" title="css相关的奇怪问题"></a>css相关的奇怪问题</h1><h2 id="行内块元素之间的奇怪间隔"><a href="#行内块元素之间的奇怪间隔" class="headerlink" title="行内块元素之间的奇怪间隔"></a>行内块元素之间的奇怪间隔</h2><blockquote>
<p>以span为例(设置了display:inline-block)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        html,body,div&#123;</div><div class="line">            height:100%;</div><div class="line">            width:100%;</div><div class="line">        &#125;</div><div class="line">        #span1&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:black;</div><div class="line">        &#125;</div><div class="line">        #span2&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:red;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>左图出现奇怪的间距(元素换行之后会有一个换行符),右图是解决之后的状态</p>
</blockquote>
<p><img src="/img/strangeSpace.png" alt="奇怪的间距"><br><img src="/img/clearSpace.png" alt="清除了边距"></p>
<blockquote>
<p>解决方法</p>
</blockquote>
<ol>
<li><p>把行内块元素写一在同一行 (不推荐,如果元素多的话太长了,可读性差)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加注释(推荐)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;!--</div><div class="line">    --&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用浮动(不推荐,脱离文本流了,弄起来有点麻烦)</p>
</li>
</ol>
<h2 id="height-100-的问题"><a href="#height-100-的问题" class="headerlink" title="height:100%的问题"></a>height:100%的问题</h2><h3 id="height-100-不起作用"><a href="#height-100-不起作用" class="headerlink" title="height:100%不起作用"></a>height:100%不起作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div style=&quot;height: 100%;background-color:red&quot;&gt;</div><div class="line">      &lt;p&gt;</div><div class="line">        想让这个div高度为 100% 。但是不能实现</div><div class="line">      &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>height:100%这个可以看做是继承的,div没有向上继承过来的height:100%,所以不可以实现height:100%;</p>
</blockquote>
<p>正确的姿势是这样的(记得内联元素最好要放外部文件哦):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;html style=&quot;height: 100%;&quot;&gt;</div><div class="line">  &lt;body style=&quot;height: 100%;&quot;&gt;</div><div class="line">    &lt;div style=&quot;height: 100%;background-color:red&quot;&gt;</div><div class="line">      &lt;p&gt;</div><div class="line">        这样这个div的高度就会100%了</div><div class="line">      &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="height-100-之后出现滚动条"><a href="#height-100-之后出现滚动条" class="headerlink" title="height:100%之后出现滚动条"></a>height:100%之后出现滚动条</h3><p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/rebuild.png&quot; alt=&quot;重构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;记录一下干货&quot;&gt;&lt;a href=&quot;#记录一下干货&quot; class=&quot;headerlink&quot; title=&quot;记录一下干货&quot;&gt;&lt;/a&gt;记录一下干货&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="重构" scheme="https://chanran.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="html" scheme="https://chanran.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(三)--插值</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%89%E6%8F%92%E5%80%BC/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门三插值/</id>
    <published>2016-11-01T05:56:17.000Z</published>
    <updated>2016-11-29T12:29:52.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<h1 id="插值-interporation"><a href="#插值-interporation" class="headerlink" title="插值(interporation)"></a>插值(interporation)</h1><blockquote>
<p>插值相当于解析表达式或者变量，让它们的值替换插值的位置。<br><strong>注：</strong> 不能用于属性值的插值（但属性值可以使用变量替换）。</p>
</blockquote>
<ul>
<li>在css属性名中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">div</div><div class="line">    border-&#123;partOfProp&#125; value  /*切记属性值这里不可以使用插值*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>在选择器中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">selector = div</div><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">&#123;selector&#125;</div><div class="line">    border-&#123;partOfProp&#125; value</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">selectors = &apos;#foo,#bar,.baz&apos;</div><div class="line"></div><div class="line">&#123;selectors&#125;</div><div class="line">  background: #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#foo,</div><div class="line">#bar,</div><div class="line">.baz &#123;</div><div class="line">  background: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与mixins配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vendor(prop, args)</div><div class="line">  -webkit-&#123;prop&#125; args</div><div class="line">  -moz-&#123;prop&#125; args</div><div class="line">  &#123;prop&#125; args</div><div class="line"></div><div class="line">border-radius()</div><div class="line">  vendor(&apos;border-radius&apos;, arguments)</div><div class="line"></div><div class="line">box-shadow()</div><div class="line">  vendor(&apos;box-shadow&apos;, arguments)</div><div class="line"></div><div class="line">button</div><div class="line">  border-radius 1px 2px / 3px 4px</div></pre></td></tr></table></figure>
<p>转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button &#123;</div><div class="line">  -webkit-border-radius: 1px 2px / 3px 4px;</div><div class="line">  -moz-border-radius: 1px 2px / 3px 4px;</div><div class="line">  border-radius: 1px 2px / 3px 4px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与循环迭代(iteration)配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table</div><div class="line">  for row in 1 2 3 4 5</div><div class="line">    tr:nth-child(&#123;row&#125;)</div><div class="line">      height: 10px * row</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">table tr:nth-child(1) &#123;</div><div class="line">  height: 10px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(2) &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(3) &#123;</div><div class="line">  height: 30px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(4) &#123;</div><div class="line">  height: 40px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(5) &#123;</div><div class="line">  height: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;插值-interporation&quot;&gt;&lt;a href=&quot;#插值-interporation&quot; class=&quot;headerlink&quot; title=&quot;插值(interpora
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(二)--变量</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%BA%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门二变量/</id>
    <published>2016-11-01T05:54:34.000Z</published>
    <updated>2016-11-29T12:29:44.625Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<h1 id="变量-variables"><a href="#变量-variables" class="headerlink" title="变量(variables)"></a>变量(variables)</h1><blockquote>
<p><strong>变量的标识符可以由$、下划线、字母、数字组成，其中数字不能作为变量的开头。其实这里的变量只是理解为单纯的字符替换</strong></p>
</blockquote>
<p><strong>外部定义变量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_font-size = 14px</div><div class="line">font = _font-size &quot;Lucida Grande&quot;, Arial</div><div class="line"></div><div class="line">body</div><div class="line">  font font, sans-serif</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  font: 14px &quot;Lucida Grande&quot;, Arial, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p> <strong>下面是变量的另外一种用法，不在外部定义变量:</strong></p>
<ul>
<li>内部重新定义当前变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (w / 2)</div><div class="line">  margin-top: (h / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>使用内部变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (@width / 2)</div><div class="line">  margin-top: (@height / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量的深入用法：写在mixins里，与分支结构配合定义初始属性值等。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">position()</div><div class="line">  position: arguments</div><div class="line">  z-index: 1 unless @z-index /*这里是mixins，如果不懂可以先忽略。*/</div><div class="line"></div><div class="line">#logo</div><div class="line">  z-index: 20</div><div class="line">  position: absolute</div><div class="line"></div><div class="line">#logo2</div><div class="line">  position: absolute</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  z-index: 20;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line">#logo2 &#123;</div><div class="line">  position: absolute;</div><div class="line">  z-index: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量冒泡查询</strong></p>
</blockquote>
<p>先看一个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line"> color: red</div><div class="line"> ul</div><div class="line">   li</div><div class="line">     color: blue</div><div class="line">     p</div><div class="line">         color:black</div><div class="line">         a</div><div class="line">             background-color: @color</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">body ul li &#123;</div><div class="line">  color: #00f;</div><div class="line">&#125;</div><div class="line">body ul li p &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">body ul li p a &#123;</div><div class="line">  background-color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：从当前层开始，一直往上层查询，直到找到为止，找不到则返回null。上面例子中选择器”body ul li p”就定义了color属性了，而且选择器a被”body ul li p”嵌套的。所以查询到了上层的color属性，停止查询。</p>
</blockquote>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;变量-variables&quot;&gt;&lt;a href=&quot;#变量-variables&quot; class=&quot;headerlink&quot; title=&quot;变量(variables)&quot;&gt;&lt;/a&gt;变
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(一)--选择器</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%80%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门一选择器/</id>
    <published>2016-11-01T05:50:46.000Z</published>
    <updated>2016-11-29T12:29:59.514Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<hr>
<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><ul>
<li>官网：<a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a></li>
<li>中文文档：<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="external">stylus中文版参考文档</a> by 张鑫旭</li>
<li>理解css预处理器：<a href="http://leeluolee.github.io/2013/08/01/mcss-start/" target="_blank" rel="external">css预处理器初识</a> by 栓萝卜的棍子</li>
<li>三种css预处理器语言详解：<a href="http://www.oschina.net/question/12_44255" target="_blank" rel="external">less|sass|stylus</a> by 开源中国</li>
</ul>
<hr>
<h1 id="CSS预处理器语言的个人理解"><a href="#CSS预处理器语言的个人理解" class="headerlink" title="CSS预处理器语言的个人理解"></a>CSS预处理器语言的个人理解</h1><ul>
<li>用另外一种可读性高、语法性强的语言来写CSS。stylus可以使用循环、分支、定义变量和函数结构来写css，这样写起来既方便又快捷。</li>
<li>通过一种转换机制将这种语法转化为原生css。每种语言的转化机制也有很多种，可以使用各种语言官网的方法转化，例如<a href="http://lesscss.org/#using-less" target="_blank" rel="external">less</a>。也可以使用构建工具webpack的<a href="https://github.com/shama/stylus-loader" target="_blank" rel="external">stylus-loader</a>来将stylus语言转化为原生css。</li>
</ul>
<hr>
<h1 id="stylus的特点"><a href="#stylus的特点" class="headerlink" title="stylus的特点"></a>stylus的特点</h1><ul>
<li>官网可以直接将stylus代码放在官网<a href="http://stylus-lang.com/try.html#?code=body%20%7B%0A%20%20font%3A%2014px%2F1.5%20Helvetica%2C%20arial%2C%20sans-serif%3B%0A%20%20%23logo%20%7B%0A%20%20%20%20border-radius%3A%205px%3B%0A%20%20%7D%0A%7D" target="_blank" rel="external">这一页</a>测试生成原生css（本人硬加上去的特点）</li>
<li>通过缩进来解释语言（喜欢python的geek应该会比较喜欢）。</li>
<li>待补充..</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  div</div><div class="line">  	color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body div &#123;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="stylus的优点"><a href="#stylus的优点" class="headerlink" title="stylus的优点"></a>stylus的优点</h1><ul>
<li>类python语法（官网称stylus为pythonic）。</li>
<li>语法灵活（可选的括号，冒号，分号等）。</li>
</ul>
<hr>
<h1 id="stylus的缺点"><a href="#stylus的缺点" class="headerlink" title="stylus的缺点"></a>stylus的缺点</h1><ul>
<li>由于其语法灵活的问题，如果没有团队规范，那么就会带来团队开发混乱，维护起来比较麻烦，各种语法混杂。</li>
</ul>
<hr>
<h1 id="stylus语法介绍"><a href="#stylus语法介绍" class="headerlink" title="stylus语法介绍"></a>stylus语法介绍</h1><h2 id="选择器-selectors"><a href="#选择器-selectors" class="headerlink" title="选择器(selectors)"></a>选择器(selectors)</h2><h3 id="缩进-换行缩进表示语句前进"><a href="#缩进-换行缩进表示语句前进" class="headerlink" title="缩进(换行缩进表示语句前进)"></a><strong>缩进(换行缩进表示语句前进)</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="同级选择器"><a href="#同级选择器" class="headerlink" title="同级选择器"></a><strong>同级选择器</strong></h3><ul>
<li>element,element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div,p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element &gt;element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	&gt;p</div><div class="line">      color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &gt;p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>element +element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	+p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div +p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>例外：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo bar baz</div><div class="line">&gt;span</div><div class="line">	color:white;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面代码的foo bar baz编译器解析有可能是”标签 属性 属性”，有可能是”标签 标签 标签”（有可能是自定义的标签）</strong>（编译器只会识别文档结构而不是标签或者属性）</p>
</blockquote>
<hr>
<p>建议写成下面这样（在最后的选择器后面加一个逗号[comma]）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo bar baz,</div><div class="line">&gt;span</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面的同级选择器是<a href="http://www.w3school.com.cn/cssref/css_selectors.ASP" target="_blank" rel="external">这里</a>的优化，没有提到的其他选择器大多数保留原来的语法，或者与上面的语法类似，当然上面提到的选择器也可以使用原来的语法</strong></p>
</blockquote>
<hr>
<h3 id="引用父级选择器"><a href="#引用父级选择器" class="headerlink" title="引用父级选择器"></a><strong>引用父级选择器</strong></h3><blockquote>
<p><strong>使用&amp;指向父级选择器，有可能是选择器数组，也有可能是单独的一个选择器。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:#FFF;</div><div class="line">    &amp;:hover</div><div class="line">    	color:#000;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">div,</div><div class="line">p &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">div:hover,</div><div class="line">p:hover &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>解释：其实”&amp;”可以理解为代替了上一层的选择器，比如上面例子，”&amp;”的上一层是”div,p”，这样说比较好理解。</strong></p>
</blockquote>
<p>下面是引用父级选择器的另一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">box-shadow()</div><div class="line">  -webkit-box-shadow arguments</div><div class="line">  -moz-box-shadow arguments</div><div class="line">  box-shadow arguments</div><div class="line">  html.ie8 &amp;,</div><div class="line">  html.ie7 &amp;,</div><div class="line">  html.ie6 &amp;</div><div class="line">    border 2px solid arguments[length(arguments) - 1]</div><div class="line"></div><div class="line">body</div><div class="line">  #login</div><div class="line">    box-shadow 1px 1px 3px #eee</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">body #login &#123;</div><div class="line">  -webkit-box-shadow: 1px 1px 3px #eee;</div><div class="line">  -moz-box-shadow: 1px 1px 3px #eee;</div><div class="line">  box-shadow: 1px 1px 3px #eee;</div><div class="line">&#125;</div><div class="line">html.ie8 body #login,</div><div class="line">html.ie7 body #login,</div><div class="line">html.ie6 body #login &#123;</div><div class="line">  border: 2px solid #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果想在代码里使用”&amp;”符号而不是stylus的”&amp;”，可以在&amp;字符前加一个反斜杠并加上引号，如下：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.foo[title*=&apos;\&amp;&apos;]  /*.foo[title*=&apos;&amp;&apos;]*/</div></pre></td></tr></table></figure>
<hr>
<h3 id="部分引用父级选择器之单层选择器"><a href="#部分引用父级选择器之单层选择器" class="headerlink" title="部分引用父级选择器之单层选择器"></a><strong>部分引用父级选择器之单层选择器</strong></h3><blockquote>
<p>使用^ [N] 引用第N层父级选择器。如果N是正数，这里的第N层指的是最上层上层选择器到第N层选择器，如果N是负数，这里的第N层指的是最上层选择器到倒数第|N|层选择器。</p>
</blockquote>
<ul>
<li>有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;__bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo__bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo__bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>没有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  .bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo .bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>N为0或者正数则从最上层开始到最下层，N为负数则从最下层开始到最上层。其实第N层的选择器是包含了上一层的选择器的，例如下面的例子，第一层选择器是foo,第二层就是foo bar,第三层是foo bar baz，如此类推（官网说的是嵌套）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      width: 10px</div><div class="line"></div><div class="line">      ^[-1]:hover &amp;</div><div class="line">        width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar:hover .foo bar baz &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果写在mixins里的话，推荐将N写成负数。因为你并不知道你在调用哪一层（ 有可能还有隐藏的上层选择器）</strong></p>
</blockquote>
<hr>
<h3 id="部分引用父级选择器之范围选择器"><a href="#部分引用父级选择器之范围选择器" class="headerlink" title="部分引用父级选择器之范围选择器"></a><strong>部分引用父级选择器之范围选择器</strong></h3><blockquote>
<p>^ [N..M] 引用第N层选择器到第M层选择器组成的选择器。<br>注：这里有些跟引用单层选择器有点不同，这里的第几层是不包括上层选择器的，具体来看例子感受一下。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ^[-1]:hover ^[-2..-1]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar baz:hover baz test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="其他部分引用父级选择器"><a href="#其他部分引用父级选择器" class="headerlink" title="其他部分引用父级选择器"></a>其他部分引用父级选择器</h3><ul>
<li>最上层父级选择器(~/)，相当于^ [0]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.block</div><div class="line">  &amp;__element</div><div class="line">    ~/:hover &amp;</div><div class="line">      color: red</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.block:hover .block__element &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>相对父级选择器(../)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ../:hover ^[-1..-2]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar .baz .test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo .bar .baz:hover .baz .test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>脱离嵌套的选择器(/)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">   span</div><div class="line">      color #A7A7A7</div><div class="line">      &amp;:hover,</div><div class="line">      /.is-hovered</div><div class="line">        color #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">div span,</div><div class="line">p span &#123;</div><div class="line">  color: #a7a7a7;</div><div class="line">&#125;</div><div class="line">div span:hover,</div><div class="line">p span:hover,</div><div class="line">.is-hovered &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>上面的例子里，转化后的代码.is-hovered已经脱离了嵌套结构了，已经不在任何选择器嵌套里。</strong></p>
</blockquote>
<hr>
<h3 id="选择器的值"><a href="#选择器的值" class="headerlink" title="选择器的值"></a><strong>选择器的值</strong></h3><blockquote>
<p><strong>selector()获取当前嵌套层的值，selectors()获取从最上层到当前层每一层的选择器的list</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;:hover</div><div class="line">       class selector()</div><div class="line">       color black</div><div class="line">       span</div><div class="line">          color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo:hover &#123;</div><div class="line">  class: &apos;.foo:hover&apos;; /*这个是selector()的值*/</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.foo:hover span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a</div><div class="line">  .b</div><div class="line">    &amp;__c</div><div class="line">      content: selectors()</div><div class="line">      span</div><div class="line">            color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a .b__c &#123;</div><div class="line">  content: &apos;.a&apos;, &apos;&amp; .b&apos;, &apos;&amp;__c&apos;;</div><div class="line">&#125;</div><div class="line">.a .b__c span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;相关网站&quot;&gt;&lt;a href=&quot;#相关网站&quot; class=&quot;headerlink&quot; title=&quot;相关网站&quot;&gt;&lt;/a&gt;相关网站&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;官网：
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css3动画笔记</title>
    <link href="https://chanran.github.io/2016/11/01/css3%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://chanran.github.io/2016/11/01/css3动画笔记/</id>
    <published>2016-11-01T05:34:41.000Z</published>
    <updated>2016-11-29T12:29:36.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/css.jpg" alt="css"></p>
<h1 id="some-sites"><a href="#some-sites" class="headerlink" title="some sites"></a>some sites</h1><ul>
<li><a href="http://www.w3school.com.cn/css3/css3_animation.asp" target="_blank" rel="external">css3动画文档</a> by W3CSchool</li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">css3动画简介</a> by阮一峰</li>
<li><a href="http://isux.tencent.com/css3/" target="_blank" rel="external">css3动画手册</a> by 腾讯 isux</li>
<li><a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">css3动画之硬件加速</a> by w3cplus</li>
<li><a href="http://www.w3ctech.com/topic/1472" target="_blank" rel="external">调试css3 动画 keyframe</a> by w3ctech</li>
<li><a href="http://zencode.in/14.CSS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">css动画的性能优化</a> by zencode.in</li>
<li><a href="http://code.leozhang2018.me/2016/03/07/%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9B%86%E9%94%A6/" target="_blank" rel="external">浏览器是如何渲染页面的</a> by code.leozhang2018.me (读完了之后会更加懂得如何提升css动画性能)</li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a> by 张云龙 （这个链接是作为拓展的）</li>
</ul>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul>
<li>grammar: tansition: property duration timing-function delay;</li>
<li>detail<ul>
<li>transition-property：要过渡的css属性</li>
<li>transition-duration：要过渡持续多少秒或者毫秒</li>
<li>transition-timing-function：速度效果的速度曲线</li>
<li>transition-delay：延迟多少秒执行过渡</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：transition:all 0 ease 0</li>
<li>如果transition-duration属性没有被设置，则默认为0，即不会产生过渡效果</li>
<li>tanstion-timing-function: linear/<em>匀速</em>/ | ease-in /<em>加速</em>/ | ease-out /<em>减速</em>/ | ease /<em>逐渐放慢</em>/ | cubic-bezier /<em>函数，自定义速度模式，可以使用 <a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a> 这个网站制作</em>/</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</li>
<li>不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</li>
<li>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</li>
</ul>
</li>
<li>advantage : 简单易用</li>
<li>disavantage<ul>
<li>transition需要事件触发，所以没法在网页加载时自动发生。</li>
<li>transition是一次性的，不能重复发生，除非一再触发。</li>
<li>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</li>
<li>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</li>
</ul>
</li>
</ul>
<h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><ul>
<li>grammar: name duration timing-function delay iteration-count direction</li>
<li>detail<ul>
<li>@keyframes：规定动画</li>
<li>animation-name：绑定选择器的keyframe名称</li>
<li>animation-duration：动画的持续时间，以秒或者毫秒计</li>
<li>animation-timing-function：动画的速度曲线</li>
<li>animation-delay：延迟多少秒执行动画</li>
<li>animation-iteration-count：动画播放次数</li>
<li>animation-diretion：是否应该轮流反向播放动画</li>
<li>animation-play-state(通常用在js控制是否播放,object.style.animationPlayState)：（paused[停止] | running[播放]）规定动画正在播放还是暂停</li>
<li>animation-fill-mode(通常用在js控制动画效果是否可见,object.style.animationFillMode)：（none[不改变默认行为] | forwards[当动画完成后，保持最后一个属性值] | backwards[在animation-delay 所制定的一段时间内，在动画显示之前，应该开始属性值] | both[向前和向后填充模式都被应用]）规定动画在播放之前或之后，其动画效果是否可见。</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：animation:none 0 ease 0 1 normal</li>
<li>尽量少在@keyframe里使用除了transform,opacity,filter以外的元素，因为会触发浏览器的重绘(repaint)<a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">详情</a></li>
<li>@keyframe<ul>
<li>定义：以百分比来规定改变发生的时间，或者通过关键词”from” 和 “to”，等价于0%和100%，0%是动画的开始时间，100%是结束时间</li>
<li>grammar:@keyframes animationname{ keyframes-selector { css-styles;} }</li>
<li>detail<ul>
<li>animationname：（必需）定义动画名称</li>
<li>keyframes-selector：（必需）动画时长的百分比，合法的值：0%-100%（可以使用 from[0%] 和 to[100%]）</li>
<li>css-styles：（必需）一个或多个合法的css样式属性</li>
</ul>
</li>
<li>example</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<pre><code>@keyframes mymove
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
@-moz-keyframes mymove /* Firefox */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-webkit-keyframes mymove /* Safari 和 Chrome */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-o-keyframes mymove /* Opera */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
</code></pre><hr>
<ul>
<li>如果animation-duration属性没有设置，则时长为0，即动画不会被播放</li>
<li>animation-iteration-count默认值为1，可设置为infinite（无限次播放）</li>
<li>animation-direction:normal /<em>正常播放</em>/ | alternate /<em>轮流反向播放</em>/<ul>
<li>advantage ：解决了transition过渡效果不能循环播放的弊端</li>
<li>disvantage：目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。代码必须写成下面这样。</li>
</ul>
</li>
</ul>
<hr>
<pre><code>div:hover {
  -webkit-animation: 1s rainbow;
  animation: 1s rainbow;  
}

@-webkit-keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}

@keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}
</code></pre><hr>
<h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><ul>
<li>grammar:transform:none | transform-functions</li>
<li>detail:none and transform-functions<ul>
<li>none：不定义转换</li>
<li>matrix(n,n,n,n,n,n)：定义2D转换，使用六个值的矩阵</li>
<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义3D转换，使用16个值的4X4矩阵</li>
<li>translate(x,y)：定义2D转换（参数：x轴移动量，y轴移动量。+即向右移动，-即向左移动。单独一个量时表示x轴移动量与y轴移动量相等）</li>
<li>translate3d(x,y,z)：定义3D转换（参数基于translate(x,y)扩展）</li>
<li>translateX(x)：定义转换，只用于X轴的值</li>
<li>translateY(y)：定义转换，只用于Y轴的值</li>
<li>translateZ(z)：定义转换，只用于Z轴的值</li>
<li>scale(x,y)：定义2D缩放转换（参数x,y是倍数）</li>
<li>scale(x,y,z)：定义3D缩放转换（参数基于scale(x,y)扩展）</li>
<li>scaleX(x)：设置X轴的值来定义缩放转换</li>
<li>scaleY(y)：设置Y轴的值来定义缩放转换</li>
<li>scaleZ(z)：设置Z轴的值来定义缩放转换</li>
<li>rotate(angle)：定义2D旋转。在参数中规定角度（正是顺时针，负是逆时针）</li>
<li>rotate3d(x,y,z,angle)：定义3D旋转</li>
<li>rotateX(angle)：定义沿着X轴的3D旋转</li>
<li>rotateY(angle)：定义沿着Y轴的3D旋转</li>
<li>rotateZ(angle)：定义沿着Z轴的3D旋转</li>
<li>skew(x-angle,y-angle)：定义沿着X和Y轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着X轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着Y轴的2D倾斜转换</li>
<li>perspective(n)：为3D转换元素定义透视视图</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
<li>Internet Explorer 10 和 Firefox 支持 3D 转换</li>
<li>Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Opera 仍然不支持 3D 转换（它只支持 2D 转换）</li>
</ul>
</li>
<li>notice<ul>
<li>transform-origin可以定义改变被转换元素的位置<ul>
<li>grammar：transform-origin:x-axis,y-axis,z-zxis</li>
<li>默认值：transform-origin:50% 50% 0</li>
<li>detail<ul>
<li>x-axis | y-axis：定义视图被置于X轴的何处。可能的值：left | center | right | length | %</li>
<li>z-axis：定义视图被置于Z轴的何处。可能的值：length</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform-origin 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
</ul>
</li>
</ul>
</li>
<li>transform-style规定如何在3D空间中呈现被嵌套的元素<ul>
<li>grammar:transform-style:flat | preserve-3d</li>
<li>tranform-style默认值：transform-style:flat</li>
<li>compatibility<ul>
<li>Firefox 支持 transform-style 属性</li>
<li>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective定义3D元素距视图的距离，以像素计。<ul>
<li>grammar:perspective number | none</li>
<li>perspective默认值：perspective:none</li>
<li>detail<ul>
<li>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>perspective 属性只影响 3D 转换元素</li>
<li>通常和perspective-origin属性配合改变3D元素的底部位置</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspective 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective-origin定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置<ul>
<li>grammar:perspective-origin:x-axis,y-axis</li>
<li>perspective-origin默认值：perspective-origin:50% 50%</li>
<li>detail<ul>
<li>当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective-origin 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性</li>
</ul>
</li>
</ul>
</li>
<li>backface-visibility定义当元素不面向屏幕时是否可见<ul>
<li>grammar:backface-visibility: visible | hidden</li>
<li>backface-visibility默认值：backface-visibility:visible</li>
<li>detail<ul>
<li>如果在旋转元素不希望看到其背面时，该属性很有用</li>
</ul>
</li>
<li>compatility<ul>
<li>只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性</li>
<li>Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/css.jpg&quot; alt=&quot;css&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;some-sites&quot;&gt;&lt;a href=&quot;#some-sites&quot; class=&quot;headerlink&quot; title=&quot;some sites&quot;&gt;&lt;/a&gt;some sites&lt;/h1
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css3" scheme="https://chanran.github.io/tags/css3/"/>
    
      <category term="动画" scheme="https://chanran.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="animation" scheme="https://chanran.github.io/tags/animation/"/>
    
  </entry>
  
</feed>
