<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blue&#39;s blog</title>
  <subtitle>coding is funny.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chanran.github.io/"/>
  <updated>2017-01-19T16:42:59.992Z</updated>
  <id>https://chanran.github.io/</id>
  
  <author>
    <name>blue</name>
    <email>rong650751@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>由于centOS iptables开启导致网站无法访问</title>
    <link href="https://chanran.github.io/2017/01/20/fix-iptables-port-filter/"/>
    <id>https://chanran.github.io/2017/01/20/fix-iptables-port-filter/</id>
    <published>2017-01-19T16:11:16.000Z</published>
    <updated>2017-01-19T16:42:59.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>由于网站无法访问（不是我部署的），上去服务器查看问题。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ol>
<li><p>先进入到网站目录，开启laravel的debug模式，看一下有没有反应，结果还是无法访问，想了一想，也不是500，那就不应该是网站的问题。</p>
</li>
<li><p>因为服务器里php是5.3的，但是挂的网站却是php7的，就去检查php-fpm的进程，发现还在运行，也不是这里的问题。</p>
</li>
<li><p>查看nginx的配置文件，看是不是有人改动了挂的网站的配置，发现也没有，reload了一下nginx，发现网站也没有好。</p>
</li>
<li><p>综上，于是判断出不是应用和服务器软件nginx的问题。</p>
</li>
<li><p>在服务器wget了一下网站的首页，倒！发现wget到了！那肯定是服务器到客户端之间出了问题，于是判断应该是服务器防火墙问题。</p>
</li>
<li><p>80端口的应用跑得好好的，有个网站却挂掉了，应该是过滤规则有问题，于是执行了开启防火墙网站端口。</p>
</li>
<li><p>这个时候被自己坑了！开启端口命令里的端口写成了php-fpm的端口，搞得弄了好久。后来被师兄点醒。。。改了一下命令里的端口号为网站端口号就好了。。。</p>
</li>
</ol>
<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><ol>
<li><p>服务器最好不要关闭防火墙，写好过滤规则就好。修改<code>/etc/sysconfig/iptables</code>里的过则。</p>
</li>
<li><p>mark一下关于iptables的文章<br><a href="https://my.oschina.net/shipley/blog/299025" target="_blank" rel="external">iptables的详细介绍及配置方法</a><br><a href="http://www.cnblogs.com/gergro/archive/2008/06/06/1215219.html" target="_blank" rel="external">Iptables 规则 一些简单实例和详细介绍</a></p>
</li>
<li><p>做事一定要细心。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h1&gt;&lt;p&gt;由于网站无法访问（不是我部署的），上去服务器查看问题。&lt;/p&gt;
&lt;h1 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="服务器" scheme="https://chanran.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>express和webpack配合时热刷新出错的解决方法</title>
    <link href="https://chanran.github.io/2017/01/17/express-webpack-hot-refresh/"/>
    <id>https://chanran.github.io/2017/01/17/express-webpack-hot-refresh/</id>
    <published>2017-01-17T15:44:29.000Z</published>
    <updated>2017-01-17T16:13:55.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[WDS] App updated. Recompiling...</div><div class="line">bundle.js:635 [WDS] Disconnected!</div><div class="line">log @ bundle.js:635</div><div class="line">bundle.js:631 [WDS] Hot Module Replacement enabled.</div><div class="line">bundle.js:631 [WDS] App hot update...</div><div class="line">bundle.js:8453 [HMR] Checking for updates on the server...</div></pre></td></tr></table></figure>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><strong>不能使用nodemon或者supervisor去启动webpack-dev-server</strong></p>
<p>之前因为把express服务和webpack-dev-server在同一个server.js里启动，然后执行<code>nodemon server.js</code>，然后发现出错信息。</p>
<p>折腾了好久，google、百度、问人、还去github提issue，最后还是靠自己解决了。</p>
<p>具体原因是因为<strong>nodemon</strong>是重启整个进程的，如果用<strong>nodemon</strong>来启动<strong>webpack</strong>，那么这样的话会使webpack丢失某些存在内存中的东西，所以不建议使用<strong>nodemon</strong>来启动<strong>webpack</strong>。</p>
<p>详细可以看webpack-hot-middleware的<a href="https://github.com/glenjamin/webpack-hot-middleware/issues/21" target="_blank" rel="external">issue</a></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>把express server和webpack-dev-server分开</li>
</ol>
<p>server.js(express server)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const proxy = require(&apos;proxy-middleware&apos;)</div><div class="line">const url = require(&apos;url&apos;)</div><div class="line">const express = require(&apos;express&apos;)</div><div class="line">const app = express()</div><div class="line"></div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">  res.sendFile(__dirname+&apos;/src/html/index.html&apos;);</div><div class="line">&#125;)</div><div class="line">app.listen(3001)</div><div class="line">app.use(&apos;/build&apos;,proxy(url.parse(&apos;http://localhost:3000/build&apos;)))</div></pre></td></tr></table></figure>
<p>webpack.server.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const webpack = require(&apos;webpack&apos;)</div><div class="line">const WebpackDevServer = require(&apos;webpack-dev-server&apos;)</div><div class="line">const config = require(&apos;./webpack.config&apos;)</div><div class="line">const compiler = webpack(config)</div><div class="line"></div><div class="line">new WebpackDevServer(compiler, &#123;</div><div class="line">  publicPath: config.output.publicPath,</div><div class="line">  inline:true,</div><div class="line">  hot: true,</div><div class="line">  historyApiFallback: true</div><div class="line">&#125;).listen(3000, &apos;localhost&apos;, function (err, result) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">    return console.log(err);</div><div class="line">  &#125;</div><div class="line">  console.log(&apos;Listening at http://localhost:3000/&apos;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>分别用nodemon和node启动</li>
</ol>
<p>终端1</p>
<p><code>nodemon server.js</code></p>
<p>终端2</p>
<p><code>node webpack-dev-server</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;出错&quot;&gt;&lt;a href=&quot;#出错&quot; class=&quot;headerlink&quot; title=&quot;出错&quot;&gt;&lt;/a&gt;出错&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://chanran.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[转载]Node.js框架之express与koa对比分析</title>
    <link href="https://chanran.github.io/2017/01/12/%E8%BD%AC%E8%BD%BD-Node-js%E6%A1%86%E6%9E%B6%E4%B9%8Bexpress%E4%B8%8Ekoa%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://chanran.github.io/2017/01/12/转载-Node-js框架之express与koa对比分析/</id>
    <published>2017-01-12T12:22:22.000Z</published>
    <updated>2017-01-17T15:43:26.397Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自<a href="https://yq.aliyun.com/articles/3062" target="_blank" rel="external">Node.js框架之express与koa对比分析</a></p>
</blockquote>
<hr>
<blockquote>
<p><strong>摘要：</strong> 提到Node.js开发，不得不提目前炙手可热的2大框架express和koa。Express诞生已有时日，是一个简洁而灵活的web开发框架，使用简单而功能强大。Koa相对更为年轻，是Express框架原班人马基于ES6新特性重新开发的敏捷开发框架，现在可谓风头正劲，大有赶超Express之势。 …</p>
</blockquote>
<p>提到Node.js开发，不得不提目前炙手可热的2大框架express和koa。Express诞生已有时日，是一个简洁而灵活的web开发框架，使用简单而功能强大。Koa相对更为年轻，是Express框架原班人马基于ES6新特性重新开发的敏捷开发框架，现在可谓风头正劲，大有赶超Express之势。</p>
<p>Express和koa都是服务端的开发框架，服务端开发的重点是对HTTP Request和HTTP Response两个对象的封装和处理，应用的生命周期维护以及视图的处理等。 以下将主要通过这些方面，对两者进行一个对比介绍，看看到底有什么区别。</p>
<p>Express主要基于Connect中间件框架，功能丰富，随取随用，并且框架自身封装了大量便利的功能，比如路由、视图处理等等。而koa主要基于co中间件框架，框架自身并没集成太多功能，大部分功能需要用户自行require中间件去解决，但是由于其基于ES6 generator特性的中间件机制，解决了长期诟病的“callback hell”和麻烦的错误处理的问题，大受开发者欢迎。</p>
<h1 id="Express和koa初印象"><a href="#Express和koa初印象" class="headerlink" title="Express和koa初印象"></a>Express和koa初印象</h1><p>先来一个Hello World，各自认识一下吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//Express</div><div class="line">var express = require(&apos;express&apos;)</div><div class="line">var app = express()  //创建一个APP实例</div><div class="line"></div><div class="line">//建一个项目根目录的get请求路由，回调方法中直接输出字符串Hello World!</div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;</div><div class="line">    res.send(&apos;Hello World!&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//监听端口，启动服务</div><div class="line">app.listen(3000);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Koa</div><div class="line">var koa = require(&apos;koa&apos;);</div><div class="line">var route = require(&apos;koa-route&apos;);  //koa默认没有集成route功能，引入中间件</div><div class="line"></div><div class="line">var app = koa();  //创建一个APP实例</div><div class="line"></div><div class="line">//建一个项目根目录的get请求路由，回调方法中直接输出字符串Hello World!，就是挂载一个中间件</div><div class="line">app.use(route.get(&apos;/&apos;, function *()&#123;</div><div class="line">    this.body = &apos;Hello World&apos;;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">//监听端口，启动服务</div><div class="line">app.listen(3000);</div></pre></td></tr></table></figure>
<p>可以看出来，两者创建一个基础的Web服务都非常简单，可以说几行代码就解决了问题。两者的写法也基本相同，最大的区别是路由处理Express是自身集成的，而koa需要引入中间件。以下是Koa官方文档对于两者特性的一个对比：</p>
<h1 id="重要功能对比介绍"><a href="#重要功能对比介绍" class="headerlink" title="重要功能对比介绍"></a>重要功能对比介绍</h1><table>
<thead>
<tr>
<th>Feature</th>
<th>Koa</th>
<th>Express</th>
<th>Connect</th>
</tr>
</thead>
<tbody>
<tr>
<td>Middleware Kernel</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Routing</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Sending Files</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>JSONP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>通过后续的比较，大家其实可以看出，虽然koa看上去比express少集成了很多功能，但是使用起来其实基本一致，因为中间件非常丰富全面，需要什么require进来就行了（不一定要像express那样先帮你require好），使用起来反而更加灵活。</p>
<h1 id="应用生命周期和上下文"><a href="#应用生命周期和上下文" class="headerlink" title="应用生命周期和上下文"></a>应用生命周期和上下文</h1><p>我们在项目过程中，经常需要用到在整个应用生命周期中共享的配置和数据对象，比如服务URL、是否启用某个功能特性、接口配置、当前登录用户数据等等。属于比较基础的功能，两者都非常方便，koa的application context感觉使用起来更方便一点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Express</div><div class="line">//共享配置，express提供了很多便利的方法</div><div class="line">app.set(&apos;enableCache&apos;, true)</div><div class="line">app.get(&apos;enableCache&apos;)//true</div><div class="line"></div><div class="line">app.disable(&apos;cache&apos;)</div><div class="line">app.disabled(&apos;cache&apos;)//true</div><div class="line"></div><div class="line">app.enable(&apos;cache&apos;)</div><div class="line">app.enabled(&apos;cache&apos;)//true</div><div class="line"></div><div class="line">//应用共享数据：app.locals</div><div class="line">app.locals.user = &#123;name:&quot;Samoay&quot;, id:1234&#125;;</div></pre></td></tr></table></figure>
<h1 id="请求-HTTP-Request"><a href="#请求-HTTP-Request" class="headerlink" title="请求 HTTP Request"></a>请求 HTTP Request</h1><p>服务器端需要进行什么处理，怎么处理以及处理的参数都依赖客户端发送的请求，两个框架都封装了HTTP Request对象，便于对这一部分进行处理。以下主要举例说明下对请求参数的处理，其它例如头信息、Cookie等请参考官方文档。两者除了写法上稍有区别，没太大区别。GET参数都可以直接通过Request对象获取，POST参数都需要引入中间件先parse，再取值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// Express</div><div class="line">// 获取QueryString参数</div><div class="line">// GET /shoes?order=desc&amp;shoe[color]=blue</div><div class="line">req.query.order</div><div class="line">// =&gt; &quot;desc&quot;</div><div class="line"></div><div class="line">req.query.shoe.color</div><div class="line">// =&gt; &quot;blue&quot;</div><div class="line"></div><div class="line">// 通过路由获取Restful风格的URL参数</div><div class="line">app.get(&apos;/user/:id?&apos;, function userIdHandler(req, res) &#123;</div><div class="line">    console.log(req.params.id);</div><div class="line">    res.send(&apos;GET&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//获取POST数据:需要body-parser中间件</div><div class="line">var bodyParser = require(&apos;body-parser&apos;);</div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</div><div class="line">app.post(&apos;/&apos;, function (req, res) &#123;</div><div class="line">    console.log(req.body);</div><div class="line">    res.json(req.body);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 获取QueryString参数</div><div class="line">// GET /?action=delete&amp;id=1234</div><div class="line">this.request.query</div><div class="line">// =&gt; &#123; action: &apos;delete&apos;, id: &apos;1234&apos; &#125;</div><div class="line"></div><div class="line">// 通过路由获取Restful风格的URL参数</div><div class="line">var route = require(&apos;koa-route&apos;);</div><div class="line">app.use(route.get(&apos;/post/:id&apos;, function *(id)&#123;</div><div class="line">    console.log(id);</div><div class="line">    // =&gt; 1234</div><div class="line">&#125;));</div><div class="line"></div><div class="line">// 获取POST数据:需要co-body中间件</div><div class="line">// Content-Type: application/x-www-form-urlencoded</div><div class="line">// title=Test&amp;content=This+is+a+test+post</div><div class="line">var parse = require(&apos;co-body&apos;);</div><div class="line">app.use(route.post(&apos;/post/new&apos;, function *()&#123;</div><div class="line">    var post = yield parse(this.request);//this</div><div class="line">    console.log(post);</div><div class="line">    // =&gt; &#123; title: &apos;Test&apos;, content: &apos;This is a test post&apos; &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h1 id="路由Route"><a href="#路由Route" class="headerlink" title="路由Route"></a>路由Route</h1><p>收到客户端的请求，服务需要通过识别请求的方法（HTTP Method: GET, POST, PUT…）和请求的具体路径(path)来进行不同的处理。这部分功能就是路由（Route）需要做的事情，说白了就是请求的分发，分发到不同的回调方法去处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Express</div><div class="line">// app.all表示对所有的路径和请求方式都要经过这些回调方法的处理，可以逗号方式传入多个</div><div class="line">app.all(&apos;*&apos;, authentication, loadUser);</div><div class="line">// 也可以多次调用</div><div class="line">app.all(&apos;*&apos;, requireAuthentication)</div><div class="line">app.all(&apos;*&apos;, loadUser);</div><div class="line">// 也可以针对某具体路径下面的所有请求</div><div class="line">app.all(&apos;/api/*&apos;, requireAuthentication);</div><div class="line"></div><div class="line">// app.get GET方式的请求</div><div class="line">app.get(&apos;/user/:id&apos;, function(req, res) &#123;</div><div class="line">    res.send(&apos;user &apos; + req.params.id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// app.post  POST方式的请求</div><div class="line">app.post(&apos;/user/create&apos;, function(req, res) &#123;</div><div class="line">    res.send(&apos;create new user&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里需要说明2个问题，首先是<strong>app.get</strong>，在应用生命周期中也有一个<strong>app.get</strong>方法，用于获取项目配置。Express内部就是公用的一个方法，如果传入的只有1个参数就获取配置，2个参数就作为路由处理。其次是<strong>app.use(‘*’, cb)</strong> 与<strong>app.all(‘*’, cb)</strong> 的区别，前者是中间件方式，调用是有顺序的，不一定会执行到；后者是路由方式，肯定会执行到。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// Koa</div><div class="line">// 和Express不同，koa需要先引入route中间件</div><div class="line">var route = require(&apos;koa-route&apos;);</div><div class="line"></div><div class="line">//引入中间件之后支持的写法差不多，只是路径传入route，然后把route作为中间件挂载到app</div><div class="line">app.use(route.get(&apos;/&apos;, list));</div><div class="line">app.use(route.get(&apos;/post/new&apos;, add));</div><div class="line">app.use(route.get(&apos;/post/:id&apos;, show));</div><div class="line">app.use(route.post(&apos;/post&apos;, create));</div><div class="line"></div><div class="line">//链式写法</div><div class="line">var router = require(&apos;koa-router&apos;)();</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, list)</div><div class="line">      .get(&apos;/post/new&apos;, add)</div><div class="line">      .get(&apos;/post/:id&apos;, show)</div><div class="line">      .post(&apos;/post&apos;, create);</div><div class="line"></div><div class="line">app.use(router.routes())</div><div class="line">   .use(router.allowedMethods());</div></pre></td></tr></table></figure>
<h1 id="视图Views"><a href="#视图Views" class="headerlink" title="视图Views"></a>视图Views</h1><p>Express框架自身集成了视图功能，提供了consolidate.js功能，可以是有几乎所有Javascript模板引擎，并提供了视图设置的便利方法。Koa需要引入co-views中间件，co-views也是基于consolidate.js，支持能力一样强大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// Express</div><div class="line">// 这只模板路径和默认的模板后缀</div><div class="line">app.set(&apos;views&apos;, __dirname + &apos;/tpls&apos;);</div><div class="line">app.set(&apos;view engine&apos;, &apos;html&apos;);</div><div class="line"></div><div class="line">//默认，express根据template的后缀自动选择模板</div><div class="line">//引擎渲染，支持jade和ejs。如果不使用默认扩展名</div><div class="line">app.engine(ext, callback)</div><div class="line"></div><div class="line">app.engine(&apos;html&apos;, require(&apos;ejs&apos;).renderFile);</div><div class="line"></div><div class="line">//如果模板引擎不支持(path, options, callback)</div><div class="line">var engines = require(&apos;consolidate&apos;);</div><div class="line">app.engine(&apos;html&apos;, engines.handlebars);</div><div class="line">app.engine(&apos;tpl&apos;, engines.underscore);</div><div class="line"></div><div class="line">app.get(&apos;list&apos;, function(res, req)&#123;</div><div class="line">    res.render(&apos;list&apos;, &#123;data&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Koa</div><div class="line">//需要引入co-views中间件</div><div class="line">var views = require(&apos;co-views&apos;);</div><div class="line"></div><div class="line">var render = views(&apos;tpls&apos;, &#123;</div><div class="line">    map: &#123; html: &apos;swig&apos; &#125;,//html后缀使用引擎</div><div class="line">    default: &quot;jade&quot;//render不提供后缀名时</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var userInfo = &#123;</div><div class="line">    name: &apos;tobi&apos;,</div><div class="line">    species: &apos;ferret&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var html;</div><div class="line">html = render(&apos;user&apos;, &#123; user: userInfo &#125;);</div><div class="line">html = render(&apos;user.jade&apos;, &#123; user: userInfo &#125;);</div><div class="line">html = render(&apos;user.ejs&apos;, &#123; user: userInfo &#125;);</div></pre></td></tr></table></figure>
<h1 id="返回-HTTP-Response"><a href="#返回-HTTP-Response" class="headerlink" title="返回 HTTP Response"></a>返回 HTTP Response</h1><p>获取完请求参数、处理好了具体的请求、视图也准备就绪，下面就该返回给客户端了，那就是HTTP Response对象了。这部分也属于框架的基础部分，各种都做了封装实现，显著的区别是koa直接将输出绑定到了ctx.body属性上，另外输出JSON或JSONP需要引入中间件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// Express</div><div class="line">//输出普通的html</div><div class="line">res.render(&apos;tplName&apos;, &#123;data&#125;);</div><div class="line"></div><div class="line">//输出JSON</div><div class="line">res.jsonp(&#123; user: &apos;Samoay&apos; &#125;);</div><div class="line">// =&gt; &#123; &quot;user&quot;: &quot;Samoay&quot; &#125;</div><div class="line"></div><div class="line">//输出JSONP   ?callback=foo</div><div class="line">res.jsonp(&#123; user: &apos;Samoay&apos; &#125;);</div><div class="line">// =&gt; foo(&#123; &quot;user&quot;: &quot;Samoay&quot; &#125;);</div><div class="line"></div><div class="line">//res.send([body]);</div><div class="line">res.send(new Buffer(&apos;whoop&apos;));</div><div class="line">res.send(&#123; some: &apos;json&apos; &#125;);</div><div class="line">res.send(&apos;&lt;p&gt;some html&lt;/p&gt;&apos;);</div><div class="line"></div><div class="line">//设定HTTP Status状态码</div><div class="line">res.status(200);</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//koa直接set ctx的status和body</div><div class="line">app.use(route.get(&apos;/post/update/:id&apos;, function *(id)&#123;</div><div class="line">    this.status = 404;</div><div class="line">    this.body = &apos;Page Not Found&apos;;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">var views = require(&apos;co-views&apos;);</div><div class="line">var render = views(&apos;tpls&apos;, &#123;</div><div class="line">    default: &quot;jade&quot;//render不提供后缀名时</div><div class="line">&#125;);</div><div class="line">app.use(route.get(&apos;/post/:id&apos;, function *(id)&#123;</div><div class="line">    var post = getPost(id);</div><div class="line">    this.status = 200;//by default, optional</div><div class="line">    this.body = yield render(&apos;user&apos;, post);</div><div class="line">&#125;));</div><div class="line"></div><div class="line">//JSON</div><div class="line">var json = require(&apos;koa-json&apos;);</div><div class="line">app.use(route.get(&apos;/post/:id&apos;, function *(id)&#123;</div><div class="line">    this.body = &#123;id:1234, title:&quot;Test post&quot;, content:&quot;...&quot;&#125;;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h1 id="中间件Middleware"><a href="#中间件Middleware" class="headerlink" title="中间件Middleware"></a>中间件Middleware</h1><p>对比了主要的几个框架功能方面的使用，其实区别最大，使用方式最不同的地方是在中间件的处理上。Express由于是在ES6特性之前的，中间件的基础原理还是callback方式的；而koa得益于generator特性和co框架（co会把所有generator的返回封装成为Promise对象），使得中间件的编写更加优雅。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// req 用于获取请求信息， ServerRequest 的实例</div><div class="line">// res 用于响应处理结果， ServerResponse 的实例</div><div class="line">// next() 函数用于将当前控制权转交给下一步处理，</div><div class="line">//        如果给 next() 传递一个参数时，表示出错信息</div><div class="line">var x = function (req, res, next) &#123;</div><div class="line"></div><div class="line">    // 对req和res进行必要的处理</div><div class="line"></div><div class="line">    // 进入下一个中间件</div><div class="line">    return next();</div><div class="line"></div><div class="line">    // 传递错误信息到下一个中间件</div><div class="line">    return next(err);</div><div class="line"></div><div class="line">    // 直接输出，不再进入后面的中间件</div><div class="line">    return res.send(&apos;show page&apos;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// koa 一切都在ctx对象上+generator</div><div class="line">app.use(function *()&#123;</div><div class="line">    this; // is the Context</div><div class="line"></div><div class="line">    this.request; // is a koa Request</div><div class="line">    this.response; // is a koa Response</div><div class="line"></div><div class="line">    this.req;// is node js request</div><div class="line">    this.res;// is node js response</div><div class="line"></div><div class="line">    //不再进入后面的中间件, 回溯upstream</div><div class="line">    return;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://yq.aliyun.com/articles/3062&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js框架之express与koa对比分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6(二)--变量的解构赋值</title>
    <link href="https://chanran.github.io/2017/01/11/variable-deconstruction/"/>
    <id>https://chanran.github.io/2017/01/11/variable-deconstruction/</id>
    <published>2017-01-11T10:38:09.000Z</published>
    <updated>2017-01-12T13:37:52.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
</blockquote>
<h1 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h1><blockquote>
<p>基本要领：结构一致，左边变量等于“=”右边的值</p>
</blockquote>
<h2 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,b,c] = [1,2,3];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div><div class="line">console.log(c); //3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,[b],c] = [1,[2],3];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div><div class="line">console.log(c); //3</div></pre></td></tr></table></figure>
<h2 id="部分匹配"><a href="#部分匹配" class="headerlink" title="部分匹配"></a>部分匹配</h2><p><strong> 不匹配的变量默认赋值undefined </strong></p>
<h3 id="变量比“-”右边的值多"><a href="#变量比“-”右边的值多" class="headerlink" title="变量比“=”右边的值多"></a>变量比“=”右边的值多</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,b,c] = [,2,3];</div><div class="line">console.log(a); //undefined</div><div class="line">console.log(b); //2</div><div class="line">console.log(c); //3</div></pre></td></tr></table></figure>
<h3 id="变量比“-”右边的值少"><a href="#变量比“-”右边的值少" class="headerlink" title="变量比“=”右边的值少"></a>变量比“=”右边的值少</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,b,c] = [1,2,3,4];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div><div class="line">console.log(c); //3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,[b],c] = [1,[2,3],4];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div><div class="line">console.log(c); //4</div></pre></td></tr></table></figure>
<h2 id="不定参数匹配"><a href="#不定参数匹配" class="headerlink" title="不定参数匹配"></a>不定参数匹配</h2><p><strong> …variable是<a href="http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults" target="_blank" rel="external">不定参数</a> </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let [a,...b] = [1,2,3,4];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //[2,3,4]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let [a,...b] = [1,2,3,4,5];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //[2,3,4,5]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,b,...c] = [1];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //undefined</div><div class="line">console.log(c); //[],空数组</div></pre></td></tr></table></figure>
<h2 id="支持默认值"><a href="#支持默认值" class="headerlink" title="支持默认值"></a>支持默认值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [a = 1] = [];</div><div class="line">console.log(a); //1</div></pre></td></tr></table></figure>
<p>特殊地:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [a = 1] = [undefined]; //undefined不能赋值给a</div><div class="line">console.log(a); //1</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [a = 1] = [NaN]; //NaN可以赋值给a</div><div class="line">console.log(a); //NaN</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let [a = 1] = [null]; //null可以赋值给a</div><div class="line">console.log(a); //null</div></pre></td></tr></table></figure>
<h2 id="var-let-const都支持解构赋值"><a href="#var-let-const都支持解构赋值" class="headerlink" title="var,let,const都支持解构赋值"></a>var,let,const都支持解构赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var [a,b] = [1,2];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const [a,b] = [1,2];</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div></pre></td></tr></table></figure>
<h2 id="支持变量解构的数据结构–可以迭代-iterator-的结构"><a href="#支持变量解构的数据结构–可以迭代-iterator-的结构" class="headerlink" title="支持变量解构的数据结构–可以迭代(iterator)的结构"></a>支持变量解构的数据结构–可以迭代(iterator)的结构</h2><p>科普：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="external">可迭代协议</a></p>
<h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><h2 id="变量必须与属性同名"><a href="#变量必须与属性同名" class="headerlink" title="变量必须与属性同名"></a>变量必须与属性同名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a,b&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div></pre></td></tr></table></figure>
<p>否则变量默认赋值undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let &#123;c&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(c); //undefined</div></pre></td></tr></table></figure></p>
<h2 id="次序无关"><a href="#次序无关" class="headerlink" title="次序无关"></a>次序无关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;b,a&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div></pre></td></tr></table></figure>
<h2 id="自定义变量名称"><a href="#自定义变量名称" class="headerlink" title="自定义变量名称"></a>自定义变量名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a:newA,b:newB&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(newA); //1</div><div class="line">console.log(newB); //2</div></pre></td></tr></table></figure>
<p><strong> 要注意的是: </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a:newA,b:newB&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(a); //ReferenceError: a is not defined</div><div class="line">console.log(b); //ReferenceError: a is not defined</div></pre></td></tr></table></figure></p>
<p>因为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a,b&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(a); //1</div><div class="line">console.log(b); //2</div></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a:a,b:b&#125; = &#123;a:1,b:2&#125;;</div><div class="line">console.log(a); //1，但这里的a其实是第二个a</div><div class="line">console.log(a); //2，但这里的b其实是第二个b</div></pre></td></tr></table></figure></p>
<h2 id="声明与赋值"><a href="#声明与赋值" class="headerlink" title="声明与赋值"></a>声明与赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let a;</div><div class="line">let &#123;a&#125; = &#123;a:1&#125;; //Identifier &apos;newA&apos; has already been declared</div></pre></td></tr></table></figure>
<p>应为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let a;</div><div class="line">(&#123;a&#125; = &#123;a:1&#125;);</div></pre></td></tr></table></figure>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let &#123;a = 0,b = 0&#125; = &#123;c:3,d:4&#125;;</div><div class="line">console.log(a); //0</div><div class="line">console.log(b); //0</div></pre></td></tr></table></figure>
<h2 id="嵌套对象"><a href="#嵌套对象" class="headerlink" title="嵌套对象"></a>嵌套对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let &#123;a,b:&#123;c&#125;&#125; = &#123;a:1,b:&#123;c:3&#125;&#125;</div><div class="line">console.log(a); //1</div><div class="line">console.log(c); //2</div><div class="line">console.log(b); //ReferenceError: b is not defined</div></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123;Component&#125; from &apos;react&apos;; //导入</div><div class="line">let &#123;log,sin,cos&#125; = Math;</div></pre></td></tr></table></figure>
<h1 id="字符串的解构"><a href="#字符串的解构" class="headerlink" title="字符串的解构"></a>字符串的解构</h1><h2 id="字符串的数组解构"><a href="#字符串的数组解构" class="headerlink" title="字符串的数组解构"></a>字符串的数组解构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let [a,b,c] = &apos;123&apos;;</div><div class="line">console.log(a); //&quot;1&quot;</div><div class="line">console.log(b); //&quot;2&quot;</div><div class="line">console.log(c); //&quot;3&quot;</div></pre></td></tr></table></figure>
<h2 id="字符串的对象解构"><a href="#字符串的对象解构" class="headerlink" title="字符串的对象解构"></a>字符串的对象解构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let &#123;length:a&#125; = &apos;123&apos;; //因为字符串是特殊的对象，且拥有length这一属性</div><div class="line">console.log(a); //3</div></pre></td></tr></table></figure>
<h1 id="函数解构"><a href="#函数解构" class="headerlink" title="函数解构"></a>函数解构</h1><h2 id="完全匹配-1"><a href="#完全匹配-1" class="headerlink" title="完全匹配"></a>完全匹配</h2><h3 id="传入数组"><a href="#传入数组" class="headerlink" title="传入数组"></a>传入数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max([a,b])&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max([1,2]); //结果为2</div></pre></td></tr></table></figure>
<h3 id="传入对象"><a href="#传入对象" class="headerlink" title="传入对象"></a>传入对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max(&#123;a,b&#125;)&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max(&#123;a:1,b:2&#125;); //结果为2</div></pre></td></tr></table></figure>
<h2 id="部分匹配-1"><a href="#部分匹配-1" class="headerlink" title="部分匹配"></a>部分匹配</h2><h3 id="少值"><a href="#少值" class="headerlink" title="少值"></a>少值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max([a,b])&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max([1]); //结果为undefined</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max(&#123;a,b&#125;)&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max(&#123;a:1&#125;); //结果为undefined</div></pre></td></tr></table></figure>
<h3 id="多值"><a href="#多值" class="headerlink" title="多值"></a>多值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max([a,b])&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max([1,2,3]); //结果为2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function max(&#123;a,b&#125;)&#123;</div><div class="line">    return a&gt;b?a:b;</div><div class="line">&#125;</div><div class="line">max(&#123;a:1,b:2,c:3&#125;); //结果为2</div></pre></td></tr></table></figure>
<h2 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function array2Object([a = 0,b = 0] = [])&#123; //一种是没有传入数组时给一个默认空数组，一种是传入了数组，但是没有包含a或b或a和b，默认给a和b一个0值</div><div class="line">    return &#123;a,b&#125;;</div><div class="line">&#125;</div><div class="line">array2Object([1,2]); //&#123;a:1,b:2&#125;</div><div class="line">array2Object([1]); //&#123;a:1,b:0&#125;</div><div class="line">array2Object([]); //&#123;a:0,b:0&#125;</div><div class="line">array2Object();   //&#123;a:0,b:0&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function array2Object([a,b] = [0,0])&#123; //一种是没有传入数组时给一个默认有值的数组，一种是传入了数组，但是没有包含a或b或a和b，js引擎给a和b一个undefined值</div><div class="line">    return &#123;a,b&#125;;</div><div class="line">&#125;</div><div class="line">array2Object([1,2]); //&#123;a:1,b:2&#125;</div><div class="line">array2Object([1]);  //&#123;a:1,b:undefined&#125;</div><div class="line">array2Object([]);   //&#123;a:undefined,b:undefined&#125;</div><div class="line">array2Object();     //&#123;0,0&#125;</div></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function object2Array(&#123;a = 0, b = 0&#125; = &#123;&#125;) &#123; //一种是没有传入对象时给一个默认空对象，一种是传入了对象，但是没有包含a或b或a和b，默认给a和b一个0值</div><div class="line">  return [a, b];</div><div class="line">&#125;</div><div class="line"></div><div class="line">object2Array(&#123;a: 1, b: 2&#125;); // [1, 2]</div><div class="line">object2Array(&#123;a: 1&#125;); // [1, 0]</div><div class="line">object2Array(&#123;&#125;); // [0, 0]</div><div class="line">object2Array(); // [0, 0]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function object2Array(&#123;a, b&#125; = &#123; a: 0, b: 0 &#125;) &#123; //一种是没有传入对象时给一个默认有值的对象，一种是传入了对象，但是没有包含a或b或a和b，js引擎给a和b一个undefined值</div><div class="line">  return [a, b];</div><div class="line">&#125;</div><div class="line"></div><div class="line">object2Array(&#123;a: 3, b: 8&#125;); // [3, 8]</div><div class="line">object2Array(&#123;a: 3&#125;); // [3, undefined]</div><div class="line">object2Array(&#123;&#125;); // [undefined, undefined]</div><div class="line">object2Array(); // [0, 0]</div></pre></td></tr></table></figure>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><h2 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5:"></a>ES5:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var x = 1,y = 2,tmp;</div><div class="line">/*三行代码*/</div><div class="line">tmp = x;</div><div class="line">x = y;</div><div class="line">y = tmp;</div><div class="line">console.log(x); //2</div><div class="line">console.log(y); //1</div></pre></td></tr></table></figure>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let x = 1,y = 2;</div><div class="line">/*一行代码解决*/</div><div class="line">[y,x] = [x,y];</div><div class="line">console.log(x); //2</div><div class="line">console.log(y); //1</div></pre></td></tr></table></figure>
<h2 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 返回一个数组</div><div class="line"></div><div class="line">function example() &#123;</div><div class="line">  return [1, 2, 3];</div><div class="line">&#125;</div><div class="line">var [a, b, c] = example();</div><div class="line"></div><div class="line">// 返回一个对象</div><div class="line"></div><div class="line">function example() &#123;</div><div class="line">  return &#123;</div><div class="line">    foo: 1,</div><div class="line">    bar: 2</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>
<h2 id="函数参数定义"><a href="#函数参数定义" class="headerlink" title="函数参数定义"></a>函数参数定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 参数是一组有次序的值</div><div class="line">function f([x, y, z]) &#123; ... &#125;</div><div class="line">f([1, 2, 3]);</div><div class="line"></div><div class="line">// 参数是一组无次序的值</div><div class="line">function f(&#123;x, y, z&#125;) &#123; ... &#125;</div><div class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</div></pre></td></tr></table></figure>
<h2 id="提取json数据"><a href="#提取json数据" class="headerlink" title="提取json数据"></a>提取json数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var jsonData = &#123;</div><div class="line">  id: 42,</div><div class="line">  status: &quot;OK&quot;,</div><div class="line">  data: [867, 5309]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let &#123; id, status, data: number &#125; = jsonData;</div><div class="line"></div><div class="line">console.log(id, status, number);</div><div class="line">// 42, &quot;OK&quot;, [867, 5309]</div></pre></td></tr></table></figure>
<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = function (url, &#123;</div><div class="line">  async = true,</div><div class="line">  beforeSend = function () &#123;&#125;,</div><div class="line">  cache = true,</div><div class="line">  complete = function () &#123;&#125;,</div><div class="line">  crossDomain = false,</div><div class="line">  global = true,</div><div class="line">  // ... more config</div><div class="line">&#125;) &#123;</div><div class="line">  // ... do stuff</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var map = new Map();</div><div class="line">map.set(&apos;first&apos;, &apos;hello&apos;);</div><div class="line">map.set(&apos;second&apos;, &apos;world&apos;);</div><div class="line"></div><div class="line">for (let [key, value] of map) &#123;</div><div class="line">  console.log(key + &quot; is &quot; + value);</div><div class="line">&#125;</div><div class="line">// first is hello</div><div class="line">// second is world</div></pre></td></tr></table></figure>
<h2 id="输入模块的指定方法"><a href="#输入模块的指定方法" class="headerlink" title="输入模块的指定方法"></a>输入模块的指定方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="https://chanran.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6(一)--let和const</title>
    <link href="https://chanran.github.io/2017/01/11/ES6-let-const/"/>
    <id>https://chanran.github.io/2017/01/11/ES6-let-const/</id>
    <published>2017-01-11T03:44:13.000Z</published>
    <updated>2017-01-11T09:19:34.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用let，不会造成变量提升"><a href="#使用let，不会造成变量提升" class="headerlink" title="使用let，不会造成变量提升"></a>使用let，不会造成变量提升</h1><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(test); //结果是undefined</div><div class="line">var test = &apos;test&apos;;</div></pre></td></tr></table></figure>
<p>可以理解为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var test;</div><div class="line">console.log(test); //结果是undefined</div><div class="line">test = &apos;test&apos;;</div></pre></td></tr></table></figure></p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(test); //结果是ReferenceError:test is not defined</div><div class="line">let test = &apos;test&apos;;</div></pre></td></tr></table></figure>
<p>因为不存在变量提升，可以理解为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(test);</div><div class="line">let test; //上不去哩，所以报错了。</div><div class="line">test = &apos;test&apos;;</div></pre></td></tr></table></figure>
<h1 id="作用在块级作用域"><a href="#作用在块级作用域" class="headerlink" title="作用在块级作用域"></a>作用在块级作用域</h1><p>首先要科普一下块级作用域：</p>
<blockquote>
<p>在ES6之前javascript是用函数function来划分作用域，于是定义的变量作用在各个函数里，单独或者嵌套，也造成了函数作用域链。</p>
<p>现在ES6定义了块级作用域，用{}(if、for等使用了{}才具备块级作用域的条件)划分块级作用域，let在块级作用域定义的变量在离开块级作用域的时候会被销毁，所以在块级作用域内定义的变量在块级作用域外访问的话会报引用错误(ReferenceError)</p>
</blockquote>
<h2 id="ES5-1"><a href="#ES5-1" class="headerlink" title="ES5"></a>ES5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    var a = 1;</div><div class="line">&#125;</div><div class="line">console.log(a); //结果为1</div></pre></td></tr></table></figure>
<h2 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    let a = 1;</div><div class="line">&#125;</div><div class="line">console.log(a) //结果是ReferenceError: a is not defined</div></pre></td></tr></table></figure>
<h1 id="不允许重复声明变量"><a href="#不允许重复声明变量" class="headerlink" title="不允许重复声明变量"></a>不允许重复声明变量</h1><h2 id="ES5-2"><a href="#ES5-2" class="headerlink" title="ES5"></a>ES5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    var a = 1;</div><div class="line">    var a = 2; //我照样过得好好的～</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ES6-2"><a href="#ES6-2" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    let a = 1;</div><div class="line">    let a = 2; //出错啦～,SyntaxError: Identifier &apos;a&apos; has already been declared</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="暂时性死区-temporal-dead-zone，简称-TDZ"><a href="#暂时性死区-temporal-dead-zone，简称-TDZ" class="headerlink" title="暂时性死区(temporal dead zone，简称 TDZ)"></a>暂时性死区(temporal dead zone，简称 TDZ)</h1><blockquote>
<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>
</blockquote>
<h2 id="没有let的区块-无论是es5还是es6"><a href="#没有let的区块-无论是es5还是es6" class="headerlink" title="没有let的区块(无论是es5还是es6)"></a>没有let的区块(无论是es5还是es6)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  tmp = &apos;abc&apos;;</div><div class="line">  console.log(tmp); //结果为abc</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  tmp = &apos;abc&apos;;</div><div class="line">  console.log(tmp); //结果为abc</div><div class="line">  var tmp; //这里定义的tmp将会变量提升，相当于移动这个语句在tmp = &apos;abc&apos;上面。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有let的区块"><a href="#有let的区块" class="headerlink" title="有let的区块"></a>有let的区块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // TDZ开始，因为下面出现了let tmp，所以let以上的语句出现暂时性死区</div><div class="line">  tmp = &apos;abc&apos;; // ReferenceError</div><div class="line">  console.log(tmp); // ReferenceError</div><div class="line"></div><div class="line">  let tmp; // TDZ结束，let tmp以下的语句没有暂时性死区，因为这里let tmp没有赋值，所以下面报undefined的错</div><div class="line">  console.log(tmp); // undefined</div><div class="line"></div><div class="line">  tmp = 123;</div><div class="line">  console.log(tmp); // 123</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof也会报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  typeof test; //ReferenceError: test is not defined</div><div class="line">  let test = 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="隐蔽的暂时性死区"><a href="#隐蔽的暂时性死区" class="headerlink" title="隐蔽的暂时性死区"></a>隐蔽的暂时性死区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function bar(x = y,y = 2)&#123;</div><div class="line">    return [x,y]</div><div class="line">&#125;</div><div class="line">bar(); //ReferenceError: y is not defined</div></pre></td></tr></table></figure>
<h1 id="在块级作用域里声明函数"><a href="#在块级作用域里声明函数" class="headerlink" title="在块级作用域里声明函数"></a>在块级作用域里声明函数</h1><h2 id="ES5严格模式下-非严格模式下不会报错"><a href="#ES5严格模式下-非严格模式下不会报错" class="headerlink" title="ES5严格模式下(非严格模式下不会报错)"></a>ES5严格模式下(非严格模式下不会报错)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">if (true)&#123;</div><div class="line">    function test()&#123;console.log(&apos;test&apos;)&#125;</div><div class="line">&#125;</div><div class="line">test();  //ReferenceError:test is not defined</div></pre></td></tr></table></figure>
<h2 id="ES6允许在块级作用域声明函数"><a href="#ES6允许在块级作用域声明函数" class="headerlink" title="ES6允许在块级作用域声明函数"></a>ES6允许在块级作用域声明函数</h2><h3 id="非严格模式"><a href="#非严格模式" class="headerlink" title="非严格模式"></a>非严格模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  function test() &#123;console.log(&apos;test&apos;)&#125;</div><div class="line">&#125;</div><div class="line">test(); //结果为test</div></pre></td></tr></table></figure>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>不用var、let、const定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">if (true) &#123;</div><div class="line">  function test() &#123;console.log(&apos;test&apos;)&#125; //由于function没有加var、let、const定义，所以此函数的作用域是全局的</div><div class="line">&#125;</div><div class="line">test() //结果为test</div></pre></td></tr></table></figure></p>
<p>var:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">if (true)&#123;</div><div class="line">    var test = function()&#123;console.log(&apos;test&apos;)&#125; //由于function是用var定义的，所以此函数是当前function作用域，此处为global</div><div class="line">&#125;</div><div class="line">test() //结果为test</div></pre></td></tr></table></figure></p>
<p>let或者const：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">if (true)&#123;</div><div class="line">    let test = function()&#123;console.log(&apos;test&apos;)&#125; //由于function是用let定义的，所以此函数是当前块级作用域，即是&#123;&#125;包括的区域，离开之后变量被销毁</div><div class="line">&#125;</div><div class="line">test() //结果为ReferenceError: test is not defined</div></pre></td></tr></table></figure></p>
<h1 id="const定义常量"><a href="#const定义常量" class="headerlink" title="const定义常量"></a>const定义常量</h1><h2 id="不可以重新赋值"><a href="#不可以重新赋值" class="headerlink" title="不可以重新赋值"></a>不可以重新赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const test = 1;</div><div class="line">test = 0; //TypeError: Assignment to constant variable.</div></pre></td></tr></table></figure>
<h2 id="一旦定义就必须初始化"><a href="#一旦定义就必须初始化" class="headerlink" title="一旦定义就必须初始化"></a>一旦定义就必须初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const test; //SyntaxError: Missing initializer in const declaration</div></pre></td></tr></table></figure>
<h2 id="const定义的地址不能改变，但是内容可以改变"><a href="#const定义的地址不能改变，但是内容可以改变" class="headerlink" title="const定义的地址不能改变，但是内容可以改变"></a>const定义的地址不能改变，但是内容可以改变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const test = [];</div><div class="line">test.push(&apos;test&apos;);</div><div class="line">console.log(test); //[&apos;test&apos;]</div></pre></td></tr></table></figure>
<h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><h2 id="有暂时性死区"><a href="#有暂时性死区" class="headerlink" title="有暂时性死区"></a>有暂时性死区</h2><h2 id="作用在块级作用域-1"><a href="#作用在块级作用域-1" class="headerlink" title="作用在块级作用域"></a>作用在块级作用域</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用let，不会造成变量提升&quot;&gt;&lt;a href=&quot;#使用let，不会造成变量提升&quot; class=&quot;headerlink&quot; title=&quot;使用let，不会造成变量提升&quot;&gt;&lt;/a&gt;使用let，不会造成变量提升&lt;/h1&gt;&lt;h2 id=&quot;ES5&quot;&gt;&lt;a href=&quot;#ES
    
    </summary>
    
    
      <category term="ES6" scheme="https://chanran.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>2017年初寒假学习计划</title>
    <link href="https://chanran.github.io/2017/01/05/holiday-plan/"/>
    <id>https://chanran.github.io/2017/01/05/holiday-plan/</id>
    <published>2017-01-05T09:44:45.000Z</published>
    <updated>2017-01-05T13:25:43.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过一次实习，两次面试，一次UC RED前端实习，一次UC头条的笔试+面试（被刷了），一次杭州手机淘宝的电话面试（目前等待消息），都是说明了我自己的一个弊端，没有静下心来学习和研读书籍，实战能力必然重要，但是基础也不可忽视。我对此的看法是，一个没有基础的实战能力强的工程师A和一个基础很扎实但是实战能力不怎么样的工程师B，做1个项目的时候，大多情况下都是实战能力强的A完成得更出色；但是对于做100个项目的时候，不重视基础的工程A会吃大亏，由于基础不牢，走的弯路多，开发时间延长，造成项目延期，项目规划不当，而基础很扎实的工程师在100个项目的前几个项目里虽然碰了壁，但是由于基础扎实，学习起来也很快，于是很快地获得了强悍的实战能力，之后的项目也就游刃有余。</p>
<p>其实在这里我只是针对在校学生来说，毕竟外面公司还是干活的时间多，学习的时间少。基础不扎实出去工作之后就得用业余时间拼命补基础。在校学生时间多，可以又更多时间来打基础，研究新东西。</p>
<p>感谢<a href="https://github.com/Lapsec" target="_blank" rel="external">晓升师兄</a>的督促和期待，于是有了这篇计划。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><strong>成为一个合格的前端工程师</strong></p>
<h1 id="列出任务-由浅入深"><a href="#列出任务-由浅入深" class="headerlink" title="列出任务(由浅入深)"></a>列出任务(由浅入深)</h1><ol>
<li><p>html,css,html5,css3,js基础</p>
</li>
<li><p>动画基础(css3,canvas,svg,webGL)</p>
</li>
<li><p>ES6</p>
</li>
<li><p>React全家桶(React+Redux+React-Router)</p>
</li>
<li><p>nodejs(express,koajs)</p>
</li>
<li><p>React全家桶+nodejs项目经验</p>
</li>
<li><p>前端安全(csrf,xss)</p>
</li>
<li><p>算法基础</p>
</li>
<li><p>笔试、面试题</p>
</li>
</ol>
<h1 id="可用时间"><a href="#可用时间" class="headerlink" title="可用时间"></a>可用时间</h1><p><strong>2017-01-06 —— 2017-02-18</strong>,共<strong>44</strong>天</p>
<p>当然肯定不会是全部时间用来学习和打码，但是我要做的是保持每天都有学习和打码。</p>
<h1 id="详细计划-每完成一个任务就划掉"><a href="#详细计划-每完成一个任务就划掉" class="headerlink" title="详细计划(每完成一个任务就划掉)"></a>详细计划(每完成一个任务就<del>划掉</del>)</h1><h2 id="100天动画计划"><a href="#100天动画计划" class="headerlink" title="100天动画计划"></a>100天动画计划</h2><p><a href="https://github.com/Chanran/someAnimations/tree/master/100DaysAnimation" target="_blank" rel="external">100天动画代码</a></p>
<ol>
<li><p>每天1个小时来写动画，不限语言(css3,canvas,svg,webGL)</p>
</li>
<li><p>每天1个小时来研读动画的书籍，例如《HTML5 Canvas核心技术:图形、动画与游戏开发》</p>
</li>
</ol>
<h2 id="html-css-js基础计划"><a href="#html-css-js基础计划" class="headerlink" title="html,css,js基础计划"></a>html,css,js基础计划</h2><ol>
<li><p>每天2个小时来读《图解css3》《javascript高级程序设计》等书（看html,css,javascript文档也算）</p>
</li>
<li><p>每天0.5个小时来编码</p>
</li>
</ol>
<h2 id="每天懂一点前端安全"><a href="#每天懂一点前端安全" class="headerlink" title="每天懂一点前端安全"></a>每天懂一点前端安全</h2><ol>
<li><p>《白帽子将Web安全》xss的内容</p>
</li>
<li><p>实战csrf,xss</p>
</li>
</ol>
<h2 id="每三天1道算法题-华农OJ"><a href="#每三天1道算法题-华农OJ" class="headerlink" title="每三天1道算法题(华农OJ)"></a>每三天1道算法题(华农OJ)</h2><h2 id="每天刷10道笔试题-牛客网的APP等"><a href="#每天刷10道笔试题-牛客网的APP等" class="headerlink" title="每天刷10道笔试题(牛客网的APP等)"></a>每天刷10道笔试题(牛客网的APP等)</h2><h2 id="5天-ES6"><a href="#5天-ES6" class="headerlink" title="5天 ES6"></a>5天 ES6</h2><blockquote>
<p>由于之前用过ES6的特性写过一个小东西，时间可以减到4天</p>
</blockquote>
<ol>
<li><p>主要是看阮一峰的<a href="es6.ruanyifeng.com">《ES6标准入门》</a></p>
</li>
<li><p>每看一章内容就写一篇总结博客</p>
</li>
<li><p>如果有感悟的话另外写篇博客</p>
</li>
</ol>
<h2 id="7天-React-Redux-React-Router"><a href="#7天-React-Redux-React-Router" class="headerlink" title="7天 React+Redux+React-Router"></a>7天 React+Redux+React-Router</h2><blockquote>
<p>由于之前一直有在youtube看react tutorial的视频，时间可以减到7天</p>
</blockquote>
<ol>
<li><p>看完youtube的react tutorial。</p>
</li>
<li><p>写一个react博客小demo</p>
</li>
<li><p>研读《深入React技术栈》</p>
</li>
</ol>
<h2 id="32天-项目实战"><a href="#32天-项目实战" class="headerlink" title="32天 项目实战"></a>32天 项目实战</h2><blockquote>
<p>用react+redux+express+webpack+mysql技术栈重写捅奶牛(当然不是我自己一个人~)，早就已经有了想法，只不过由于现在学校查课类的应用太多，形势严峻，需要另辟蹊径，寻找出路。</p>
</blockquote>
<ol>
<li><p>项目规划(1天)</p>
</li>
<li><p>数据库设计(1天)</p>
</li>
<li><p>搭建项目架构(2天)</p>
</li>
<li><p>分拆模块任务(0.5天)</p>
</li>
<li><p>项目会议(0.5天)</p>
</li>
<li><p>编码(20天)</p>
</li>
<li><p>测试(2天)</p>
</li>
<li><p>上线(0.5天)</p>
</li>
<li><p>内测(4.5天)</p>
</li>
<li><p>公测</p>
</li>
<li><p>维护</p>
</li>
</ol>
<blockquote>
<p>这个只是初步的项目计划，后面几天会继续完善</p>
</blockquote>
<h1 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;经过一次实习，两次面试，一次UC RED前端实习，一次UC头条的笔试+面试（被刷了），一次杭州手机淘宝的电话面试（目前等待消息），都是说明了
    
    </summary>
    
    
      <category term="计划" scheme="https://chanran.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>01背包的三种算法(动态规划，贪心，回溯)</title>
    <link href="https://chanran.github.io/2016/12/31/01package-algorithm/"/>
    <id>https://chanran.github.io/2016/12/31/01package-algorithm/</id>
    <published>2016-12-31T14:16:23.000Z</published>
    <updated>2016-12-31T14:21:39.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>对比01背包三种算法的执行时间，找出最优解或者更优解。</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 01背包动态规划</div><div class="line"> */</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">long max(long a,long b)  &#123;</div><div class="line">    if(a&gt;b)&#123;</div><div class="line">        return a;</div><div class="line">    &#125;</div><div class="line">    return b;</div><div class="line">&#125;</div><div class="line">long min(long a,long b)  &#123;</div><div class="line">    if(a&lt;b)&#123;</div><div class="line">        return a;</div><div class="line">    &#125;</div><div class="line">    return b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Traceback(long w[],long n,long C,long** m)&#123;</div><div class="line">    long* x = new long[n+1];</div><div class="line">    for (long i = 1; i &lt; n; i++)&#123;</div><div class="line">        if (m[i][C] == m[i+1][C])&#123;</div><div class="line">            x[i] = 0;</div><div class="line">        &#125;else&#123;</div><div class="line">            x[i] = 1;</div><div class="line">            C-= w[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    x[n] = (m[n][C])?1:0;</div><div class="line">    cout &lt;&lt; &quot;最优解：&quot; &lt;&lt; endl;</div><div class="line">    for (long i = 1; i &lt;= n; i++)&#123;</div><div class="line">        cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; x[i] &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;========== 结束 ============&quot; &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void knapsack(long w[],long v[],long n,long C,long** m)&#123;  //01背包，动态规划</div><div class="line">    cout &lt;&lt; &quot;========== 01背包的动态规划方法 ============&quot; &lt;&lt; endl;</div><div class="line">    long jMax = min(w[n]-1,C);</div><div class="line">    for (long j = 0;j &lt;= jMax; j++)&#123;</div><div class="line">        m[n][j] = 0;</div><div class="line">    &#125;</div><div class="line">    for (long j = w[n];j &lt;= C; j++)&#123;</div><div class="line">        m[n][j] = v[n];</div><div class="line">    &#125;</div><div class="line">    for (long i = n - 1; i &gt; 1; i--)&#123;</div><div class="line">        jMax = min(w[i]-1,C);</div><div class="line">        for (long j = 0; j &lt;= jMax; j++)&#123;</div><div class="line">            m[i][j] = m[i+1][j];</div><div class="line">        &#125;</div><div class="line">        for (long j = w[i]; j &lt;= C; j++)&#123;</div><div class="line">            m[i][j] = max(m[i+1][j],m[i+1][j-w[i]]+v[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    m[1][C] = m[2][C];</div><div class="line">    if (C &gt;= w[1])&#123;</div><div class="line">        m[1][C] = max(m[1][C],m[2][C-w[1]]+v[1]);</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;背包可以装的最大价值为：&quot; &lt;&lt; m[1][C] &lt;&lt; endl;</div><div class="line">    Traceback(w,n,C,m); //打印最优解</div><div class="line">    delete[] m;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    clock_t start, finish; /* 精确到 ms(毫秒)级的时间*/</div><div class="line">    double duration; /*测量一个事件持续的时间*/</div><div class="line">    start = clock();</div><div class="line">    long i,n,C,count;</div><div class="line">    ifstream in;</div><div class="line">    long *w,*v; //物品重量和价值数组</div><div class="line">    long wIndex,vIndex; //物品重量和价值数组的下标</div><div class="line"></div><div class="line">    long tmp; //读取用的暂存变量</div><div class="line">    in.open(&quot;test.txt&quot;,ios::in|ios::binary);</div><div class="line">    if (!in.is_open())&#123;</div><div class="line">        cout &lt;&lt; &quot;open file error&quot; &lt;&lt; endl;</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    C = tmp;    //背包容量</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    n = tmp;    //物品个数</div><div class="line">    w = new long[n+1]; //物品重量数组</div><div class="line">    v = new long[n+1]; //物品价值数组</div><div class="line"></div><div class="line">    wIndex = 1;</div><div class="line">    vIndex = 1;</div><div class="line">    count =  1;</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">    while(!in.eof())&#123;</div><div class="line">        if(count % 2 != 0)&#123;</div><div class="line">            w[wIndex] = tmp;</div><div class="line">            wIndex++;</div><div class="line">        &#125;else&#123;</div><div class="line">            v[vIndex] = tmp;</div><div class="line">            vIndex++;</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">        in &gt;&gt; tmp;</div><div class="line">    &#125;</div><div class="line">    v[vIndex] = tmp;</div><div class="line"></div><div class="line">    long** m  = new long*[n+1];</div><div class="line">    for (i = 0; i &lt;= n; i++)&#123;</div><div class="line">        m[i] = new long[C+1];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    knapsack(w,v,n,C,m); //调用动态规划法求最优值和最优解</div><div class="line"></div><div class="line">    in.close();</div><div class="line">    delete []w;</div><div class="line">    delete []v;</div><div class="line"></div><div class="line">    /*程序运行时间*/</div><div class="line">    finish = clock();</div><div class="line">    duration = (double)(finish - start) / CLOCKS_PER_SEC;</div><div class="line">    printf( &quot;%f seconds\n&quot;, duration ); /*此 duration 单位为秒*/</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 01背包贪心法</div><div class="line"> */</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void Traceback(long* index,long ww[],long vv[],long n,long C)&#123;</div><div class="line">    long cw = 0; //当前重量</div><div class="line">    long cv = 0; //当前价值</div><div class="line">    long maxv = 0; //最大价值</div><div class="line">    long i = 0;</div><div class="line">    long* indexindex = new long[n]; //物品是否放入背包</div><div class="line"></div><div class="line">    while(i &gt;= 0)&#123;</div><div class="line">        indexindex[i] = 0;</div><div class="line">        if(cw + ww[i] &lt; C)&#123;</div><div class="line">            cw += ww[i];</div><div class="line">            cv += vv[i];</div><div class="line">            indexindex[index[i]] = 1;</div><div class="line">            i++;</div><div class="line">        &#125;else&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;========= 01背包贪心法 ==========&quot; &lt;&lt; endl;</div><div class="line">    if(i &lt; n)&#123;</div><div class="line">        maxv = cv;</div><div class="line">        cout &lt;&lt; &quot;最优值：&quot; &lt;&lt; maxv &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;最优解：&quot;&lt;&lt; endl;</div><div class="line">    for(i = 0; i &lt; n; i++)&#123;</div><div class="line">        cout &lt;&lt; i+1 &lt;&lt; &quot; &quot; &lt;&lt; indexindex[i] &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cout &lt;&lt; &quot;======== END =============&quot; &lt;&lt; endl;</div><div class="line">    delete[] indexindex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Knapsack(long n,long C,long v[],long w[])&#123;</div><div class="line">    double* r = new double[n];</div><div class="line">    long* index = new long[n];</div><div class="line"></div><div class="line">    for(int i = 0; i &lt; n; i++)&#123;</div><div class="line">        r[i] = (double)v[i]/(double)w[i];</div><div class="line">        index[i] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //单位重量价值r[i] = v[i]/w[i]降序排序</div><div class="line">    for(long i = 0; i &lt;= n; i++)&#123;</div><div class="line">        for(long j = i</div><div class="line">                     + 1; j &lt; n; j++)&#123;</div><div class="line">            if(r[i] &lt; r[j])&#123;</div><div class="line">                swap(r[i],r[j]);</div><div class="line">                swap(index[i],index[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    long* ww = new long[n];</div><div class="line">    long* vv = new long[n];</div><div class="line">    for (long i = 0; i &lt; n; i++)&#123;</div><div class="line">        ww[i] = w[index[i]];</div><div class="line">        vv[i] = v[index[i]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Traceback(index,ww,vv,n,C);</div><div class="line"></div><div class="line">    delete[] r;</div><div class="line">    delete[] index;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    clock_t start, finish; /* 精确到 ms(毫秒)级的时间*/</div><div class="line">    double duration; /*测量一个事件持续的时间*/</div><div class="line">    start = clock();</div><div class="line">    long i,n,C,count;</div><div class="line">    ifstream in;</div><div class="line">    long *w,*v; //物品重量和价值数组</div><div class="line">    long wIndex,vIndex; //物品重量和价值数组的下标</div><div class="line"></div><div class="line">    long tmp; //读取用的暂存变量</div><div class="line">    in.open(&quot;test.txt&quot;,ios::in|ios::binary);</div><div class="line">    if (!in.is_open())&#123;</div><div class="line">        cout &lt;&lt; &quot;open file error&quot; &lt;&lt; endl;</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    C = tmp;    //背包容量</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    n = tmp;    //物品个数</div><div class="line">    w = new long[n+1]; //物品重量数组</div><div class="line">    v = new long[n+1]; //物品价值数组</div><div class="line"></div><div class="line">    wIndex = 1;</div><div class="line">    vIndex = 1;</div><div class="line">    count =  1;</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">    while(!in.eof())&#123;</div><div class="line">        if(count % 2 != 0)&#123;</div><div class="line">            w[wIndex] = tmp;</div><div class="line">            wIndex++;</div><div class="line">        &#125;else&#123;</div><div class="line">            v[vIndex] = tmp;</div><div class="line">            vIndex++;</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">        in &gt;&gt; tmp;</div><div class="line">    &#125;</div><div class="line">    v[vIndex] = tmp;</div><div class="line"></div><div class="line">    long** m  = new long*[n+1];</div><div class="line">    for (i = 0; i &lt;= n; i++)&#123;</div><div class="line">        m[i] = new long[C+1];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Knapsack(n,C,v,w);</div><div class="line"></div><div class="line">    in.close(); //关闭文件</div><div class="line">    delete []w; //释放w</div><div class="line">    delete []v; //释放v</div><div class="line"></div><div class="line">    /*程序运行时间*/</div><div class="line">    finish = clock();</div><div class="line">    duration = (double)(finish - start) / CLOCKS_PER_SEC;</div><div class="line">    printf( &quot;%f seconds\n&quot;, duration ); /*此 duration 单位为秒*/</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 01背包贪心法</div><div class="line"> */</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class Knap &#123;</div><div class="line">    friend long Knapsack(long v[], long w[], long c, long n);</div><div class="line">public:</div><div class="line"></div><div class="line">    void print() &#123;</div><div class="line">        long* indexindex = new long[n];</div><div class="line">        cout &lt;&lt;  &quot;最优解:&quot; &lt;&lt; endl;</div><div class="line">        for (long j = 1; j &lt;= n; j++) &#123;</div><div class="line">            indexindex[j-1] = 0;</div><div class="line">            if (bestx[j] == 1)&#123;</div><div class="line">                indexindex[index[j-1]] = 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (long j = 0; j &lt; n; j++)&#123;</div><div class="line">            cout &lt;&lt; j+1 &lt;&lt; &quot; &quot; &lt;&lt; indexindex[j] &lt;&lt; endl;</div><div class="line">        &#125;</div><div class="line">        cout &lt;&lt; endl;</div><div class="line">        cout &lt;&lt; &quot;最优值：&quot;;</div><div class="line">    &#125;;</div><div class="line">private:</div><div class="line"></div><div class="line">    long Bound(long i);</div><div class="line">    void Backtrack(long i);</div><div class="line">    long c;//背包容量</div><div class="line">    long n; //物品数</div><div class="line">    long *w;//物品重量数组</div><div class="line">    long *v;//物品价值数组</div><div class="line">    long cw;//当前重量</div><div class="line">    long cv;//当前价值</div><div class="line">    long bestv;//当前最优值</div><div class="line">    long *bestx;//当前最优解</div><div class="line">    long *index;//坐标变换数组</div><div class="line">    long *x;//当前解</div><div class="line">&#125;;</div><div class="line"></div><div class="line">long Knap::Bound(long i) &#123;</div><div class="line">    //计算上界</div><div class="line">    long cleft = c - cw;//剩余容量</div><div class="line">    long b = cv;</div><div class="line">    //以物品单位重量价值递减序装入物品</div><div class="line">    while (i &lt;= n &amp;&amp; w[i] &lt;= cleft) &#123;</div><div class="line">        cleft -= w[i];</div><div class="line">        b += v[i];</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    //装满背包</div><div class="line">    if (i &lt;= n)</div><div class="line">        b += v[i] * cleft / w[i];</div><div class="line">    return b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Knap::Backtrack(long i) &#123;</div><div class="line">    if (i &gt; n) &#123; //到达叶子节点</div><div class="line">        if (bestv &lt; cv) &#123;</div><div class="line">            for (long j = 1; j &lt;= n; j++)</div><div class="line">                bestx[j] = x[j];</div><div class="line">            bestv = cv;</div><div class="line">        &#125;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (cw + w[i] &lt;= c) &#123;   //搜索左子树</div><div class="line">        x[i] = 1;</div><div class="line">        cw += w[i];</div><div class="line">        cv += v[i];</div><div class="line">        Backtrack(i + 1);</div><div class="line">        cw -= w[i];</div><div class="line">        cv -= v[i];</div><div class="line">    &#125;</div><div class="line">    if (Bound(i + 1) &gt; bestv)&#123;  //搜索右子树</div><div class="line">        x[i] = 0;</div><div class="line">        Backtrack(i + 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class Object &#123;</div><div class="line"></div><div class="line">    friend long Knapsack(long* v, long* w, long C, long n);</div><div class="line"></div><div class="line">public:</div><div class="line"></div><div class="line">    long operator&lt;=(Object a) const &#123;</div><div class="line">        return (d &gt;= a.d);</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    long ID;</div><div class="line">    double d;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void Sort(Object *Q,long len,long *index) &#123;</div><div class="line">    for(long i=0;i&lt;len;i++)</div><div class="line">        for(long j=0;j&lt;len;j++)</div><div class="line">            if(Q[i]&lt;=Q[j]) &#123;</div><div class="line">                Object temp=Q[i];</div><div class="line">                Q[i]=Q[j];</div><div class="line">                Q[j]=temp;</div><div class="line"></div><div class="line">                long tmp = index[i];</div><div class="line">                index[i] = index[j];</div><div class="line">                index[j] = tmp;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">long Knapsack(long* v, long* w, long C, long n) &#123;</div><div class="line">    //为Knap::Backtrack初始化</div><div class="line">    long W = 0;</div><div class="line">    long V = 0;</div><div class="line">    long i = 1;</div><div class="line">    Object *Q = new Object[n];</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        Q[i - 1].ID = i;</div><div class="line">        Q[i - 1].d = 1.0 * v[i] / w[i];</div><div class="line">        V += v[i];</div><div class="line">        W += w[i];</div><div class="line">    &#125;</div><div class="line">    if (W &lt;= C)</div><div class="line">        return V;//装入所有物品</div><div class="line"></div><div class="line">    Knap K; //实例化Knap</div><div class="line"></div><div class="line">    //依物品单位重量排序</div><div class="line">    K.index = new long[n];</div><div class="line">    for(long j = 0; j &lt; n; j++)&#123;   //初始化下标数组，交换的时候记录坐标变换</div><div class="line">        K.index[j] = j;</div><div class="line">    &#125;</div><div class="line">    Sort(Q,n,K.index);  //排序</div><div class="line"></div><div class="line">    K.v = new long[n + 1];</div><div class="line">    K.w = new long[n + 1];</div><div class="line">    K.x = new long[n + 1];</div><div class="line">    K.bestx = new long[n + 1];</div><div class="line">    K.x[0] = 0;</div><div class="line">    K.bestx[0] = 0;</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        K.v[i] = v[Q[i - 1].ID];</div><div class="line">        K.w[i] = w[Q[i - 1].ID];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    K.cv = 0;</div><div class="line">    K.cw = 0;</div><div class="line">    K.c = C;</div><div class="line">    K.n = n;</div><div class="line">    K.bestv = 0;</div><div class="line">    //回溯搜索</div><div class="line">    K.Backtrack(1);</div><div class="line">    K.print();</div><div class="line">    delete[] Q;</div><div class="line">    delete[] K.w;</div><div class="line">    delete[] K.v;</div><div class="line">    return K.bestv;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    clock_t start, finish; /* 精确到 ms(毫秒)级的时间*/</div><div class="line">    double duration; /*测量一个事件持续的时间*/</div><div class="line">    start = clock();</div><div class="line">    long i, n, C, count;</div><div class="line">    ifstream in;</div><div class="line">    long *w, *v; //物品重量和价值数组</div><div class="line">    long wIndex, vIndex; //物品重量和价值数组的下标</div><div class="line"></div><div class="line">    long tmp; //读取用的暂存变量</div><div class="line">    in.open(&quot;test.txt&quot;, ios::in | ios::binary);</div><div class="line">    if (!in.is_open()) &#123;</div><div class="line">        cout &lt;&lt; &quot;open file error&quot; &lt;&lt; endl;</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    C = tmp;    //背包容量</div><div class="line"></div><div class="line">    in &gt;&gt; tmp;  //每次读入一个long型数据</div><div class="line">    n = tmp;    //物品个数</div><div class="line">    w = new long[n + 1]; //物品重量数组</div><div class="line">    v = new long[n + 1]; //物品价值数组</div><div class="line"></div><div class="line">    wIndex = 1;</div><div class="line">    vIndex = 1;</div><div class="line">    count = 1;</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">    while (!in.eof()) &#123;</div><div class="line">        if (count % 2 != 0) &#123;</div><div class="line">            w[wIndex] = tmp;</div><div class="line">            wIndex++;</div><div class="line">        &#125; else &#123;</div><div class="line">            v[vIndex] = tmp;</div><div class="line">            vIndex++;</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">        in &gt;&gt; tmp;</div><div class="line">    &#125;</div><div class="line">    v[vIndex] = tmp;</div><div class="line"></div><div class="line">    long **m = new long *[n + 1];</div><div class="line">    for (i = 0; i &lt;= n; i++) &#123;</div><div class="line">        m[i] = new long[C + 1];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cout &lt;&lt; Knapsack(v, w, C, n) &lt;&lt; endl;</div><div class="line"></div><div class="line">    in.close(); //关闭文件</div><div class="line">    delete[]w; //释放w</div><div class="line">    delete[]v; //释放v</div><div class="line"></div><div class="line">    /*程序运行时间*/</div><div class="line">    finish = clock();</div><div class="line">    duration = (double) (finish - start) / CLOCKS_PER_SEC;</div><div class="line">    printf(&quot;%f seconds\n&quot;, duration); /*此 duration 单位为秒*/</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;对比01背包三种算法的执行时间，找出最优解或者更优解。&lt;/p&gt;
&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;h
    
    </summary>
    
    
      <category term="算法" scheme="https://chanran.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ ifstream.eof()的一个小问题</title>
    <link href="https://chanran.github.io/2016/12/30/C-ifstream-eof/"/>
    <id>https://chanran.github.io/2016/12/30/C-ifstream-eof/</id>
    <published>2016-12-30T09:40:24.000Z</published>
    <updated>2016-12-30T10:10:16.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">while(!in.eof())&#123;</div><div class="line">    in &gt;&gt; tmp; //in是ifstream的对象</div><div class="line">    cout &lt;&lt; &quot;temp:&quot; &lt;&lt; tmp &lt;&lt; endl;</div><div class="line">    if(count % 2 != 0)&#123;</div><div class="line">        w[wIndex] = tmp;</div><div class="line">        wIndex++;</div><div class="line">    &#125;else&#123;</div><div class="line">        v[vIndex] = tmp;</div><div class="line">        vIndex++;</div><div class="line">    &#125;</div><div class="line">    count++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里出来的结果是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">temp:26</div><div class="line">...</div><div class="line">...</div><div class="line">temp:83</div><div class="line">temp:17</div><div class="line">temp:48  //这个是文件结尾最后一个数</div><div class="line">temp:48  //但是这里却出现了两次，证明有错（有些编译器会报错）</div></pre></td></tr></table></figure>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>在循环之前先读入一个数据</li>
<li>把读取数据的操作放在循环的最后</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">in &gt;&gt; tmp;</div><div class="line">while(!in.eof())&#123;</div><div class="line">    cout &lt;&lt; &quot;temp:&quot; &lt;&lt; tmp &lt;&lt; endl;</div><div class="line">    if(count % 2 != 0)&#123;</div><div class="line">        w[wIndex] = tmp;</div><div class="line">        wIndex++;</div><div class="line">    &#125;else&#123;</div><div class="line">        v[vIndex] = tmp;</div><div class="line">        vIndex++;</div><div class="line">    &#125;</div><div class="line">    count++;</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>这是因为判断文件是否结束的eof()函数是根据读入的字符判断的</p>
<p>比如：假定文件后面是<code>17 48 文件结束标志</code> 3个数据（假设是最后的三个数据），现在已经读到48（<code>in &gt;&gt; tmp</code>已经执行），到<code>!in.eof()</code>的时候，因为读入的不是文件结束标志，所以循环继续，再一次执行<code>in &gt;&gt; tmp</code>，读取的时候文件结束标记，如果后面还有一些操作包含这个<strong>tmp</strong>的话，有可能会报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while(!in.eof())&#123;</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">    //这里下面还有各种操作blabla</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">in &gt;&gt; tmp;</div><div class="line">while(!in.eof())&#123;</div><div class="line">    //这里下面还有各种操作blabla</div><div class="line">    in &gt;&gt; tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样最后执行<code>in &gt;&gt; tmp</code>的时候就会读到文件结束标记，然后刚好有<code>!in.eof()</code>判断。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>17103 基站建设</title>
    <link href="https://chanran.github.io/2016/12/24/baseStation/"/>
    <id>https://chanran.github.io/2016/12/24/baseStation/</id>
    <published>2016-12-24T07:09:55.000Z</published>
    <updated>2016-12-24T07:15:52.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>一条很长的乡村公路（我们可以想象这条公路是一条长线段，有一个西端点和一个东端点），公路旁稀疏的分布着一些房子。<br>我们把公路的西端点固定在坐标0上，东端点为某远处。</p>
<p>假设这些房子的居民都使用蜂窝移动电话，现在需要把移动电话基站放在这条路旁的某些点上，使得每个房子都在其中一个<br>基站4公里之内。</p>
<p>注意：房子和基站都建立在公路旁而不远离公路，即可以认为房子和基站都是公路直线上的点。</p>
<p>给出一个有效算法，使得用尽可能少的基站来实现这个目标。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行，房子的数量n （n&lt;=100000）</p>
<p>第二行，房子分布的位置：h1 h2 … hn</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>最少的基站数量，所有房子都能覆盖在某个基站之下（基站的有效距离为4公里）。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>6</p>
<p>1 12 8 3 4 15</p>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>2</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>此题比较简单。<br>（1）先将房子分布的位置进行排序。<br>（2）从左到右考虑基站安置的位置，要使得基站数最少，又要所有居民房子都被基站4km范围内覆<br>盖到，因此如果某个房子不在你当前安置的基站4km的距离内，那就最大距离4km的覆盖，这样基站<br>数最少。所以我们的策略是：将下一个基站安置在当前那个不在覆盖范围内房子向东4km远的距离。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void swap(int &amp;a,int &amp; b)&#123;</div><div class="line">    int temp = a;</div><div class="line">    a = b;</div><div class="line">    b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    int n;</div><div class="line">    int i,j;</div><div class="line">    int count = 1,base;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    int* house = new int[n];</div><div class="line">    for (i = 0; i &lt; n; i++)&#123;</div><div class="line">        cin &gt;&gt; house[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; n-1; i++)&#123;</div><div class="line">        for (j = i + 1; j &lt; n; j++)&#123;</div><div class="line">            if (house[i] &gt; house[j])&#123;</div><div class="line">                swap(house[i],house[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    base = house[0] + 4;</div><div class="line">    for(i = 1; i &lt; n; i++)&#123;</div><div class="line">        if (base &lt; house[i] - 4)&#123;</div><div class="line">            count++;</div><div class="line">            base = house[i] + 4;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cout &lt;&lt; count &lt;&lt; endl;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="算法" scheme="https://chanran.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>8595 钱币组合的问题</title>
    <link href="https://chanran.github.io/2016/12/23/moneyGroup/"/>
    <id>https://chanran.github.io/2016/12/23/moneyGroup/</id>
    <published>2016-12-23T07:34:44.000Z</published>
    <updated>2016-12-23T07:38:55.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>设有n种不同的钱币各若干，可用这n种钱币产生许多不同的面值。</p>
<p>如给定面值7分，有1分3张，2分3张，5分1张，能组成给定面值7分的方法有如下4种：</p>
<p>3个1分+2个2分；   5个；</p>
<p>1个1分+3个2分；   4个；</p>
<p>2个1分+1个5分；   3个；</p>
<p>1个2分+1个5分；   2个。</p>
<p>上面4种方案的最少张数为2个。</p>
<p>你的编程任务：给定面值m，和n种不同面值钱币及其张数，</p>
<p>（1） 求给定面值m能有多少种不同的构成方法数。</p>
<p>（2） 求给定面值m最少要多少张。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第1行有1个正整数n(1&lt;=n&lt;=50)，表示有n种不同的钱币<br>。<br>第2行有n个数，分别表示每种钱币的面值v[1]…v<a href="0&lt;=v[i]&lt;=100,1&lt;=i&lt;=n">n</a>。</p>
<p>第3行有n个数，分别表示每种钱币的张数k[1]…k<a href="0&lt;=k[i]&lt;=100,1&lt;=i&lt;=n">n</a>。</p>
<p>第4行有1个数，表示给定的面值m (1&lt;=m&lt;=20000)。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>两行：</p>
<p>第一行：计算出给定面值的不同的方法种数。若无法给出找钱方案，返回0数值。</p>
<p>第二行：计算出给定面值所需的最少张数。若无法给出找钱方案，返回“no possible”(无大写，无标点)。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>3</p>
<p>1 2 5</p>
<p>3 3 1</p>
<p>7</p>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>4</p>
<p>2</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">（1）给定面值m的不同方法种数</div><div class="line"></div><div class="line">给定的总面值m，n种钱币，每种钱币面值v[1...n],每种钱币的张数k[1...n]，</div><div class="line">用一个二维数组d[i][1...m]记录用前i种钱币组成1...m面值产生的方法数。1&lt;=i&lt;=n。</div><div class="line">初始，该数组全清零，然后逐个加入第i种面值的钱币（1&lt;=i&lt;=n），并修改影响到数组d的方法数。</div><div class="line"></div><div class="line">设d[i,j]:表示前i种钱币组成面值j分的方法数，1&lt;=i&lt;=n,0&lt;=j&lt;=m。(j&gt;=0才有意义，若j&lt;0,可视为d[i,j]=0)</div><div class="line">d[i,0] = 1,  if 1&lt;=i&lt;=n</div><div class="line">d[1,j] = 1,  if j%v[1]=0 &amp;&amp; j/v[1]&lt;=k[1];</div><div class="line">d[1,j] = 0,  if j%v[1]!=0 || j/v[1]&gt;k[1] || j&lt;0;</div><div class="line"></div><div class="line">if i&gt;1 &amp;&amp; j &lt; v[i]</div><div class="line">d[i,j] = d[i-1,j]</div><div class="line"></div><div class="line">if i&gt;1 &amp;&amp; v[i] &lt;= j &lt; 2*v[i]</div><div class="line">d[i,j] = d[i-1,j] + d[i-1,j-v[i]]</div><div class="line"></div><div class="line">if i&gt;1 &amp;&amp; 2*v[i] &lt;= j &lt; 3*v[i]</div><div class="line">d[i,j] = d[i-1,j] + d[i-1,j-v[i]] + d[i-1,j-2*v[i]]</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">if i&gt;1 &amp;&amp; k[i]*v[i] &lt;= j &lt;= m</div><div class="line">d[i,j] = d[i-1,j] + d[i-1,j-1*v[i]] + d[i-1,j-2*v[i]] + ... + d[i-1,j-k[i]*v[i]]</div><div class="line">   //这里要注意，要保证 j-k[i]*v[i]&gt;=0 才有意义，对可能的越界（无论是左边越界还是右边越界），都要仔细审查。</div><div class="line"></div><div class="line">最后d[n,m]为原问题所求。</div><div class="line"></div><div class="line">当然由于这里的d数组d[i,j]只与d[i-1,...]有关，也完全可以用一维数组d[1...m]来实现。</div><div class="line"></div><div class="line"></div><div class="line">（2）求给定面值m最少要多少张</div><div class="line"></div><div class="line">假设c[i][j]表示：选择前i种面值的钱，凑成面值j的最少张数，这里1&lt;=i&lt;=n, 0&lt;=j&lt;=m。</div><div class="line">c[i][j]的递归关系如下：</div><div class="line"></div><div class="line">令：t = min&#123; (int)(j/v[i]), k[i] &#125;，表示第i种钱币最多加入的张数。</div><div class="line">c[i][j] = min&#123; p+c[i-1][j-p*v[i]] | p from 0 to t &#125;，这里p表示第i种币值选入的张数，</div><div class="line">                                                         t表示第i种币值最多选入的张数。</div><div class="line">//这里要注意，要保证 j-p*v[i]&gt;=0 才有意义，对可能的越界（无论是左边越界还是右边越界），都要仔细审查。</div><div class="line"></div><div class="line">初始条件：</div><div class="line">c[i][0]=0, 1&lt;=i&lt;=n</div><div class="line">c[1][j]=int(j/v[1]),   if j%v[1]==0 &amp;&amp; j/v[1]&lt;=k[1]</div><div class="line">c[1][j]=MAXINT,        if j%v[1]!=0 || j/v[1]&gt;k[1]</div><div class="line">      //此处MAXINT为自定义的无穷大的数，表示没法放。</div><div class="line"></div><div class="line">最后返回c[n][m]，若c[n][m]为MAXINT，则无法找到找钱的方案。</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int *dp(int n, int *v, int *k, int m) &#123;</div><div class="line">    int i, j, o;</div><div class="line">    int *result = new int[2];</div><div class="line">    int **d = new int *[n + 1];</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        d[i] = new int[m + 1];</div><div class="line">        for (j = 0; j &lt;= m; j++) &#123;</div><div class="line">            d[i][j] = 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        for (j = 0; j &lt;= m; j++) &#123;</div><div class="line">            if (j == 0)&#123;</div><div class="line">                d[i][j] = 1;</div><div class="line">            &#125;else if(i == 1)&#123;</div><div class="line">                    if(j % v[i] == 0 &amp;&amp; j / v[i] &lt;= k[i]) &#123;</div><div class="line">                        d[i][j] = 1;</div><div class="line">                    &#125;else&#123;</div><div class="line">                        d[i][j] = 0;</div><div class="line">                    &#125;</div><div class="line">            &#125; else if (i &gt; 1) &#123;</div><div class="line">                d[i][j] = 0;</div><div class="line">                d[i][j] += d[i - 1][j];</div><div class="line">                for (o = 1; o &lt;= k[i]; o++) &#123;</div><div class="line">                    if (o * v[i] &lt;= j) &#123;</div><div class="line">                        d[i][j] += d[i - 1][j - o * v[i]];</div><div class="line">                    &#125;else&#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    result[0] = d[n][m];</div><div class="line"></div><div class="line"></div><div class="line">    int **c = new int *[n + 1];</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        c[i] = new int[m + 1];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    long long t = 1000000;</div><div class="line">    for (i = 1; i &lt;= n; i++)&#123;</div><div class="line">        for (j = 0; j &lt;= m; j++)&#123;</div><div class="line">            if (j == 0)&#123;</div><div class="line">                c[i][j] = 0;</div><div class="line">            &#125;else if(i == 1)&#123;</div><div class="line">                if (j % v[i] == 0 &amp;&amp; j/v[i] &lt;= k[i])&#123;</div><div class="line">                    c[i][j] = (int)j/v[i];</div><div class="line">                &#125;</div><div class="line">                if(j % v[i] != 0 || j/v[i] &gt; k[i])&#123;</div><div class="line">                    c[i][j] = 1000000;</div><div class="line">                &#125;</div><div class="line">            &#125;else if(i &gt; 1)&#123;</div><div class="line">                t = (int)(j/v[i])&gt; k[i]?k[i]:(int)(j/v[i]);</div><div class="line">                for (o = 0; o &lt;= t; o++)&#123;</div><div class="line">                    if (o == 0)&#123;</div><div class="line">                        c[i][j] = o+c[i-1][j-o*v[i]];</div><div class="line">                    &#125;</div><div class="line">                    if (j-o*v[i]&gt;=0) &#123;</div><div class="line">                        c[i][j] = (o + c[i - 1][j - o * v[i]]) &gt; c[i][j] ? c[i][j] : (o + c[i - 1][j - o * v[i]]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    result[1] = c[n][m];</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    int i;</div><div class="line">    int n, m;</div><div class="line">    int *result;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    int *v = new int[n + 1];</div><div class="line">    int *k = new int[n + 1];</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        cin &gt;&gt; v[i];</div><div class="line">    &#125;</div><div class="line">    for (i = 1; i &lt;= n; i++) &#123;</div><div class="line">        cin &gt;&gt; k[i];</div><div class="line">    &#125;</div><div class="line">    cin &gt;&gt; m;</div><div class="line"></div><div class="line">    result = dp(n, v, k, m);</div><div class="line"></div><div class="line">    if (result[1] == 1000000)&#123;</div><div class="line">        cout &lt;&lt; result[0] &lt;&lt; endl &lt;&lt; &quot;no possible&quot; &lt;&lt; endl;</div><div class="line">    &#125;else&#123;</div><div class="line">        cout &lt;&lt; result[0] &lt;&lt; endl &lt;&lt; result[1] &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="算法" scheme="https://chanran.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>8602 区间相交问题</title>
    <link href="https://chanran.github.io/2016/12/23/sectionIntersect/"/>
    <id>https://chanran.github.io/2016/12/23/sectionIntersect/</id>
    <published>2016-12-23T07:30:10.000Z</published>
    <updated>2016-12-24T07:20:04.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定x轴上n个闭区间，去掉尽可能少的闭区间，使剩下的闭区间都不相交。</p>
<p>注意：这里，若区间与另一区间之间仅有端点是相同的，不算做区间相交。</p>
<p>例如，[1，2]和[2，3]算是不相交区间。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个正整数n(n&lt;=50)，表示闭区间数。</p>
<p>接下来n行中，每行2个整数，表示闭区间的2个整数端点。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出去掉的最少的闭区间数。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>3</p>
<p>10 20</p>
<p>10 15</p>
<p>12 15</p>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>2</p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>这个问题基本等同于书本的活动安排问题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">typedef struct section&#123;</div><div class="line">    int start;</div><div class="line">    int end;</div><div class="line">&#125; Section;</div><div class="line"></div><div class="line">int greedySelector(Section* sectionArr,int n)&#123;</div><div class="line">    int i,j;</div><div class="line">    int count = 1;</div><div class="line">    int current = 0;</div><div class="line">    Section tmp;</div><div class="line">    int length = n;</div><div class="line">    for (i = 0; i &lt; length-1; i++)&#123;</div><div class="line">        for(j = i+1; j &lt; length; j++)&#123;</div><div class="line">            if (sectionArr[i].end &gt;  sectionArr[j].end)&#123;</div><div class="line">                tmp = sectionArr[i];</div><div class="line">                sectionArr[i] = sectionArr[j];</div><div class="line">                sectionArr[j] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for(i = 1; i &lt; length; i++)&#123;</div><div class="line">        if (sectionArr[current].end &lt;= sectionArr[i].start)&#123;</div><div class="line">            count++;</div><div class="line">            current = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line"></div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    Section* sectionArr = new Section[n];</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; n; i++)&#123;</div><div class="line">        cin &gt;&gt; sectionArr[i].start;</div><div class="line">        cin &gt;&gt; sectionArr[i].end;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cout &lt;&lt; n-greedySelector(sectionArr,n) &lt;&lt; endl;</div><div class="line"></div><div class="line">    delete []sectionArr;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="算法" scheme="https://chanran.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>转载-常用端口速查</title>
    <link href="https://chanran.github.io/2016/12/16/%E8%BD%AC%E8%BD%BD-%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E9%80%9F%E6%9F%A5/"/>
    <id>https://chanran.github.io/2016/12/16/转载-常用端口速查/</id>
    <published>2016-12-16T09:57:31.000Z</published>
    <updated>2016-12-16T09:59:50.065Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://blog.csdn.net/kryptons/article/details/51722751" target="_blank" rel="external">《常用端口速查》</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div></pre></td><td class="code"><pre><div class="line">常见端口</div><div class="line"></div><div class="line">0|无效端口,通常用于分析操作系统</div><div class="line">1|传输控制协议端口服务多路开关选择器</div><div class="line">2|管理实用程序</div><div class="line">3|压缩进程</div><div class="line">5|远程作业登录</div><div class="line">7|回显</div><div class="line">9|丢弃</div><div class="line">11|在线用户</div><div class="line">13|时间</div><div class="line">17|每日引用</div><div class="line">18|消息发送协议</div><div class="line">19|字符发生器</div><div class="line">20|FTP文件传输协议(默认数据口)</div><div class="line">21|FTP文件传输协议(控制)</div><div class="line">22|SSH远程登录协议</div><div class="line">23|telnet(终端仿真协议),木马Tiny Telnet Server开放此端口</div><div class="line">24|预留给个人用邮件系统</div><div class="line">25|SMTP服务器所开放的端口，用于发送邮件</div><div class="line">27|NSW 用户系统 FE</div><div class="line">29|MSG ICP</div><div class="line">31|MSG验证,木马Master Paradise、HackersParadise开放此端口</div><div class="line">33|显示支持协议</div><div class="line">35|预留给个人打印机服务</div><div class="line">37|时间</div><div class="line">38|路由访问协议</div><div class="line">39|资源定位协议</div><div class="line">41|图形</div><div class="line">42|主机名服务</div><div class="line">43|who is服务</div><div class="line">44|MPM(消息处理模块)标志协议</div><div class="line">45|消息处理模块</div><div class="line">46|消息处理模块(默认发送口)</div><div class="line">47|NI FTP</div><div class="line">48|数码音频后台服务</div><div class="line">49|TACACS登录主机协议</div><div class="line">50|远程邮件检查协议</div><div class="line">51|IMP(接口信息处理机)逻辑地址维护</div><div class="line">52|施乐网络服务系统时间协议</div><div class="line">53|dns域名服务器</div><div class="line">54|施乐网络服务系统票据交换</div><div class="line">55|ISI图形语言</div><div class="line">56|施乐网络服务系统验证</div><div class="line">57|预留个人用终端访问</div><div class="line">58|施乐网络服务系统邮件</div><div class="line">59|预留个人文件服务</div><div class="line">60|未定义</div><div class="line">61|NI邮件</div><div class="line">62|异步通讯适配器服务</div><div class="line">63|whois++</div><div class="line">64|通讯接口</div><div class="line">65|TACACS数据库服务</div><div class="line">66|Oracle SQL*NET</div><div class="line">67|引导程序协议服务端</div><div class="line">68|引导程序协议客户端</div><div class="line">69|小型文件传输协议</div><div class="line">70|信息检索协议</div><div class="line">71|远程作业服务</div><div class="line">72|远程作业服务</div><div class="line">73|远程作业服务</div><div class="line">74|远程作业服务</div><div class="line">75|预留给个人拨出服务</div><div class="line">76|分布式外部对象存储</div><div class="line">77|预留给个人远程作业输入服务</div><div class="line">78|修正TCP</div><div class="line">79|查询远程主机在线用户等信息</div><div class="line">80|http,用于网页浏览,木马Executor开放此端口</div><div class="line">81|HOST2名称服务</div><div class="line">82|传输实用程序</div><div class="line">83|模块化智能终端ML设备</div><div class="line">84|公用追踪设备</div><div class="line">85|模块化智能终端ML设备</div><div class="line">86|Micro Focus Cobol编程语言</div><div class="line">87|预留给个人终端连接</div><div class="line">88|Kerberros安全认证系统</div><div class="line">89|SU/MIT telnet(终端仿真网关)</div><div class="line">90|DNSIX 安全属性标记图</div><div class="line">91|MIT Dover假脱机</div><div class="line">92|网络打印协议</div><div class="line">93|设备控制协议</div><div class="line">94|Tivoli对象调度</div><div class="line">96|DIXIE协议规范</div><div class="line">97|快速远程虚拟文件协议</div><div class="line">98|TAC新闻协议</div><div class="line">99|后门程序ncx99开放此端口</div><div class="line">100|未知用途</div><div class="line">101|NIC 主机名称服务</div><div class="line">102|消息传输代理</div><div class="line">103|Genesis 点对点传输网络</div><div class="line">105|信箱名称服务</div><div class="line">106|3COM-TSMUX开放端口</div><div class="line">107|远程Telnet服务</div><div class="line">108|SNA 网关访问服务</div><div class="line">109|POP2服务器开放此端口,用于接收邮件</div><div class="line">110|POP3服务器开放此端口,用于接收邮件</div><div class="line">111|SUN公司的RPC服务所有端口</div><div class="line">112|McIDAS 数据传输协议</div><div class="line">113|认证服务，用于鉴别TCP连接的用户</div><div class="line">114|音频新闻多点服务</div><div class="line">115|简单文件传输服务</div><div class="line">116|ANSA REX 通知</div><div class="line">117|UUCP 路径服务</div><div class="line">118|SQL 服务</div><div class="line">119|NEWS新闻组传输协议，承载USENET通信</div><div class="line">121|木马BO jammerkillahV开放端口</div><div class="line">122|SMAKY网络</div><div class="line">123|网络时间协议，蠕虫病毒会利用，一般关闭</div><div class="line">128|GSS X许可认证</div><div class="line">129|密码生成器协议</div><div class="line">130|Cisco软件开放端口</div><div class="line">131|Cisco软件开放端口</div><div class="line">132|Cisco软件开放端口</div><div class="line">133|统计服务</div><div class="line">134|INGRES-网络服务</div><div class="line">135|DCOM服务，冲击波病毒利用，不能关闭</div><div class="line">136|命名系统</div><div class="line">137|NETBIOS协议应用，为共享开放</div><div class="line">138|NETBIOS协议应用，为共享开放</div><div class="line">139|NETBIOS协议应用，为共享开放</div><div class="line">140|EMFIS数据服务</div><div class="line">141|EMFIS控制服务</div><div class="line">143|Interim邮件访问协议</div><div class="line">144|UMA软件开放端口</div><div class="line">145|UAAC协议</div><div class="line">149|AED 512仿真服务</div><div class="line">150|SQL(结构化查询语言)-网络</div><div class="line">152|后台文件传输协议</div><div class="line">156|SQL(结构化查询语言)服务</div><div class="line">158|PC邮件服务器</div><div class="line">159|NSS-路由</div><div class="line">160|SGMP-陷阱</div><div class="line">161|简单网络管理协议</div><div class="line">162|SNMP陷阱</div><div class="line">163|CMIP/TCP 管理</div><div class="line">164|CMIP/TCP 代理</div><div class="line">166|Sirius系统</div><div class="line">169|发送</div><div class="line">170|网络附言</div><div class="line">177|x显示管理控制协议，入侵者通过它访问X-windows操作台</div><div class="line">178|NextStep Window 服务</div><div class="line">179|边界网关协议</div><div class="line">180|图表</div><div class="line">181|统一</div><div class="line">184|OC服务器</div><div class="line">185|远程-KIS</div><div class="line">186|KIS 协议</div><div class="line">187|应用通信接口</div><div class="line">189|队列文件传输</div><div class="line">190|网关进入控制协议</div><div class="line">191|Prospero 目录服务</div><div class="line">192|OSU 网络监视系统</div><div class="line">193|Spider 远程控制协议</div><div class="line">194|多线交谈协议</div><div class="line">197|目录地址服务</div><div class="line">198|目录地址服务监视器</div><div class="line">200|IBM系统资源控制器</div><div class="line">201|AppleTalk(Mac机所用的网络协议)路由保证</div><div class="line">202|AppleTalk(Mac机所用的网络协议)Name Binding</div><div class="line">203|AppleTalk(Mac机所用的网络协议)未用端口</div><div class="line">204|AppleTalk(Mac机所用的网络协议)回显</div><div class="line">205|AppleTalk(Mac机所用的网络协议)未用端口</div><div class="line">206|AppleTalk(Mac机所用的网络协议)区信息</div><div class="line">207|AppleTalk(Mac机所用的网络协议)未用端口</div><div class="line">208|AppleTalk(Mac机所用的网络协议)未用端口</div><div class="line">209|快速邮件传输协议</div><div class="line">210|ANSI(美国国家标准协会)Z39.50</div><div class="line">211|Texas Instruments 914C/G终端</div><div class="line">213|IPX(以太网所用的协议)</div><div class="line">218|Netix消息记录协议</div><div class="line">219|Unisys ARPs</div><div class="line">220|交互邮件访问协议 v3</div><div class="line">223|证书分发中心</div><div class="line">224|masq拨号器</div><div class="line">241|预留端口 (224-241)</div><div class="line">245|链接</div><div class="line">246|显示系统协议</div><div class="line">257|安全电子交易系统</div><div class="line">258|Yak Winsock 个人聊天</div><div class="line">259|有效短程遥控</div><div class="line">260|开放端口</div><div class="line">261|IIOP 基于TLS/SSL的命名服务</div><div class="line">266|SCSI(小型计算机系统接口)on ST</div><div class="line">267|Tobit David服务层</div><div class="line">268|Tobit David复制</div><div class="line">281|个人连结</div><div class="line">282|Cable端口A/X</div><div class="line">286|FXP通信</div><div class="line">308|Novastor备份</div><div class="line">313|Magenta逻辑</div><div class="line">318|PKIX时间标记</div><div class="line">333|Texar安全端口</div><div class="line">344|Prospero数据存取协议</div><div class="line">345|Perf分析工作台</div><div class="line">346|Zebra服务器</div><div class="line">347|Fatmen服务器</div><div class="line">348|Cabletron管理协议</div><div class="line">358|Shrink可上网家电协议</div><div class="line">359|网络安全风险管理协议</div><div class="line">362|SRS发送</div><div class="line">363|RSVP隧道</div><div class="line">372|列表处理</div><div class="line">373|Legend公司</div><div class="line">374|Legend公司</div><div class="line">376|AmigaEnvoy网络查询协议</div><div class="line">377|NEC公司</div><div class="line">378|NEC公司</div><div class="line">379|TIA/EIA/IS-99调制解调器客户端</div><div class="line">380|TIA/EIA/IS-99调制解调器服务器</div><div class="line">381|hp(惠普)性能数据收集器</div><div class="line">382|hp(惠普)性能数据控制节点</div><div class="line">383|hp(惠普)性能数据警报管理</div><div class="line">384|远程网络服务器系统</div><div class="line">385|IBM应用程序</div><div class="line">386|ASA信息路由器定义文件.</div><div class="line">387|Appletalk更新路由.</div><div class="line">389|轻型目录访问协议</div><div class="line">395|网络监视控制协议</div><div class="line">396|Novell(美国Novell公司)Netware(Novell公司出的网络操作系统)over IP</div><div class="line">400|工作站解决方案</div><div class="line">401|持续电源</div><div class="line">402|Genie协议</div><div class="line">406|交互式邮件支持协议</div><div class="line">408|Prospero资源管理程序</div><div class="line">409|Prospero资源节点管理.</div><div class="line">410|DEC(数据设备公司)远程调试协议</div><div class="line">411|远程MT协议</div><div class="line">412|陷阱协定端口</div><div class="line">413|存储管理服务协议</div><div class="line">414|信息查询</div><div class="line">415|B网络</div><div class="line">423|IBM操作计划和控制开端</div><div class="line">424|IBM操作计划和控制追踪</div><div class="line">425|智能计算机辅助设计</div><div class="line">427|服务起位置</div><div class="line">434|移动ip代理</div><div class="line">435|移动ip管理</div><div class="line">443|基于TLS/SSL的网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP</div><div class="line">444|简单网络内存分页协议</div><div class="line">445|Microsoft-DS，为共享开放，震荡波病毒利用，一般应关闭</div><div class="line">446|DDM-远程关系数据库访问</div><div class="line">447|DDM-分布式文件管理</div><div class="line">448|DDM-使用安全访问远程数据库</div><div class="line">456|木马HACKERS PARADISE开放此端口</div><div class="line">458|apple quick time软件开放端口</div><div class="line">459|ampr-rcmd命令</div><div class="line">464|k密码服务</div><div class="line">469|广播控制协议</div><div class="line">470|scx-代理</div><div class="line">472|ljk-登陆</div><div class="line">481|Ph服务</div><div class="line">487|简单异步文件传输</div><div class="line">489|nest-协议</div><div class="line">491|Go-登陆</div><div class="line">499|ISO ILL协议</div><div class="line">500|Internet密钥交换，Lsass开放端口，不能关闭</div><div class="line">509|陷阱</div><div class="line">510|FirstClass协议</div><div class="line">512|远程进程执行</div><div class="line">513|远程登陆</div><div class="line">514|cmd命令</div><div class="line">515|spooler</div><div class="line">516|可视化数据</div><div class="line">518|交谈</div><div class="line">519|unix时间</div><div class="line">520|扩展文件名称服务器</div><div class="line">525|时间服务</div><div class="line">526|新日期</div><div class="line">529|在线聊天系统服务</div><div class="line">530|远程过程调用</div><div class="line">531|聊天</div><div class="line">532|读新闻</div><div class="line">533|紧急广播端口</div><div class="line">534|MegaMedia管理端</div><div class="line">537|网络流媒体协议</div><div class="line">542|商业</div><div class="line">543|Kerberos(软件)v4/v5</div><div class="line">544|krcmd命令</div><div class="line">546|DHCPv6 客户端</div><div class="line">547|DHCPv6 服务器</div><div class="line">552|设备共享</div><div class="line">554|Real Time Stream控制协议</div><div class="line">555|木马PhAse1.0、Stealth Spy、IniKiller开放此端口</div><div class="line">556|远距离文件服务器</div><div class="line">563|基于TLS/SSL的网络新闻传输协议</div><div class="line">564|plan 9文件服务</div><div class="line">565|whoami查询</div><div class="line">566|streettalk</div><div class="line">567|banyan-rpc(远程过程调用)</div><div class="line">568|DPA成员资格</div><div class="line">569|MSN成员资格</div><div class="line">570|demon(调试监督程序)</div><div class="line">571|udemon(调试监督程序)</div><div class="line">572|声纳</div><div class="line">573|banyan-贵宾</div><div class="line">574|FTP软件代理系统</div><div class="line">581|Bundle Discovery 协议</div><div class="line">582|SCC安全</div><div class="line">583|Philips视频会议</div><div class="line">584|密钥服务器</div><div class="line">585|IMAP4+SSL (Use 993 instead)</div><div class="line">586|密码更改</div><div class="line">587|申请</div><div class="line">589|Eye连结</div><div class="line">595|CAB协议</div><div class="line">597|PTC名称服务</div><div class="line">598|SCO网络服务器管理3</div><div class="line">599|Aeolon Core协议</div><div class="line">600|Sun IPC(进程间通讯)服务器</div><div class="line">601|可靠系统登陆服务</div><div class="line">604|通道</div><div class="line">606|Cray统一资源管理</div><div class="line">608|发送人-传递/提供 文件传输器</div><div class="line">609|npmp-陷阱</div><div class="line">610|npmp-本地</div><div class="line">611|npmp-gui( 图形用户界面)</div><div class="line">612|HMMP指引</div><div class="line">613|HMMP操作</div><div class="line">614|SSL(加密套接字协议层)shell(壳)</div><div class="line">615|Internet配置管理</div><div class="line">616|SCO(Unix系统)系统管理服务器</div><div class="line">617|SCO桌面管理服务器</div><div class="line">619|Compaq(康柏公司)EVM</div><div class="line">620|SCO服务器管理</div><div class="line">623|ASF远程管理控制协议</div><div class="line">624|Crypto管理</div><div class="line">631|IPP (Internet打印协议)</div><div class="line">633|服务更新(Sterling软件)</div><div class="line">637|局域网服务器</div><div class="line">641|repcmd命令</div><div class="line">647|DHCP(动态主机配置协议)Failover</div><div class="line">648|注册登记协议(RRP)</div><div class="line">649|Cadview-3d软件协议</div><div class="line">666|木马Attack FTP、Satanz Backdoor开放此端口</div><div class="line">808|ccproxy http/gopher/ftp (over http)协议</div><div class="line">1001|木马Silencer，WebEx开放端口</div><div class="line">1011|木马Doly开放端口</div><div class="line">1024|动态端口的开始,木马yai开放端口</div><div class="line">1025|inetinfo.exe(互联网信息服务)木马netspy开放端口</div><div class="line">1026|inetinfo.exe(互联网信息服务)</div><div class="line">1027|应用层网关服务</div><div class="line">1030|应用层网关服务</div><div class="line">1031|BBN IAD</div><div class="line">1033|本地网络信息端口</div><div class="line">1034|同步通知</div><div class="line">1036|安全部分传输协议</div><div class="line">1070|木马Psyber Stream，Streaming Audio开放端口</div><div class="line">1071|网络服务开放端口</div><div class="line">1074|网络服务开放端口</div><div class="line">1080|Socks这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址</div><div class="line"></div><div class="line">访问INTERNET</div><div class="line">1110|卡巴斯基反病毒软件开放此端口</div><div class="line">1125|卡巴斯基反病毒软件开放此端口</div><div class="line">1203|许可证生效端口</div><div class="line">1204|登陆请求监听端口</div><div class="line">1206|Anthony数据端口</div><div class="line">1222|SNI R&amp;D网络端口</div><div class="line">1233|普遍的附录服务器端口</div><div class="line">1234|木马SubSeven2.0、Ultors Trojan开放此端口</div><div class="line">1243|木马SubSeven1.0/1.9开放此端口</div><div class="line">1245|木马Vodoo，GabanBus，NetBus，Vodoo开放此端口</div><div class="line">1273|EMC-网关端口</div><div class="line">1289|JWalk服务器端口</div><div class="line">1290|WinJa服务器端口</div><div class="line">1333|密码策略(网络服务)(svchost.exe)</div><div class="line">1334|网络服务(svchost.exe)</div><div class="line">1335|数字公正协议</div><div class="line">1336|即时聊天协议(svchost.exe)</div><div class="line">1349|注册网络协议端口</div><div class="line">1350|注册网络协议端口</div><div class="line">1371|富士通配置协议端口</div><div class="line">1372|富士通配置协议端口</div><div class="line">1374|EPI软件系统端口</div><div class="line">1376|IBM个人-个人软件端口</div><div class="line">1377|Cichlid许可证管理端口</div><div class="line">1378|Elan许可证管理端口</div><div class="line">1380|Telesis网络许可证管理端口</div><div class="line">1381|苹果网络许可证管理端口</div><div class="line">1386|CheckSum 许可证管理端口</div><div class="line">1387|系统开放端口(rundll32.exe)</div><div class="line">1388|数据库高速缓存端口</div><div class="line">1389|文档管理端口</div><div class="line">1390|存储控制器端口</div><div class="line">1391|存储器存取服务器端口</div><div class="line">1392|打印管理端口</div><div class="line">1393|网络登陆服务器端口</div><div class="line">1394|网络登陆客户端端口</div><div class="line">1395|PC工作站管理软件端口</div><div class="line">1396|DVL活跃邮件端口</div><div class="line">1397|音频活跃邮件端口</div><div class="line">1398|视频活跃邮件端口</div><div class="line">1399|Cadkey许可证管理端口</div><div class="line">1433|Microsoft的SQL服务开放端口</div><div class="line">1434|Microsoft的SQL服务监视端口</div><div class="line">1492|木马FTP99CMP开放此端口</div><div class="line">1509|木马Psyber Streaming Server开放此端口</div><div class="line">1512|Microsoft Windows网络名称服务</div><div class="line">1524|许多攻击脚本安装一个后门SHELL于这个端口</div><div class="line">1600|木马Shivka-Burka开放此端口</div><div class="line">1645|远程认证拨号用户服务</div><div class="line">1701|第2层隧道协议</div><div class="line">1731|NetMeeting音频调用控制</div><div class="line">1801|Microsoft消息队列服务器</div><div class="line">1807|木马SpySender开放此端口</div><div class="line">1900|可被利用ddos攻击，一般关闭</div><div class="line">1912|金山词霸开放此端口</div><div class="line">1981|木马ShockRave开放此端口</div><div class="line">1999|木马BackDoor,yai开放此端口</div><div class="line">2000|木马GirlFriend 1.3、Millenium 1.0开放此端口</div><div class="line">2001|木马Millenium 1.0、Trojan Cow,黑洞2001开放此端口</div><div class="line">2003|GNU 查询</div><div class="line">2023|木马Pass Ripper开放此端口</div><div class="line">2049|NFS程序常运行于此端口</div><div class="line">2115|木马Bugs开放此端口</div><div class="line">2140|木马Deep Throat 1.0/3.0，The Invasor开放此端口</div><div class="line">2500|应用固定端口会话复制的RPC客户</div><div class="line">2504|网络平衡负荷</div><div class="line">2565|木马Striker开放此端口</div><div class="line">2583|木马Wincrash 2.0开放此端口</div><div class="line">2801|木马Phineas Phucker开放此端口</div><div class="line">2847|诺顿反病毒服务开放此端口</div><div class="line">3024|木马WinCrash开放此端口</div><div class="line">3128|squid http代理服务器开放此端口</div><div class="line">3129|木马Master Paradise开放此端口</div><div class="line">3150|木马The Invasor,deep throat开放此端口</div><div class="line">3210|木马SchoolBus开放此端口</div><div class="line">3306|MySQL开放此端口</div><div class="line">3333|木马Prosiak开放此端口</div><div class="line">3389|WINDOWS 2000终端开放此端口</div><div class="line">3456|inetinfo.exe(互联网信息服务)开放端口，VAT默认数据</div><div class="line">3457|VAT默认控制</div><div class="line">3527|Microsoft消息队列服务器</div><div class="line">3700|木马Portal of Doom开放此端口</div><div class="line">3996|木马RemoteAnything开放此端口</div><div class="line">4000|腾讯QQ客户端开放此端口</div><div class="line">4060|木马RemoteAnything开放此端口</div><div class="line">4092|木马WinCrash开放此端口</div><div class="line">4133|NUTS Bootp服务器</div><div class="line">4134|NIFTY-Serve HMI协议</div><div class="line">4141|Workflow服务器</div><div class="line">4142|文档服务器</div><div class="line">4143|文档复制</div><div class="line">4145|VVR控制</div><div class="line">4321|远程Who Is查询</div><div class="line">4333|微型sql服务器</div><div class="line">4349|文件系统端口记录</div><div class="line">4350|网络设备</div><div class="line">4351|PLCY网络服务</div><div class="line">4453|NSS警报管理</div><div class="line">4454|NSS代理管理</div><div class="line">4455|PR聊天用户</div><div class="line">4456|PR聊天服务器</div><div class="line">4457|PR注册</div><div class="line">4480|Proxy+ HTTP代理端口</div><div class="line">4500|Lsass开放端口，不能关闭</div><div class="line">4547|Lanner许可管理</div><div class="line">4555|RSIP端口</div><div class="line">4590|木马ICQTrojan开放此端口</div><div class="line">4672|远程文件访问服务器</div><div class="line">4752|简单网络音频服务器</div><div class="line">4800|Icona快速消息系统</div><div class="line">4801|Icona网络聊天</div><div class="line">4802|Icona许可系统服务器</div><div class="line">4848|App服务器-Admin HTTP</div><div class="line">4849|App服务器-Admin HTTPS</div><div class="line">4950|木马IcqTrojan开放5000端口</div><div class="line">5000|木马blazer5，Sockets de Troie开放5000端口，一般应关闭</div><div class="line">5001|木马Sockets de Troie开放5001端口</div><div class="line">5006|wsm服务器</div><div class="line">5007|wsm服务器ssl</div><div class="line">5022|mice服务器</div><div class="line">5050|多媒体会议控制协议</div><div class="line">5051|ITA代理</div><div class="line">5052|ITA管理</div><div class="line">5137|MyCTS服务器端口</div><div class="line">5150|Ascend通道管理协议</div><div class="line">5154|BZFlag游戏服务器</div><div class="line">5190|America-Online(美国在线)</div><div class="line">5191|AmericaOnline1(美国在线)</div><div class="line">5192|AmericaOnline2(美国在线)</div><div class="line">5193|AmericaOnline3(美国在线)</div><div class="line">5222|Jabber客户端连接</div><div class="line">5225|HP(惠普公司)服务器</div><div class="line">5226|HP(惠普公司)</div><div class="line">5232|SGI绘图软件端口</div><div class="line">5250|i网关</div><div class="line">5264|3Com网络端口1</div><div class="line">5265|3Com网络端口2</div><div class="line">5269|Jabber服务器连接</div><div class="line">5306|Sun MC组</div><div class="line">5321|木马Sockets de Troie开放5321端口</div><div class="line">5400|木马Blade Runner开放此端口</div><div class="line">5401|木马Blade Runner开放此端口</div><div class="line">5402|木马Blade Runner开放此端口</div><div class="line">5405|网络支持</div><div class="line">5409|Salient数据服务器</div><div class="line">5410|Salient用户管理</div><div class="line">5415|NS服务器</div><div class="line">5416|SNS网关</div><div class="line">5417|SNS代理</div><div class="line">5421|网络支持2</div><div class="line">5423|虚拟用户</div><div class="line">5427|SCO-PEER-TTA(Unix系统)</div><div class="line">5432|PostgreSQL数据库</div><div class="line">5550|木马xtcp开放此端口</div><div class="line">5569|木马Robo-Hack开放此端口</div><div class="line">5599|公司远程安全安装</div><div class="line">5600|公司安全管理</div><div class="line">5601|公司安全代理</div><div class="line">5631|pcANYWhere(软件)数据</div><div class="line">5632|pcANYWhere(软件)数据</div><div class="line">5673|JACL消息服务器</div><div class="line">5675|V5UA应用端口</div><div class="line">5676|RA管理</div><div class="line">5678|远程复制代理连接</div><div class="line">5679|直接电缆连接</div><div class="line">5720|MS-执照</div><div class="line">5729|Openmail用户代理层</div><div class="line">5730|Steltor&apos;s日历访问</div><div class="line">5731|netscape(网景)suiteware</div><div class="line">5732|netscape(网景)suiteware</div><div class="line">5742|木马WinCrash1.03开放此端口</div><div class="line">5745|fcopy-服务器</div><div class="line">5746|fcopys-服务器</div><div class="line">5755|OpenMail(邮件服务器)桌面网关服务器</div><div class="line">5757|OpenMail(邮件服务器)X.500目录服务器</div><div class="line">5766|OpenMail (邮件服务器)NewMail服务器</div><div class="line">5767|OpenMail (邮件服务器)请求代理曾(安全)</div><div class="line">5768|OpenMail(邮件服务器) CMTS服务器</div><div class="line">5777|DALI端口</div><div class="line">5800|虚拟网络计算</div><div class="line">5801|虚拟网络计算</div><div class="line">5802|虚拟网络计算HTTP访问, d</div><div class="line">5803|虚拟网络计算HTTP访问, d</div><div class="line">5900|虚拟网络计算机显示0</div><div class="line">5901|虚拟网络计算机显示1</div><div class="line">5902|虚拟网络计算机显示2</div><div class="line">5903|虚拟网络计算机显示3</div><div class="line">6000|X Window 系统</div><div class="line">6001|X Window 服务器</div><div class="line">6002|X Window 服务器</div><div class="line">6003|X Window 服务器</div><div class="line">6004|X Window 服务器</div><div class="line">6005|X Window 服务器</div><div class="line">6006|X Window 服务器</div><div class="line">6007|X Window 服务器</div><div class="line">6008|X Window 服务器</div><div class="line">6009|X Window 服务器</div><div class="line">6456|SKIP证书发送</div><div class="line">6471|LVision许可管理器</div><div class="line">6505|BoKS管理私人端口</div><div class="line">6506|BoKS管理公共端口</div><div class="line">6507|BoKS Dir服务器,私人端口</div><div class="line">6508|BoKS Dir服务器,公共端口</div><div class="line">6509|MGCS-MFP端口</div><div class="line">6510|MCER端口</div><div class="line">6566|SANE控制端口</div><div class="line">6580|Parsec主服务器</div><div class="line">6581|Parsec对等网络</div><div class="line">6582|Parsec游戏服务器</div><div class="line">6588|AnalogX HTTP代理端口</div><div class="line">6631|Mitchell电信主机</div><div class="line">6667|Internet多线交谈</div><div class="line">6668|Internet多线交谈</div><div class="line">6670|木马Deep Throat开放此端口</div><div class="line">6671|木马Deep Throat 3.0开放此端口</div><div class="line">6699|Napster文件(MP3)共享服务</div><div class="line">6701|KTI/ICAD名称服务器</div><div class="line">6788|SMC软件-HTTP</div><div class="line">6789|SMC软件-HTTPS</div><div class="line">6841|Netmo软件默认开放端口</div><div class="line">6842|Netmo HTTP服务</div><div class="line">6883|木马DeltaSource开放此端口</div><div class="line">6939|木马Indoctrination开放此端口</div><div class="line">6969|木马Gatecrasher、Priority开放此端口</div><div class="line">6970|real音频开放此端口</div><div class="line">7000|木马Remote Grab开放此端口</div><div class="line">7002|使用者&amp; 组 数据库</div><div class="line">7003|音量定位数据库</div><div class="line">7004|AFS/Kerberos认证服务</div><div class="line">7005|音量管理服务</div><div class="line">7006|错误解释服务</div><div class="line">7007|Basic监督进程</div><div class="line">7008|服务器-服务器更新程序</div><div class="line">7009|远程缓存管理服务</div><div class="line">7011|Talon软件发现端口</div><div class="line">7012|Talon软件引擎</div><div class="line">7013|Microtalon发现</div><div class="line">7014|Microtalon通信</div><div class="line">7015|Talon网络服务器</div><div class="line">7020|DP服务</div><div class="line">7021|DP服务管理</div><div class="line">7100|X字型服务</div><div class="line">7121|虚拟原型许可证管理</div><div class="line">7300|木马NetMonitor开放此端口</div><div class="line">7301|木马NetMonitor开放此端口</div><div class="line">7306|木马NetMonitor，NetSpy1.0开放此端口</div><div class="line">7307|木马NetMonitor开放此端口</div><div class="line">7308|木马NetMonitor开放此端口</div><div class="line">7323|Sygate服务器端</div><div class="line">7511|木马聪明基因开放此端口</div><div class="line">7588|Sun许可证管理</div><div class="line">7597|木马Quaz开放此端口</div><div class="line">7626|木马冰河开放此端口</div><div class="line">7633|PMDF管理</div><div class="line">7674|iMQ SSL通道</div><div class="line">7675|iMQ通道</div><div class="line">7676|木马Giscier开放此端口</div><div class="line">7720|Med图象入口</div><div class="line">7743|Sakura脚本传递协议</div><div class="line">7789|木马ICKiller开放此端口</div><div class="line">7797|Propel连接器端口</div><div class="line">7798|Propel编码器端口</div><div class="line">8000|腾讯QQ服务器端开放此端口</div><div class="line">8001|VCOM通道</div><div class="line">8007|Apache(类似iis)jServ协议1.x</div><div class="line">8008|HTTP Alternate</div><div class="line">8009|Apache(类似iis)JServ协议1.3</div><div class="line">8010|Wingate代理开放此端口</div><div class="line">8011|木马way2.4开放此端口</div><div class="line">8022|OA-系统</div><div class="line">8080|WWW代理开放此端口</div><div class="line">8081|ICECap控制台</div><div class="line">8082|BlackIce(防止黑客软件)警报发送到此端口</div><div class="line">8118|Privoxy HTTP代理</div><div class="line">8121|Apollo数据端口</div><div class="line">8122|Apollo软件管理端口</div><div class="line">8181|Imail</div><div class="line">8225|木马灰鸽子开放此端口</div><div class="line">8311|木马初恋情人开放此端口</div><div class="line">8351|服务器寻找</div><div class="line">8416|eSpeech Session协议</div><div class="line">8417|eSpeech RTP协议</div><div class="line">8473|虚拟点对点</div><div class="line">8668|网络地址转换</div><div class="line">8786|Message客户端</div><div class="line">8787|Message服务器</div><div class="line">8954|Cumulus管理端口</div><div class="line">9000|CS监听</div><div class="line">9001|ETL服务管理</div><div class="line">9002|动态id验证</div><div class="line">9021|Pangolin验证</div><div class="line">9022|PrivateArk远程代理</div><div class="line">9023|安全网络登陆-1</div><div class="line">9024|安全网络登陆-2</div><div class="line">9025|安全网络登陆-3</div><div class="line">9026|安全网络登陆-4</div><div class="line">9101|Bacula控制器</div><div class="line">9102|Bacula文件后台</div><div class="line">9103|Bacula存储邮件后台</div><div class="line">9111|DragonIDS控制台</div><div class="line">9217|FSC通讯端口</div><div class="line">9281|软件传送端口1</div><div class="line">9282|软件传送端口2</div><div class="line">9346|C技术监听</div><div class="line">9400|木马Incommand 1.0开放此端口</div><div class="line">9401|木马Incommand 1.0开放此端口</div><div class="line">9402|木马Incommand 1.0开放此端口</div><div class="line">9594|信息系统</div><div class="line">9595|Ping Discovery服务</div><div class="line">9800|WebDav源端口</div><div class="line">9801|Sakura脚本转移协议-2</div><div class="line">9802|WebDAV Source TLS/SSL</div><div class="line">9872|木马Portal of Doom开放此端口</div><div class="line">9873|木马Portal of Doom开放此端口</div><div class="line">9874|木马Portal of Doom开放此端口</div><div class="line">9875|木马Portal of Doom开放此端口</div><div class="line">9899|木马InIkiller开放此端口</div><div class="line">9909|域名时间</div><div class="line">9911|SYPECom传送协议</div><div class="line">9989|木马iNi-Killer开放此端口</div><div class="line">9990|OSM Applet程序服务器</div><div class="line">9991|OSM事件服务器</div><div class="line">10000|网络数据管理协议</div><div class="line">10001|SCP构造端口</div><div class="line">10005|安全远程登陆</div><div class="line">10008|Octopus多路器</div><div class="line">10067|木马iNi-Killer开放此端口</div><div class="line">10113|NetIQ端点</div><div class="line">10115|NetIQ端点</div><div class="line">10116|NetIQVoIP鉴定器</div><div class="line">10167|木马iNi-Killer开放此端口</div><div class="line">11000|木马SennaSpy开放此端口</div><div class="line">11113|金山词霸开放此端口</div><div class="line">11233|木马Progenic trojan开放此端口</div><div class="line">12076|木马Telecommando开放此端口</div><div class="line">12223|木马Hack&apos;99 KeyLogger开放此端口</div><div class="line">12345|木马NetBus1.60/1.70、GabanBus开放此端口</div><div class="line">12346|木马NetBus1.60/1.70、GabanBus开放此端口</div><div class="line">12361|木马Whack-a-mole开放此端口</div><div class="line">13223|PowWow 客户端，是Tribal Voice的聊天程序</div><div class="line">13224|PowWow 服务器，是Tribal Voice的聊天程序</div><div class="line">16959|木马Subseven开放此端口</div><div class="line">16969|木马Priority开放此端口</div><div class="line">17027|外向连接</div><div class="line">19191|木马蓝色火焰开放此端口</div><div class="line">20000|木马Millennium开放此端口</div><div class="line">20001|木马Millennium开放此端口</div><div class="line">20034|木马NetBus Pro开放此端口</div><div class="line">21554|木马GirlFriend开放此端口</div><div class="line">22222|木马Prosiak开放此端口</div><div class="line">23444|木马网络公牛开放此端口</div><div class="line">23456|木马Evil FTP、Ugly FTP开放此端口</div><div class="line">25793|Vocaltec地址服务器</div><div class="line">26262|K3软件-服务器</div><div class="line">26263|K3软件客户端</div><div class="line">26274|木马Delta开放此端口</div><div class="line">27374|木马Subseven 2.1开放此端口</div><div class="line">30100|木马NetSphere开放此端口</div><div class="line">30129|木马Masters Paradise开放此端口</div><div class="line">30303|木马Socket23开放此端口</div><div class="line">30999|木马Kuang开放此端口</div><div class="line">31337|木马BO(Back orifice)开放此端口</div><div class="line">31338|木马BO(Back orifice)，DeepBO开放此端口</div><div class="line">31339|木马NetSpy DK开放此端口</div><div class="line">31666|木马BOWhack开放此端口</div><div class="line">31789|Hack-a-tack</div><div class="line">32770|sun solaris RPC服务开放此端口</div><div class="line">33333|木马Prosiak开放此端口</div><div class="line">33434|路由跟踪</div><div class="line">34324|木马Tiny Telnet Server、BigGluck、TN开放此端口</div><div class="line">36865|KastenX软件端口</div><div class="line">38201|Galaxy7软件数据通道</div><div class="line">39681|TurboNote默认端口</div><div class="line">40412|木马The Spy开放此端口</div><div class="line">40421|木马Masters Paradise开放此端口</div><div class="line">40422|木马Masters Paradise开放此端口</div><div class="line">40423|木马Masters Paradise开放此端口</div><div class="line">40426|木马Masters Paradise开放此端口</div><div class="line">40843|CSCC 防火墙</div><div class="line">43210|木马SchoolBus 1.0/2.0开放此端口</div><div class="line">43190|IP-PROVISION</div><div class="line">44321|PCP服务器(pmcd)</div><div class="line">44322|PCP服务器(pmcd)代理</div><div class="line">44334|微型个人防火墙端口</div><div class="line">44442|ColdFusion软件端口</div><div class="line">44443|ColdFusion软件端口</div><div class="line">44445|木马Happypig开放此端口</div><div class="line">45576|E代时光专业代理开放此端口</div><div class="line">47262|木马Delta开放此端口</div><div class="line">47624|Direct Play服务器</div><div class="line">47806|ALC协议</div><div class="line">48003|Nimbus网关</div><div class="line">50505|木马Sockets de Troie开放此端口</div><div class="line">50766|木马Fore开放此端口</div><div class="line">53001|木马Remote Windows Shutdown开放此端口</div><div class="line">54320|木马bo2000开放此端口</div><div class="line">54321|木马SchoolBus 1.0/2.0开放此端口</div><div class="line">61466|木马Telecommando开放此端口</div><div class="line">65000|木马Devil 1.03开放此端口</div><div class="line">65301|PC Anywhere软件开放端口</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://blog.csdn.net/kryptons/article/details/51722751&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《常用端口速查》&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="计算机知识" scheme="https://chanran.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机知识" scheme="https://chanran.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>模拟银行账户</title>
    <link href="https://chanran.github.io/2016/12/16/simulate-bank-account/"/>
    <id>https://chanran.github.io/2016/12/16/simulate-bank-account/</id>
    <published>2016-12-16T08:08:06.000Z</published>
    <updated>2016-12-16T08:12:52.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>前面创建了Account类来建模银行账户：</p>
<p>（1）一个名为id的int型数据域，表示账户的身份号。</p>
<p>（2）一个名为balance的double型的数据域，表示账面余额。</p>
<p>（3）一个名为annualInterestRate的double型数据域，保存当前年利率。</p>
<p>（4）一个无参的构造函数，创建一个缺省的账户，其数据域id为0，balance为0，annualInterestRate为0。</p>
<p>（5）id、balance和annualInterestRate的访问器和更改器函数。</p>
<p>一个账户有账号、余额、年利率和账户创建时间等属性，还有存款和取款函数。创建它的两个派生类——支票账户和储蓄账户，前者有一个透支额度，后者不允许透支。定义Account类的一个常量虚函数toString（），并在派生类覆盖它，用来以字符串形式返回账号的余额。</p>
<p>画出这些类的UML图，实现该类，并编写一个测试程序，它创建一个Account、一个SavingsAccount和一个CheckingAccount账户，并调用它们的toString（）函数。</p>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><h3 id="Account-h"><a href="#Account-h" class="headerlink" title="Account.h"></a>Account.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef CHECKINGACCOUNTCLASS_ACCOUNT_H</div><div class="line">#define CHECKINGACCOUNTCLASS_ACCOUNT_H</div><div class="line"></div><div class="line">#include&lt;string&gt;</div><div class="line"></div><div class="line">class Account &#123;</div><div class="line"></div><div class="line">private:</div><div class="line">    int id;</div><div class="line">    double balance;</div><div class="line">    double annualInterestRate;</div><div class="line">public:</div><div class="line">    Account();</div><div class="line">    virtual std::string toString();</div><div class="line"></div><div class="line">public:</div><div class="line">    int getId();</div><div class="line"></div><div class="line">    void setId(int id);</div><div class="line"></div><div class="line">    double getBalance();</div><div class="line"></div><div class="line">    void setBalance(double balance);</div><div class="line"></div><div class="line">    double getAnnualInterestRate();</div><div class="line"></div><div class="line">    void setAnnualInterestRate(double annualInterestRate);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#endif //CHECKINGACCOUNTCLASS_ACCOUNT_H</div></pre></td></tr></table></figure>
<h3 id="account-cpp"><a href="#account-cpp" class="headerlink" title="account.cpp"></a>account.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#include &quot;iostream&quot;</div><div class="line">#include &quot;sstream&quot;</div><div class="line">#include &quot;Account.h&quot;</div><div class="line"></div><div class="line">Account::Account() &#123;</div><div class="line">    Account::id = 0;</div><div class="line">    Account::balance = 0;</div><div class="line">    Account::annualInterestRate = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int Account::getId() &#123;</div><div class="line">    return id;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Account::setId(int id) &#123;</div><div class="line">    Account::id = id;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double Account::getBalance() &#123;</div><div class="line">    return balance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Account::setBalance(double balance) &#123;</div><div class="line">    Account::balance = balance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double Account::getAnnualInterestRate() &#123;</div><div class="line">    return annualInterestRate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Account::setAnnualInterestRate(double annualInterestRate) &#123;</div><div class="line">    Account::annualInterestRate = annualInterestRate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">std::string Account:: toString()&#123;</div><div class="line"></div><div class="line">    std::ostringstream ostring;</div><div class="line">    ostring &lt;&lt;  &quot;Account:&quot; &lt;&lt; Account::getId() &lt;&lt; &quot; balance:&quot; &lt;&lt; Account::getBalance();</div><div class="line"></div><div class="line">    return ostring.str();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="SavingsAccount-h"><a href="#SavingsAccount-h" class="headerlink" title="SavingsAccount.h"></a>SavingsAccount.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef CHECKINGACCOUNTCLASS_SAVINGSACCOUNT_H</div><div class="line">#define CHECKINGACCOUNTCLASS_SAVINGSACCOUNT_H</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &quot;Account.h&quot;</div><div class="line">class SavingsAccount : public Account &#123;</div><div class="line">private:</div><div class="line">    bool allowedOverdraft;</div><div class="line">    std::string createAt;</div><div class="line">public:</div><div class="line">    std::string toString() override;</div><div class="line">    bool deposit(int id,double money);</div><div class="line">    bool withdrawal(int id,double money);</div><div class="line">public:</div><div class="line">    SavingsAccount();</div><div class="line">    const std::string &amp;getCreateAt() const;</div><div class="line">    bool isAllowedOverdraft() const;</div><div class="line">&#125;;</div><div class="line">#endif //CHECKINGACCOUNTCLASS_SAVINGSACCOUNT_H</div></pre></td></tr></table></figure>
<h3 id="SavingsAccount-cpp"><a href="#SavingsAccount-cpp" class="headerlink" title="SavingsAccount.cpp"></a>SavingsAccount.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line">#include &quot;iostream&quot;</div><div class="line">#include &quot;sstream&quot;</div><div class="line">#include &quot;SavingsAccount.h&quot;</div><div class="line">#include &quot;Date.h&quot;</div><div class="line">bool SavingsAccount::deposit(int id,double money)&#123;</div><div class="line">    if (id == SavingsAccount::getId())&#123;</div><div class="line">        SavingsAccount::setBalance(SavingsAccount::getBalance()+money);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">bool SavingsAccount::withdrawal(int id,double money)&#123;</div><div class="line">    if (id == SavingsAccount::getId())&#123;</div><div class="line">        if (SavingsAccount::getBalance() &lt; money)&#123;</div><div class="line">            return false;</div><div class="line">        &#125;else&#123;</div><div class="line">            SavingsAccount::setBalance(SavingsAccount::getBalance()-money);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">const std::string &amp;SavingsAccount::getCreateAt() const &#123;</div><div class="line">    return createAt;</div><div class="line">&#125;</div><div class="line">SavingsAccount::SavingsAccount() &#123;</div><div class="line">    SavingsAccount::createAt = DateTime::currentTime();</div><div class="line">&#125;</div><div class="line">bool SavingsAccount::isAllowedOverdraft() const &#123;</div><div class="line">    return allowedOverdraft;</div><div class="line">&#125;</div><div class="line">std::string SavingsAccount:: toString()&#123;</div><div class="line">    std::ostringstream ostring;</div><div class="line">    ostring &lt;&lt;  &quot;Account:&quot; &lt;&lt; SavingsAccount::getId() &lt;&lt; &quot; balance:&quot; &lt;&lt; SavingsAccount::getBalance() &lt;&lt; &quot; CreateAt:&quot; &lt;&lt; SavingsAccount::getCreateAt();</div><div class="line">    return ostring.str();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="CheckingAccount-h"><a href="#CheckingAccount-h" class="headerlink" title="CheckingAccount.h"></a>CheckingAccount.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef CHECKINGACCOUNTCLASS_CHECKINGACCOUNT_H</div><div class="line">#define CHECKINGACCOUNTCLASS_CHECKINGACCOUNT_H</div><div class="line">#include &quot;Account.h&quot;</div><div class="line">class CheckingAccount : public Account &#123;</div><div class="line">private:</div><div class="line">    bool allowedOverdraft;</div><div class="line">    double overdraft;</div><div class="line">    std::string createAt;</div><div class="line">public:</div><div class="line">    std::string toString() override;</div><div class="line">    bool deposit(int id,double money);</div><div class="line">    bool withdrawal(int id,double money);</div><div class="line">public:</div><div class="line">    CheckingAccount();</div><div class="line">    const std::string &amp;getCreateAt() const;</div><div class="line">    bool isAllowedOverdraft() const;</div><div class="line">    double getOverdraft() const;</div><div class="line">    void setOverdraft(double overdraft);</div><div class="line">&#125;;</div><div class="line">#endif //CHECKINGACCOUNTCLASS_CHECKINGACCOUNT_H</div></pre></td></tr></table></figure>
<h2 id="CheckingAccount-cpp"><a href="#CheckingAccount-cpp" class="headerlink" title="CheckingAccount.cpp"></a>CheckingAccount.cpp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#include &quot;iostream&quot;</div><div class="line">#include &quot;sstream&quot;</div><div class="line">#include &quot;CheckingAccount.h&quot;</div><div class="line">#include &quot;Date.h&quot;</div><div class="line">bool CheckingAccount::deposit(int id,double money)&#123;</div><div class="line">    if (id == CheckingAccount::getId())&#123;</div><div class="line">        CheckingAccount::setBalance(CheckingAccount::getBalance()+money);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">bool CheckingAccount::withdrawal(int id,double money)&#123;</div><div class="line">    if (id == CheckingAccount::getId())&#123;</div><div class="line">        if (CheckingAccount::getBalance()-money &lt;= (-CheckingAccount::getOverdraft()))&#123;</div><div class="line">            return false;</div><div class="line">        &#125;else&#123;</div><div class="line">            CheckingAccount::setBalance(CheckingAccount::getBalance()-money);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">const std::string &amp;CheckingAccount::getCreateAt() const &#123;</div><div class="line">    return createAt;</div><div class="line">&#125;</div><div class="line">CheckingAccount::CheckingAccount() &#123;</div><div class="line">    CheckingAccount::overdraft = 10000;</div><div class="line">    CheckingAccount::createAt = DateTime::currentTime();</div><div class="line">&#125;</div><div class="line">bool CheckingAccount::isAllowedOverdraft() const &#123;</div><div class="line">    return allowedOverdraft;</div><div class="line">&#125;</div><div class="line">double CheckingAccount::getOverdraft() const &#123;</div><div class="line">    return CheckingAccount::overdraft;</div><div class="line">&#125;</div><div class="line">void CheckingAccount::setOverdraft(double overdraft) &#123;</div><div class="line">    CheckingAccount::overdraft = overdraft;</div><div class="line">&#125;</div><div class="line">std::string CheckingAccount:: toString()&#123;</div><div class="line">    std::ostringstream ostring;</div><div class="line">    ostring &lt;&lt; &quot;Account:&quot; &lt;&lt; CheckingAccount::getId() &lt;&lt; &quot; balance:&quot; &lt;&lt; CheckingAccount::getBalance() &lt;&lt; &quot; CreateAt:&quot; &lt;&lt; CheckingAccount::getCreateAt();</div><div class="line">    return ostring.str();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Date-h"><a href="#Date-h" class="headerlink" title="Date.h"></a>Date.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-8.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef CHECKINGACCOUNTCLASS_DATE_H</div><div class="line">#define CHECKINGACCOUNTCLASS_DATE_H</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;type_traits&gt;</div><div class="line">class DateTime &#123;</div><div class="line">public:</div><div class="line">    template&lt;typename T&gt;</div><div class="line">    static std::string convert(time_t t) &#123;</div><div class="line">        return time2string(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    template&lt;typename T&gt;</div><div class="line">    static time_t convert(const std::string&amp; timeStr) &#123;</div><div class="line">        return string2time(timeStr);</div><div class="line">    &#125;</div><div class="line">    static std::string currentTime() &#123;</div><div class="line">        return time2string(time(nullptr));</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    static std::string time2string(time_t t) &#123;</div><div class="line">        struct tm* tmNow = localtime(&amp;t);</div><div class="line">        char timeStr[sizeof(&quot;yyyy-mm-dd hh:mm:ss&quot;)] = &#123;&apos;\0&apos;&#125;;</div><div class="line">        std::strftime(timeStr, sizeof(timeStr), &quot;%Y-%m-%d %H:%M:%S&quot;, tmNow);</div><div class="line">        return timeStr;</div><div class="line">    &#125;</div><div class="line">    static time_t string2time(const std::string&amp; timeStr) &#123;</div><div class="line">        struct tm stTm;</div><div class="line">        sscanf(timeStr.c_str(), &quot;%d-%d-%d %d:%d:%d&quot;,</div><div class="line">               &amp;(stTm.tm_year),</div><div class="line">               &amp;(stTm.tm_mon),</div><div class="line">               &amp;(stTm.tm_mday),</div><div class="line">               &amp;(stTm.tm_hour),</div><div class="line">               &amp;(stTm.tm_min),</div><div class="line">               &amp;(stTm.tm_sec));</div><div class="line">        stTm.tm_year -= 1900;</div><div class="line">        stTm.tm_mon--;</div><div class="line">        stTm.tm_isdst = -1;</div><div class="line">        return mktime(&amp;stTm);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">#endif //CHECKINGACCOUNTCLASS_DATE_H</div></pre></td></tr></table></figure>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &quot;CheckingAccount.h&quot;</div><div class="line">#include &quot;SavingsAccount.h&quot;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line"></div><div class="line">    SavingsAccount savingsAccount;</div><div class="line">    CheckingAccount checkingAccount;</div><div class="line"></div><div class="line">    cout &lt;&lt; &quot;SavingsAccount:&quot; &lt;&lt; savingsAccount.toString() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;CheckingAccount&quot; &lt;&lt; checkingAccount.toString() &lt;&lt; endl;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;前面创建了Account类来建模银行账户：&lt;/p&gt;
&lt;p&gt;（1）一个名为id的int型数据域，表示账户的身份号。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="C++" scheme="https://chanran.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>分割和合并文件</title>
    <link href="https://chanran.github.io/2016/12/16/split-merge-file/"/>
    <id>https://chanran.github.io/2016/12/16/split-merge-file/</id>
    <published>2016-12-16T08:04:24.000Z</published>
    <updated>2016-12-16T08:17:07.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>假设要备份一个巨大的文件（比如10GB AVI文件）到CD-R，可以把文件分割成几个小的文件，然后逐个备份。编写一个实用程序，它能将大文件分割成小文件。程序提示用户输入原文件名和每个小文件的字节数。下面是样例运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Enter a source file name: c:\exercise.zip  ~Enter</div><div class="line">Enter the number of bytes in each smaller file: 9343400  ~Enter</div><div class="line">File c:\exercise.zip.0 produced</div><div class="line">File c:\exercise.zip.1 produced</div><div class="line">File c:\exercise.zip.2 produced</div><div class="line">File c:\exercise.zip.3 produced</div><div class="line">Split Done</div></pre></td></tr></table></figure>
<p>编写一个实用程序，合并文件到一个新的文件。程序提示用户输入源文件的个数、每个源文件的名字及目标文件名字。下面是样例运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Enter the number of source files: 4  ~Enter</div><div class="line">Enter a source file:   c:\exercise.zip.0  ~Enter</div><div class="line">Enter a source file:   c:\exercise.zip.1  ~Enter</div><div class="line">Enter a source file:   c:\exercise.zip.2  ~Enter</div><div class="line">Enter a source file:   c:\exercise.zip.3  ~Enter</div><div class="line">Enter a target file:   c:\temp.zip  ~Enter</div><div class="line">Combine Done</div></pre></td></tr></table></figure>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void splitFile(string path,long long smallFileBytes)&#123;</div><div class="line">    fstream sourceFile(path.c_str(),ios::in|ios::binary);</div><div class="line">    if (sourceFile.fail())&#123;</div><div class="line">        cout &lt;&lt; &quot;打开文件失败！&quot; &lt;&lt; endl;</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    int numberOfFile = 0;</div><div class="line">    char readBuffer[smallFileBytes];</div><div class="line">    while(!sourceFile.eof())&#123;</div><div class="line">        string smallFileName = path;    //应该需要分割/才对，可是没时间弄了</div><div class="line">        if (sourceFile.good())&#123;</div><div class="line">            numberOfFile++;</div><div class="line">            sourceFile.read(readBuffer,smallFileBytes);</div><div class="line">            readBuffer[sourceFile.gcount()] = &apos;\0&apos;; //可能没有写完整个readBuffer数组</div><div class="line"></div><div class="line">            ostringstream ostring;</div><div class="line">            ostring &lt;&lt; smallFileName &lt;&lt; numberOfFile;</div><div class="line">            smallFileName = ostring.str();</div><div class="line"></div><div class="line">            fstream resultFile(smallFileName.c_str(),ios::out | ios::binary);</div><div class="line">            resultFile.write(readBuffer,sourceFile.gcount());</div><div class="line">            cout &lt;&lt; &quot;File &quot; &lt;&lt; smallFileName &lt;&lt; &quot; produced.&quot; &lt;&lt; endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;Split Done.&quot; &lt;&lt; endl;</div><div class="line">    sourceFile.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">void mergeFile(int numOfFiles,string* fileArr,string resultFileName)&#123;</div><div class="line"></div><div class="line">    fstream resultFile(resultFileName.c_str(), ios::out | ios::binary | ios::app);</div><div class="line">    char* readBuffer;</div><div class="line">    for (int i = 0; i &lt; numOfFiles; i++)&#123;</div><div class="line">        fstream sourceFile(fileArr[i].c_str(),ios::in | ios::binary);</div><div class="line">        sourceFile.seekg(0,ios::end);</div><div class="line">        long smallFileLength = sourceFile.tellg();</div><div class="line">        sourceFile.seekg(0,ios::beg);</div><div class="line">        readBuffer = new char[smallFileLength];</div><div class="line"></div><div class="line">        sourceFile.read(readBuffer,smallFileLength);</div><div class="line">        sourceFile.close();</div><div class="line"></div><div class="line">        resultFile.write(readBuffer,smallFileLength);</div><div class="line">    &#125;</div><div class="line">    resultFile.close();</div><div class="line">    cout &lt;&lt; &quot;Combine Done&quot; &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    string path = &quot;&quot;;</div><div class="line">    long long smallFileBytes;</div><div class="line">    cout &lt;&lt; &quot;Enter a source file name: &quot;;</div><div class="line">    cin &gt;&gt; path;</div><div class="line">    cout &lt;&lt; &quot;Enter the number of bytes in each smaller file: &quot;;</div><div class="line">    cin &gt;&gt; smallFileBytes;</div><div class="line">    splitFile(path,smallFileBytes);</div><div class="line"></div><div class="line">    int numOfFiles = 0;</div><div class="line">    cout &lt;&lt; &quot;Enter the number of source files:&quot;;</div><div class="line">    cin &gt;&gt; numOfFiles;</div><div class="line">    string fileArr[numOfFiles];</div><div class="line">    cout &lt;&lt; &quot;Enter the name of each source file:&quot;;</div><div class="line">    for (int i = 0; i &lt; numOfFiles; i++)&#123;</div><div class="line">        cin &gt;&gt; fileArr[i];</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; &quot;Enter the name of merged file:&quot;;</div><div class="line">    string resultFileName = &quot;&quot;;</div><div class="line">    cin &gt;&gt; resultFileName;</div><div class="line">    mergeFile(numOfFiles,fileArr,resultFileName);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;假设要备份一个巨大的文件（比如10GB AVI文件）到CD-R，可以把文件分割成几个小的文件，然后逐个备份。编写一个实用程序
    
    </summary>
    
      <category term="C++" scheme="https://chanran.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Complex类，运算符重载</title>
    <link href="https://chanran.github.io/2016/12/16/operator-overloading/"/>
    <id>https://chanran.github.io/2016/12/16/operator-overloading/</id>
    <published>2016-12-16T07:53:07.000Z</published>
    <updated>2016-12-16T07:59:23.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>复数形式是a+bi，其中a和b是实数，i是。a和b分别被称为复数的实部和虚部。可以使用下列公式实现复数的加、减、乘、除：</p>
<p>a + bi + c + di = (a + c) + (b + d) i</p>
<p>a + bi - (c + di) = (a - c) + (b - d) i</p>
<p>(a + bi) * (c + di) = (ac - bd) + (bc + ad) i</p>
<p>(a + bi) / (c + di) = (ac + bd) / (c2 + d2) + (bc - ad) i /<br>(c2 + d2)</p>
<p>使用下面公式也可以获得复数的绝对值：</p>
<p>|a+bi|=√(a^2+b^2)</p>
<p>设计一个名为Complex的复数类，它可以用函数add、subtract、multiply、divide和abs实现复数的加、减、乘、除和取绝对值。toString函数实现以字符串形式表示的复数a+bi。如果b是0，只返回a。</p>
<p>该类有三个构造函数Complex (a, b)、Complex (a)和Complex ( )。Complex ( )生成一个表示原点的复数对象，Complex (a)生成一个b值为0的复数对象。函数getRealPart ( )和getImaginaryPart ( )分别返回复数的实部和虚部。</p>
<p>重载运算符+，-，<em>，/，+=，-=，</em>=，/=，[ ]，一元+和-，前缀++和–，后缀++和–，&lt;&lt;，&gt;&gt;。</p>
<p>以非成员函数形式重载+，-，*，/。重载[ ]，使得[0]返回a，[1]返回b。<br>编写一个测试程序：当用户输入两个复数后，程序显示它们的加、减、乘、除操作的结果。样例输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Enter the first complex number:  3.5  5.5  ~Enter</div><div class="line">Enter the second complex number: -3.5  1  ~Enter</div><div class="line">(3.5 + 5.5i) + (-3.5 + 1.0i) = 0.0 + 6.5i</div><div class="line">(3.5 + 5.5i) - (-3.5 + 1.0i) = 7.0 + 4.5i</div><div class="line">(3.5 + 5.5i) * (-3.5 + 1.0i) = -17.75 + -15.75i</div><div class="line">(3.5 + 5.5i) / (-3.5 + 1.0i) = -0.5094 + -1.7i</div><div class="line">|3.5 + 5.5i| = 6.519202405202649</div></pre></td></tr></table></figure>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><h3 id="Complex-h"><a href="#Complex-h" class="headerlink" title="Complex.h"></a>Complex.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-9.</div><div class="line">//</div><div class="line"></div><div class="line">#ifndef COMPLEXCLASS_COMPLEX_H</div><div class="line">#define COMPLEXCLASS_COMPLEX_H</div><div class="line"></div><div class="line">#include &quot;iostream&quot;</div><div class="line">#include &quot;sstream&quot;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">class Complex &#123;</div><div class="line">private:</div><div class="line">    double realPart;</div><div class="line">    double virtualPart;</div><div class="line"></div><div class="line">public:</div><div class="line">    Complex add(const Complex &amp;c);</div><div class="line">    Complex subtract(const Complex &amp;c);</div><div class="line">    Complex multiply(const Complex &amp;c);</div><div class="line">    Complex divide(const Complex &amp;c);</div><div class="line">    double abs();</div><div class="line">    std::string toString();</div><div class="line"></div><div class="line">public:</div><div class="line">    Complex operator+(const Complex &amp;c);</div><div class="line">    Complex operator-(const Complex &amp;c);</div><div class="line">    Complex operator*(const Complex &amp;c);</div><div class="line">    Complex operator/(const Complex &amp;c);</div><div class="line">    Complex operator+=(const Complex &amp;c);</div><div class="line">    Complex operator-=(const Complex &amp;c);</div><div class="line">    Complex operator*=(const Complex &amp;c);</div><div class="line">    Complex operator/=(const Complex &amp;c);</div><div class="line">    double operator[](const int &amp;index);</div><div class="line">    Complex operator+();</div><div class="line">    Complex operator-();</div><div class="line">    Complex operator++(); //前置版本</div><div class="line">    Complex operator--(); //前置版本</div><div class="line">    Complex operator++(int t); //后置版本</div><div class="line">    Complex operator--(int t); //后置版本</div><div class="line">    friend std::ostream&amp; operator&lt;&lt;(std::ostream &amp;os,const Complex &amp;c); //输出运算附</div><div class="line">    friend std::istream&amp; operator&gt;&gt;(std::istream &amp;is,Complex c); //输入运算符</div><div class="line"></div><div class="line">public:</div><div class="line">    Complex();</div><div class="line">    Complex(double realPart);</div><div class="line"></div><div class="line">    Complex(double realPart, double virtualPart);</div><div class="line"></div><div class="line">    double getRealPart() const;</div><div class="line"></div><div class="line">    void setRealPart(double realPart);</div><div class="line"></div><div class="line">    double getVirtualPart() const;</div><div class="line"></div><div class="line">    void setVirtualPart(double virtualPart);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">#endif //COMPLEXCLASS_COMPLEX_H</div></pre></td></tr></table></figure>
<h3 id="Complex-cpp"><a href="#Complex-cpp" class="headerlink" title="Complex.cpp"></a>Complex.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Created by blue on 16-12-9.</div><div class="line">//</div><div class="line"></div><div class="line">#include &quot;iostream&quot;</div><div class="line">#include &quot;sstream&quot;</div><div class="line">#include &quot;Complex.h&quot;</div><div class="line">#include &lt;math.h&gt;</div><div class="line"></div><div class="line">/*方法*/</div><div class="line">Complex Complex:: add(const Complex &amp;c)&#123;</div><div class="line">    Complex temp;</div><div class="line">    temp.setRealPart(Complex::getRealPart()+c.getRealPart());</div><div class="line">    temp.setVirtualPart(Complex::getVirtualPart()+c.getVirtualPart());</div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line">Complex Complex::subtract(const Complex &amp;c)&#123;</div><div class="line">    Complex temp;</div><div class="line">    temp.setRealPart(Complex::getRealPart()-c.getRealPart());</div><div class="line">    temp.setVirtualPart(Complex::getVirtualPart()-c.getVirtualPart());</div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line">Complex Complex::multiply(const Complex &amp;c)&#123;</div><div class="line">    Complex temp;</div><div class="line">    temp.setRealPart(Complex::getRealPart()*c.getRealPart()-Complex::getVirtualPart()*c.getVirtualPart());</div><div class="line">    temp.setVirtualPart(Complex::getVirtualPart()*c.getRealPart()+Complex::getRealPart()*c.getVirtualPart());</div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line">Complex Complex::divide(const Complex &amp;c)&#123;</div><div class="line">    Complex temp;</div><div class="line">    temp.setRealPart((Complex::getRealPart()*c.getRealPart()+Complex::getVirtualPart()*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    temp.setVirtualPart((Complex::getVirtualPart()*c.getRealPart()-Complex::getRealPart()*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line">double Complex::abs()&#123;</div><div class="line">    return sqrt(pow(Complex::getRealPart(),2)+pow(Complex::getVirtualPart(),2));</div><div class="line">&#125;</div><div class="line">std::string Complex::toString()&#123;</div><div class="line">    std::ostringstream ostring;</div><div class="line"></div><div class="line">    if (Complex::getVirtualPart() == 0)&#123;</div><div class="line">        ostring &lt;&lt; Complex::getRealPart();</div><div class="line">    &#125;else if (Complex::getVirtualPart() &lt; 0)&#123;</div><div class="line">        ostring &lt;&lt; Complex::getRealPart() &lt;&lt; &quot;-&quot; &lt;&lt; fabs(Complex::getVirtualPart()) &lt;&lt; &quot;i&quot;;</div><div class="line">    &#125;else&#123;</div><div class="line">        ostring &lt;&lt; Complex::getRealPart() &lt;&lt; &quot;+&quot; &lt;&lt; Complex::getVirtualPart() &lt;&lt; &quot;i&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return ostring.str();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*运算符重载*/</div><div class="line">Complex Complex::operator+(const Complex &amp;c)&#123;</div><div class="line">    Complex tmp;</div><div class="line">    tmp.setRealPart(Complex::getRealPart()+c.getRealPart());</div><div class="line">    tmp.setVirtualPart(Complex::getVirtualPart()+c.getVirtualPart());</div><div class="line">    return tmp;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator-(const Complex &amp;c)&#123;</div><div class="line">    Complex tmp;</div><div class="line">    tmp.setRealPart(Complex::getRealPart()-c.getRealPart());</div><div class="line">    tmp.setVirtualPart(Complex::getVirtualPart()-c.getVirtualPart());</div><div class="line">    return tmp;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator*(const Complex &amp;c)&#123;</div><div class="line">    Complex tmp(Complex::getRealPart(),Complex::getVirtualPart());</div><div class="line">    tmp.setRealPart(Complex::getRealPart()*c.getRealPart()-Complex::getVirtualPart()*c.getVirtualPart());</div><div class="line">    tmp.setVirtualPart(Complex::getVirtualPart()*c.getRealPart()+Complex::getRealPart()*c.getVirtualPart());</div><div class="line">    return tmp;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator/(const Complex &amp;c)&#123;</div><div class="line">    Complex temp;</div><div class="line">    temp.setRealPart((Complex::getRealPart()*c.getRealPart()+Complex::getVirtualPart()*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    temp.setVirtualPart((Complex::getVirtualPart()*c.getRealPart()-Complex::getRealPart()*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    return temp;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator+=(const Complex &amp;c)&#123;</div><div class="line">    double a = Complex::getRealPart();</div><div class="line">    double b = Complex::getVirtualPart();</div><div class="line">    Complex::setRealPart((a*c.getRealPart()+b*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    Complex::setVirtualPart((b*c.getRealPart()-a*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator-=(const Complex &amp;c)&#123;</div><div class="line">    double a = Complex::getRealPart();</div><div class="line">    double b = Complex::getVirtualPart();</div><div class="line">    Complex::setRealPart(a-c.getRealPart());</div><div class="line">    Complex::setVirtualPart(b-c.getVirtualPart());</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator*=(const Complex &amp;c)&#123;</div><div class="line">    double a = Complex::getRealPart();</div><div class="line">    double b = Complex::getVirtualPart();</div><div class="line">    Complex::setRealPart(a*c.getRealPart()-b*c.getVirtualPart());</div><div class="line">    Complex::setVirtualPart(b*c.getRealPart()+a*c.getVirtualPart());</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator/=(const Complex &amp;c)&#123;</div><div class="line">    double a = Complex::getRealPart();</div><div class="line">    double b = Complex::getVirtualPart();</div><div class="line">    Complex::setRealPart((a*c.getRealPart()+b*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    Complex::setVirtualPart((a*c.getRealPart()-b*c.getVirtualPart())/(pow(c.getRealPart(),2)+pow(c.getVirtualPart(),2)));</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">double Complex::operator[](const int &amp;index)&#123;</div><div class="line">    if (index == 0)&#123;</div><div class="line">        return Complex::getRealPart();</div><div class="line">    &#125;else if(index == 1)&#123;</div><div class="line">        return Complex::getVirtualPart();</div><div class="line">    &#125;else&#123;</div><div class="line">        std::cout &lt;&lt; &quot;Invalid Index.&quot; &lt;&lt; std::endl;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator+()&#123;</div><div class="line">    Complex::setRealPart(fabs(Complex::getRealPart()));</div><div class="line">    Complex::setVirtualPart(fabs(Complex::getVirtualPart()));</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator-()&#123;</div><div class="line">    Complex::setRealPart(-Complex::getRealPart());</div><div class="line">    Complex::setVirtualPart(-Complex::getVirtualPart());</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator++()&#123; //前置版本</div><div class="line">    Complex::setRealPart(Complex::getRealPart()+1);</div><div class="line">    Complex::setVirtualPart(Complex::getRealPart()+1);</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator--()&#123; //前置版本</div><div class="line">    Complex::setRealPart(Complex::getRealPart()-1);</div><div class="line">    Complex::setVirtualPart(Complex::getRealPart()-1);</div><div class="line">    return *this;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator++(int t)&#123; //后置版本</div><div class="line">    Complex tmp(Complex::getRealPart(),Complex::getVirtualPart());</div><div class="line">    this-&gt;setRealPart(this-&gt;getRealPart()+1);</div><div class="line">    this-&gt;setVirtualPart(this-&gt;getVirtualPart()+1);</div><div class="line">    return tmp;</div><div class="line">&#125;</div><div class="line">Complex Complex::operator--(int t)&#123; //后置版本</div><div class="line">    Complex tmp(Complex::getRealPart(),Complex::getVirtualPart());</div><div class="line">    this-&gt;setRealPart(this-&gt;getRealPart()-1);</div><div class="line">    this-&gt;setVirtualPart(this-&gt;getVirtualPart()-1);</div><div class="line">    return tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*输入输出重载*/</div><div class="line">std::ostream&amp; operator&lt;&lt;(std::ostream &amp;os,const Complex &amp;c)&#123; //输出运算符</div><div class="line">    if (c.getVirtualPart() &gt; 0)&#123;</div><div class="line">        os &lt;&lt; c.getRealPart() &lt;&lt; &quot;+&quot; &lt;&lt; c.getVirtualPart() &lt;&lt; &quot;i&quot;;</div><div class="line">    &#125;else if(c.getVirtualPart() == 0)&#123;</div><div class="line">        os &lt;&lt; c.getRealPart();</div><div class="line">    &#125;else&#123;</div><div class="line">        os &lt;&lt; c.getRealPart() &lt;&lt; &quot;-&quot; &lt;&lt; fabs(c.getVirtualPart()) &lt;&lt; &quot;i&quot;;</div><div class="line">    &#125;</div><div class="line">    return os;</div><div class="line">&#125;</div><div class="line">std::istream&amp; operator&gt;&gt;(std::istream &amp;is,Complex c)&#123; //输入运算符</div><div class="line">    double t1,t2;</div><div class="line">    is &gt;&gt; t1 &gt;&gt; t2;</div><div class="line">    c.setRealPart(t1);</div><div class="line">    c.setVirtualPart(t2);</div><div class="line">    return is;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*构造函数,getter,setter*/</div><div class="line">Complex::Complex() &#123;</div><div class="line">    Complex::realPart = 0;</div><div class="line">    Complex::virtualPart = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex::Complex(double realPart) : realPart(realPart) &#123;</div><div class="line">    Complex::realPart = realPart;</div><div class="line">    Complex::virtualPart = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Complex::Complex(double realPart, double virtualPart) : realPart(realPart), virtualPart(virtualPart) &#123;</div><div class="line">    Complex::realPart = realPart;</div><div class="line">    Complex::virtualPart = virtualPart;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">double Complex::getRealPart() const &#123;</div><div class="line">    return realPart;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Complex::setRealPart(double realPart) &#123;</div><div class="line">    Complex::realPart = realPart;</div><div class="line">&#125;</div><div class="line"></div><div class="line">double Complex::getVirtualPart() const &#123;</div><div class="line">    return virtualPart;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Complex::setVirtualPart(double virtualPart) &#123;</div><div class="line">    Complex::virtualPart = virtualPart;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &quot;Complex.h&quot;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"></div><div class="line">    double a0,a1;</div><div class="line">    double b0,b1;</div><div class="line">    cout &lt;&lt; &quot;Enter the first complex number: &quot; &lt;&lt; endl;</div><div class="line">    cin &gt;&gt; a0 &gt;&gt; a1;</div><div class="line">    cout &lt;&lt; &quot;Enter the second complex number:&quot; &lt;&lt; endl;</div><div class="line">    cin &gt;&gt; b0 &gt;&gt; b1;</div><div class="line"></div><div class="line">    Complex a(a0,a1);</div><div class="line">    Complex b(b0,b1);</div><div class="line"></div><div class="line"></div><div class="line">    cout &lt;&lt; &quot;(&quot; &lt;&lt; a.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; + &quot; &lt;&lt; &quot;(&quot; &lt;&lt; b.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; = &quot; &lt;&lt; (a+b).toString() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;(&quot; &lt;&lt; a.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; - &quot; &lt;&lt; &quot;(&quot; &lt;&lt; b.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; = &quot; &lt;&lt; (a-b).toString() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;(&quot; &lt;&lt; a.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; * &quot; &lt;&lt; &quot;(&quot; &lt;&lt; b.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; = &quot; &lt;&lt; (a*b).toString() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;(&quot; &lt;&lt; a.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; / &quot; &lt;&lt; &quot;(&quot; &lt;&lt; b.toString() &lt;&lt; &quot;)&quot; &lt;&lt; &quot; = &quot; &lt;&lt; (a/b).toString() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;|&quot; &lt;&lt; a.toString() &lt;&lt; &quot;|&quot; &lt;&lt; &quot; = &quot; &lt;&lt; a.abs() &lt;&lt; endl;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;复数形式是a+bi，其中a和b是实数，i是。a和b分别被称为复数的实部和虚部。可以使用下列公式实现复数的加、减、乘、除：&lt;/
    
    </summary>
    
      <category term="C++" scheme="https://chanran.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>寻找最大子方阵</title>
    <link href="https://chanran.github.io/2016/12/16/find-largest-matrix-block/"/>
    <id>https://chanran.github.io/2016/12/16/find-largest-matrix-block/</id>
    <published>2016-12-16T07:46:00.000Z</published>
    <updated>2016-12-16T08:00:57.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个元素为0或1的方阵，编写一个程序，找出其中最大的子方阵，使得该子方阵的元素都是1。程序先提示用户输入矩阵的行数，然后提示用户输入矩阵内容，打印输出最大子方阵的第一个元素的位置以及最大子方阵的行数。假定矩阵最多有100行。下面是样例运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Enter the number of rows for the matrix: 5  ~Enter</div><div class="line">Enter the matrix row by row:</div><div class="line">1  0  1  0  1  ~Enter</div><div class="line">1  1  1  0  1  ~Enter</div><div class="line">1  0  1  1  1  ~Enter</div><div class="line">1  0  1  1  1  ~Enter</div><div class="line">1  0  1  1  1  ~Enter</div><div class="line">The maximum square submatrix is at (2，2) with size 3</div></pre></td></tr></table></figure>
<p>程序中应实现下面的函数来寻找最大子方阵：<br>vector <int> findLargestBlock (const vector <vector <int="">&gt; &amp; m)<br>返回值是一个向量，包含3个值，前两个值代表该最大子方阵第一个元素的行标和列标，第三个值表示该最大子方阵的行数。</vector></int></p>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><blockquote>
<p>没用什么优化算法，暴力解题。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">vector &lt;int&gt; findLargestBlock (const vector &lt;vector &lt;int&gt; &gt; &amp;m,int n)&#123;</div><div class="line">    int t = 1;</div><div class="line">    int i = 0,j = 0,l = 0;</div><div class="line">    int x = 0,y = 0;</div><div class="line">    vector&lt;int&gt; result(3,0);</div><div class="line"></div><div class="line">    for(l=n;l&gt;=1;l--)&#123; //矩阵维数，从最大开始</div><div class="line">        for(i=0;i&lt;=n-l;i++)&#123;</div><div class="line">            for(j=0;j&lt;=n-l;j++)&#123;</div><div class="line">                t=1;</div><div class="line">                for(x=i;x&lt;i+l;x++)&#123;</div><div class="line">                    for(y=j;y&lt;j+l;y++)&#123;</div><div class="line">                        if(m[x][y]!=1)&#123;    //不为1退出此轮循环</div><div class="line">                            t=0;</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    if(t==0) break;</div><div class="line">                &#125;</div><div class="line">                if(t==1) break;</div><div class="line">            &#125;</div><div class="line">            if(t==1) break;</div><div class="line">        &#125;</div><div class="line">        if(t==1) break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    result[0] = i;</div><div class="line">    result[1] = j;</div><div class="line">    result[2] = l;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line"></div><div class="line">    int n;</div><div class="line">    vector&lt;vector &lt;int&gt; &gt; m(100,vector&lt;int&gt;(100,0));</div><div class="line">    cout &lt;&lt; &quot;Enter the number of rows for the matrix:&quot;;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    cout &lt;&lt; &quot;Enter the matrix row by row:&quot; &lt;&lt; endl;</div><div class="line">    int numOfOne = 0;</div><div class="line">    for (int i = 0; i &lt; n; i++)&#123;</div><div class="line">        for (int j = 0; j &lt; n; j++)&#123;</div><div class="line">            cin &gt;&gt; m[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    vector&lt;int&gt; result =  findLargestBlock(m,n);</div><div class="line"></div><div class="line">    cout &lt;&lt; &quot;横坐标：&quot; &lt;&lt; result[0] &lt;&lt; &quot; 纵坐标：&quot; &lt;&lt; result[1] &lt;&lt; &quot; 最大子方阵的行数：&quot; &lt;&lt; result[2] &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个元素为0或1的方阵，编写一个程序，找出其中最大的子方阵，使得该子方阵的元素都是1。程序先提示用户输入矩阵的行数，然后
    
    </summary>
    
      <category term="C++" scheme="https://chanran.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://chanran.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Uncaught TypeError: _react2.default.render is not a function 解决方法</title>
    <link href="https://chanran.github.io/2016/12/11/Uncaught-TypeError-react2-default-render-is-not-a-function/"/>
    <id>https://chanran.github.io/2016/12/11/Uncaught-TypeError-react2-default-render-is-not-a-function/</id>
    <published>2016-12-11T07:39:25.000Z</published>
    <updated>2016-12-16T08:21:04.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在浏览器上报错Uncaught-TypeError-react2-default-render-is-not-a-function"><a href="#在浏览器上报错Uncaught-TypeError-react2-default-render-is-not-a-function" class="headerlink" title="在浏览器上报错Uncaught TypeError: _react2.default.render is not a function"></a>在浏览器上报错<code>Uncaught TypeError: _react2.default.render is not a function</code></h1><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote>
<p>React版本过高，不支持React.render()方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">import LocalDb from &apos;localDb&apos;;</div><div class="line">import TodoHeader from &apos;./TodoHeader&apos;;</div><div class="line">import TodoMain from &apos;./TodoMain&apos;;</div><div class="line">import TodoFooter from &apos;./TodoFooter&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。</div><div class="line"> * 上面的TodoHeader是用来输入任务的地方，中间的TodoMain是用来展示任务列表的,</div><div class="line"> * 下面的TodoFooter提供一些特殊的方法，比如全选、删除等。</div><div class="line"> */</div><div class="line"></div><div class="line">class App extends React.Component&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        super();</div><div class="line">        this.db = new LocalDb(&apos;ReactDemo&apos;);</div><div class="line">        //定义组件状态</div><div class="line">        this.state  =&#123;</div><div class="line">            todos:this.db.get(&apos;todos&apos;) || [],</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 判断是否所有任务的状态都完成，同步底部的全选框</div><div class="line">    allChecked()&#123;</div><div class="line">        let isAllChecked = false;</div><div class="line">        if (this.state.todos.every(todo  =&gt; todo.isDone))&#123;</div><div class="line">            isAllChecked = true;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:this.state.todos,</div><div class="line">            isAllChecked:isAllChecked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 添加任务，是传递给Header组件的方法</div><div class="line">    addTodo(todoItem)&#123;</div><div class="line">        this.state.todos.push(todoItem);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">        this.allChecked();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 删除当前的任务，传递给TodoItem的方法</div><div class="line">    deleteTodo(index)&#123;</div><div class="line">        this.state.todos.splice(index,1);</div><div class="line">        this.setState(&#123;todos:this.state.todos&#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 清除已完成的任务，传递给Footer组件的方法</div><div class="line">    clearDone()&#123;</div><div class="line">        let todos = this.state.todos.filter(todo =&gt; !todo.isDone);</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:todos,</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 改变任务状态，传递给TodoItem和Footer组件的方法</div><div class="line">    changeTodoState(index,isDone,isChangeAll=false)&#123;</div><div class="line">        if(isChangeAll)&#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                todos:this.state.todos.map( (todo) =&gt; &#123;</div><div class="line">                    todo.isDone = isDone;</div><div class="line">                    return todo;</div><div class="line">                &#125;),</div><div class="line">                isAllChecked:isDone</div><div class="line">            &#125;);</div><div class="line">        &#125;else&#123;</div><div class="line">            this.state.todos[index].isDone = isDone;</div><div class="line">            this.allChecked();</div><div class="line">        &#125;</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//组件渲染方法</div><div class="line">    render()&#123;</div><div class="line">        let info = &#123;</div><div class="line">            isAllChecked:this.state.isAllChecked,</div><div class="line">            todoCount:this.state.todos.length || 0,</div><div class="line">            todoDoneCount:(this.state.todos &amp;&amp; this.state.todos.filter((todo)=&gt;todo.isDone)).length || 0</div><div class="line">        &#125;;</div><div class="line">        return (</div><div class="line">        &lt;div className=&quot;todo-wrap&quot;&gt;</div><div class="line">            &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">React.render(&lt;App/&gt;,document.getElementById(&apos;app&apos;));   //这句的问题</div></pre></td></tr></table></figure>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>降低React版本（不推荐）</li>
<li>将最后一句<code>React.render(&lt;App/&gt;,document.getElementById(&#39;app&#39;));</code>改成<code>ReactDOM.render(&lt;App/&gt;,document.getElementById(&#39;app&#39;));</code> （如果没有引入react-dom是会报找不到ReactDOM方法的）</li>
</ol>
<h1 id="其实有关DOM操作的时候，都需要用ReactDOM来代替React。"><a href="#其实有关DOM操作的时候，都需要用ReactDOM来代替React。" class="headerlink" title="其实有关DOM操作的时候，都需要用ReactDOM来代替React。"></a>其实有关DOM操作的时候，都需要用ReactDOM来代替React。</h1><p>例如：这里也会报同样的错误</p>
<p><code>React.findDOMNode(this).style.background = &#39;#eee&#39;;</code></p>
<p>改成这样就好了</p>
<p><code>ReactDOM.findDOMNode(this).style.background = &#39;#eee&#39;;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在浏览器上报错Uncaught-TypeError-react2-default-render-is-not-a-function&quot;&gt;&lt;a href=&quot;#在浏览器上报错Uncaught-TypeError-react2-default-render-is-not-
    
    </summary>
    
      <category term="react" scheme="https://chanran.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://chanran.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack react 在浏览器报错:Uncaught ReferenceError: React is not defined</title>
    <link href="https://chanran.github.io/2016/12/11/webpack-react-error-Uncaught-ReferenceError-React-is-not-defined/"/>
    <id>https://chanran.github.io/2016/12/11/webpack-react-error-Uncaught-ReferenceError-React-is-not-defined/</id>
    <published>2016-12-11T07:21:25.000Z</published>
    <updated>2016-12-11T07:29:49.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题出在webpack-config-js内容"><a href="#问题出在webpack-config-js内容" class="headerlink" title="问题出在webpack.config.js内容"></a>问题出在webpack.config.js内容</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">module.exports = &#123;</div><div class="line">    entry: [</div><div class="line">        &apos;webpack/hot/dev-server&apos;,</div><div class="line">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</div><div class="line">        &apos;./src/components/index/app.js&apos;</div><div class="line">    ],</div><div class="line">    output: &#123;</div><div class="line">        path: &apos;./build/&apos;,</div><div class="line">        filename: &apos;bundle.js&apos;</div><div class="line">    &#125;,</div><div class="line">    externals: &#123;</div><div class="line">        &apos;react&apos;: &apos;React&apos;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123; test: /\.js$/, loader: &apos;jsx!babel&apos;, include: /src/&#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>这里的<code>externals:{&#39;react&#39;:&#39;React&#39;}</code></strong>会将React赋给交给windows.React.而且给commonJS的require(‘React’)用(注意不是require(‘react’))。</p>
<h1 id="在代码里使用import而不是require的话就会在浏览器报错了。-请忽略长长的代码"><a href="#在代码里使用import而不是require的话就会在浏览器报错了。-请忽略长长的代码" class="headerlink" title="在代码里使用import而不是require的话就会在浏览器报错了。(请忽略长长的代码)"></a>在代码里使用import而不是require的话就会在浏览器报错了。(请忽略长长的代码)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import LocalDb from &apos;localDb&apos;;</div><div class="line">import TodoHeader from &apos;./TodoHeader&apos;;</div><div class="line">import TodoMain from &apos;./TodoMain&apos;;</div><div class="line">import TodoFooter from &apos;./TodoFooter&apos;;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 从上面的渲染（render）方法可以看出，组件的结构分为三部分，就是上中下。</div><div class="line"> * 上面的TodoHeader是用来输入任务的地方，中间的TodoMain是用来展示任务列表的,</div><div class="line"> * 下面的TodoFooter提供一些特殊的方法，比如全选、删除等。</div><div class="line"> */</div><div class="line"></div><div class="line">class App extends React.Component&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        super();</div><div class="line">        this.db = new LocalDb(&apos;ReactDemo&apos;);</div><div class="line">        //定义组件状态</div><div class="line">        this.state  =&#123;</div><div class="line">            todos:this.db.get(&apos;todos&apos;) || [],</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 判断是否所有任务的状态都完成，同步底部的全选框</div><div class="line">    allChecked()&#123;</div><div class="line">        let isAllChecked = false;</div><div class="line">        if (this.state.todos.every(todo  =&gt; todo.isDone))&#123;</div><div class="line">            isAllChecked = true;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:this.state.todos,</div><div class="line">            isAllChecked:isAllChecked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 添加任务，是传递给Header组件的方法</div><div class="line">    addTodo(todoItem)&#123;</div><div class="line">        this.state.todos.push(todoItem);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">        this.allChecked();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 删除当前的任务，传递给TodoItem的方法</div><div class="line">    deleteTodo(index)&#123;</div><div class="line">        this.state.todos.splice(index,1);</div><div class="line">        this.setState(&#123;todos:this.state.todos&#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 清除已完成的任务，传递给Footer组件的方法</div><div class="line">    clearDone()&#123;</div><div class="line">        let todos = this.state.todos.filter(todo =&gt; !todo.isDone);</div><div class="line">        this.setState(&#123;</div><div class="line">            todos:todos,</div><div class="line">            isAllChecked:false</div><div class="line">        &#125;);</div><div class="line">        this.db.set(&apos;todos&apos;,todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">// 改变任务状态，传递给TodoItem和Footer组件的方法</div><div class="line">    changeTodoState(index,isDone,isChangeAll=false)&#123;</div><div class="line">        if(isChangeAll)&#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                todos:this.state.todos.map( (todo) =&gt; &#123;</div><div class="line">                    todo.isDone = isDone;</div><div class="line">                    return todo;</div><div class="line">                &#125;),</div><div class="line">                isAllChecked:isDone</div><div class="line">            &#125;);</div><div class="line">        &#125;else&#123;</div><div class="line">            this.state.todos[index].isDone = isDone;</div><div class="line">            this.allChecked();</div><div class="line">        &#125;</div><div class="line">        this.db.set(&apos;todos&apos;,this.state.todos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//组件渲染方法</div><div class="line">    render()&#123;</div><div class="line">        let info = &#123;</div><div class="line">            isAllChecked:this.state.isAllChecked,</div><div class="line">            todoCount:this.state.todos.length || 0,</div><div class="line">            todoDoneCount:(this.state.todos &amp;&amp; this.state.todos.filter((todo)=&gt;todo.isDone)).length || 0</div><div class="line">        &#125;;</div><div class="line">        return (</div><div class="line">        &lt;div className=&quot;todo-wrap&quot;&gt;</div><div class="line">            &lt;TodoHeader addTodo=&#123;this.addTodo.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoMain todos=&#123;this.state.todos&#125; deleteTodo=&#123;this.deleteTodo.bind(this)&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; /&gt;</div><div class="line">            &lt;TodoFooter &#123;...info&#125; changeTodoState=&#123;this.changeTodoState.bind(this)&#125; clearDone=&#123;this.clearDone.bind(this)&#125; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">React.render(&lt;App/&gt;,document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure>
<h1 id="stackoverflow这里解释得更清楚"><a href="#stackoverflow这里解释得更清楚" class="headerlink" title="stackoverflow这里解释得更清楚"></a>stackoverflow这里解释得更清楚</h1><ul>
<li><a href="http://stackoverflow.com/questions/32070303/uncaught-referenceerror-react-is-not-defined" target="_blank" rel="external">Uncaught ReferenceError: React is not defined</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题出在webpack-config-js内容&quot;&gt;&lt;a href=&quot;#问题出在webpack-config-js内容&quot; class=&quot;headerlink&quot; title=&quot;问题出在webpack.config.js内容&quot;&gt;&lt;/a&gt;问题出在webpack.confi
    
    </summary>
    
      <category term="react" scheme="https://chanran.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://chanran.github.io/tags/react/"/>
    
      <category term="webpack" scheme="https://chanran.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>eslint react xxx is assigned a value but never used 的解决办法</title>
    <link href="https://chanran.github.io/2016/12/11/eslint-react-xxx-is-assigned-a-value-but-never-used-solution/"/>
    <id>https://chanran.github.io/2016/12/11/eslint-react-xxx-is-assigned-a-value-but-never-used-solution/</id>
    <published>2016-12-10T16:09:15.000Z</published>
    <updated>2016-12-16T08:27:35.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint中文翻译"><a href="#ESLint中文翻译" class="headerlink" title="ESLint中文翻译"></a>ESLint中文翻译</h1><ul>
<li><a href="http://eslint.cn/" target="_blank" rel="external">ESLint</a></li>
</ul>
<h1 id="问题重现-定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误"><a href="#问题重现-定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误" class="headerlink" title="问题重现(定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误)"></a>问题重现(定义了变量并使用了，但是eslint还是报定义过了但是未使用的错误)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">let Form = React.createClass(&#123;</div><div class="line">	render: () =&gt; &#123; &lt; div className = &quot;form&quot; &gt; &lt; div className = &quot;form-title&quot; &gt; Simple Login Form &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;name-div&quot;&gt;&lt;label htmlFor=&quot;username&quot; className=&quot;name-label&quot;&gt;Name:&lt;/label &gt; &lt;input id=&quot;username&quot; className=&quot;name-input&quot; name=&quot;username&quot; type=&quot;text&quot;/&gt; &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;pwd-div&quot;&gt;&lt;label htmlFor=&quot;password&quot; className=&quot;pwd-label&quot;&gt;Password:&lt;/label &gt; &lt;input id=&quot;password&quot; className=&quot;pwd-input&quot; name=&quot;password&quot; type=&quot;password&quot;/&gt; &lt; /div&gt;</div><div class="line">        &lt;/div &gt;;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Form /&gt;,document.getElementById(&apos;loginForm&apos;));</div></pre></td></tr></table></figure>
<p>然后atom 的eslint报了<code>no-unused-vars &#39;Form&#39; is assigned a value but never used.at line 4 col 5</code>的错误。</p>
<h1 id="比较麻烦的解决办法–每一行报错的地方都加一行注释"><a href="#比较麻烦的解决办法–每一行报错的地方都加一行注释" class="headerlink" title="比较麻烦的解决办法–每一行报错的地方都加一行注释"></a>比较麻烦的解决办法–每一行报错的地方都加一行注释</h1><p>在声明变量的当前行加上一条注释 <code>// eslint-disable-line no-unused-vars</code></p>
<p>即是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">let Form = React.createClass(&#123; // eslint-disable-line no-unused-vars</div><div class="line">	render: () =&gt; &#123; &lt; div className = &quot;form&quot; &gt; &lt; div className = &quot;form-title&quot; &gt; Simple Login Form &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;name-div&quot;&gt;&lt;label htmlFor=&quot;username&quot; className=&quot;name-label&quot;&gt;Name:&lt;/label &gt; &lt;input id=&quot;username&quot; className=&quot;name-input&quot; name=&quot;username&quot; type=&quot;text&quot;/&gt; &lt; /div&gt;</div><div class="line">              &lt;div className=&quot;pwd-div&quot;&gt;&lt;label htmlFor=&quot;password&quot; className=&quot;pwd-label&quot;&gt;Password:&lt;/label &gt; &lt;input id=&quot;password&quot; className=&quot;pwd-input&quot; name=&quot;password&quot; type=&quot;password&quot;/&gt; &lt; /div&gt;</div><div class="line">        &lt;/div &gt;;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Form /&gt;,document.getElementById(&apos;loginForm&apos;));</div></pre></td></tr></table></figure></p>
<h1 id="比较暴力的解决方法–直接禁用变量声明但未使用的提示-但是也比较省心，不用加一堆注释"><a href="#比较暴力的解决方法–直接禁用变量声明但未使用的提示-但是也比较省心，不用加一堆注释" class="headerlink" title="比较暴力的解决方法–直接禁用变量声明但未使用的提示,但是也比较省心，不用加一堆注释"></a>比较暴力的解决方法–直接禁用变量声明但未使用的提示,但是也比较省心，不用加一堆注释</h1><p>设置.eslint.json(或者是yaml等)的”no-unused-vars”规则为禁用(0为禁用)。具体可以看<a href="http://eslint.cn/docs/rules/no-unused-vars" target="_blank" rel="external">这里</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;rules&quot;:&#123;</div><div class="line">    &quot;no-unused-vars&quot;:0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ESLint中文翻译&quot;&gt;&lt;a href=&quot;#ESLint中文翻译&quot; class=&quot;headerlink&quot; title=&quot;ESLint中文翻译&quot;&gt;&lt;/a&gt;ESLint中文翻译&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eslint.cn/&quot; targ
    
    </summary>
    
      <category term="react" scheme="https://chanran.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://chanran.github.io/tags/react/"/>
    
      <category term="eslint" scheme="https://chanran.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>写electron遇到的坑</title>
    <link href="https://chanran.github.io/2016/12/08/%E5%86%99electron%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://chanran.github.io/2016/12/08/写electron遇到的坑/</id>
    <published>2016-12-07T16:37:28.000Z</published>
    <updated>2016-12-07T17:20:02.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="electron进程之间的通信"><a href="#electron进程之间的通信" class="headerlink" title="electron进程之间的通信"></a>electron进程之间的通信</h1><h2 id="渲染进程和主进程之间的通信"><a href="#渲染进程和主进程之间的通信" class="headerlink" title="渲染进程和主进程之间的通信"></a>渲染进程和主进程之间的通信</h2><ol>
<li>渲染进程和主进程之间通过ipc通信，渲染进程使用的是ipcRenderer,而主进程使用的是ipcMain。</li>
</ol>
<h2 id="渲染进程和渲染进程之间的通信"><a href="#渲染进程和渲染进程之间的通信" class="headerlink" title="渲染进程和渲染进程之间的通信"></a>渲染进程和渲染进程之间的通信</h2><ol>
<li>渲染进程和渲染进程之间的通信：渲染进程1-&gt;主进程-&gt;渲染进程2。</li>
</ol>
<h2 id="进程之间数据共享：IPC，HTML5-API-Storage-API-IndexedDB-等"><a href="#进程之间数据共享：IPC，HTML5-API-Storage-API-IndexedDB-等" class="headerlink" title="进程之间数据共享：IPC，HTML5 API(Storage API,IndexedDB)等"></a>进程之间数据共享：IPC，HTML5 API(Storage API,IndexedDB)等</h2><p><strong>注意不要犯的错</strong>:比如在进程1中改变过了ES6类1的静态属性，如果在进程2中require了这个类1，那么进程2只能得到进程1改变类1的静态属性之前的值。</p>
<ul>
<li>IPC通信:可以使用Electron中提供的IPC系统。它在主进程中将一个对象储存为全局变量，然后可以通过remote模块操作它们</li>
<li>HTML5 API</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;electron进程之间的通信&quot;&gt;&lt;a href=&quot;#electron进程之间的通信&quot; class=&quot;headerlink&quot; title=&quot;electron进程之间的通信&quot;&gt;&lt;/a&gt;electron进程之间的通信&lt;/h1&gt;&lt;h2 id=&quot;渲染进程和主进程之间的通信
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="electron" scheme="https://chanran.github.io/tags/electron/"/>
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://chanran.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>写vuejs需要注意的地方</title>
    <link href="https://chanran.github.io/2016/12/06/%E5%86%99vuejs%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://chanran.github.io/2016/12/06/写vuejs需要注意的地方/</id>
    <published>2016-12-06T10:36:11.000Z</published>
    <updated>2016-12-06T10:42:48.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue的实例嵌套"><a href="#Vue的实例嵌套" class="headerlink" title="Vue的实例嵌套"></a>Vue的实例嵌套</h1><h2 id="最高级的实例为主，低级的实例方法"><a href="#最高级的实例为主，低级的实例方法" class="headerlink" title="最高级的实例为主，低级的实例方法"></a>最高级的实例为主，低级的实例方法</h2><h1 id="Vue的数组更新问题"><a href="#Vue的数组更新问题" class="headerlink" title="Vue的数组更新问题"></a>Vue的数组更新问题</h1><h2 id="不能直接赋值数组，触发不了视图更新"><a href="#不能直接赋值数组，触发不了视图更新" class="headerlink" title="不能直接赋值数组，触发不了视图更新"></a>不能直接赋值数组，触发不了视图更新</h2><h2 id="使用变异方法和非变异方法"><a href="#使用变异方法和非变异方法" class="headerlink" title="使用变异方法和非变异方法"></a>使用变异方法和非变异方法</h2><h1 id="Vue对src属性的处理"><a href="#Vue对src属性的处理" class="headerlink" title="Vue对src属性的处理"></a>Vue对src属性的处理</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue的实例嵌套&quot;&gt;&lt;a href=&quot;#Vue的实例嵌套&quot; class=&quot;headerlink&quot; title=&quot;Vue的实例嵌套&quot;&gt;&lt;/a&gt;Vue的实例嵌套&lt;/h1&gt;&lt;h2 id=&quot;最高级的实例为主，低级的实例方法&quot;&gt;&lt;a href=&quot;#最高级的实例为主，低级的实
    
    </summary>
    
      <category term="javascript" scheme="https://chanran.github.io/categories/javascript/"/>
    
    
      <category term="vuejs" scheme="https://chanran.github.io/tags/vuejs/"/>
    
      <category term="MVVM" scheme="https://chanran.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu放wifi(热点)给安卓手机</title>
    <link href="https://chanran.github.io/2016/11/30/ubuntu%E6%94%BEwifi(%E7%83%AD%E7%82%B9)%E7%BB%99%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/"/>
    <id>https://chanran.github.io/2016/11/30/ubuntu放wifi(热点)给安卓手机/</id>
    <published>2016-11-30T01:19:38.000Z</published>
    <updated>2016-11-30T02:24:15.689Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/ubuntu.png" alt="ubuntu"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于宿舍路由器坏了，手机流量急剧下降（刷twitter…)，所以只能出此下册（个人不太喜欢电脑放wifi）。</p>
<h1 id="ubuntu16-04lts软件中心安装kde5-nm-connection-editor"><a href="#ubuntu16-04lts软件中心安装kde5-nm-connection-editor" class="headerlink" title="ubuntu16.04lts软件中心安装kde5-nm-connection-editor"></a>ubuntu16.04lts软件中心安装kde5-nm-connection-editor</h1><blockquote>
<p>注：ubuntu14.04lts该软件为kde5-nm-connection-editor。</p>
</blockquote>
<p><img src="/img/kdeInstall.png" alt="install kde"></p>
<h1 id="在终端打开kde5-nm-connection-editor"><a href="#在终端打开kde5-nm-connection-editor" class="headerlink" title="在终端打开kde5-nm-connection-editor"></a>在终端打开kde5-nm-connection-editor</h1><blockquote>
<p>注：ubuntu14.04lts:在终端输入kde-nm-connection-editor</p>
</blockquote>
<p><img src="/img/openKde.png" alt="open kde"></p>
<h1 id="添加无线-共享-连接"><a href="#添加无线-共享-连接" class="headerlink" title="添加无线(共享)连接"></a>添加无线(共享)连接</h1><p><img src="/img/shareWIFI.jpg" alt="add wireless(shared)"></p>
<h1 id="填写连接信息：连接名称，SSID-模式。设置热点密码"><a href="#填写连接信息：连接名称，SSID-模式。设置热点密码" class="headerlink" title="填写连接信息：连接名称，SSID,模式。设置热点密码"></a>填写连接信息：连接名称，SSID,模式。设置热点密码</h1><p><img src="/img/fillBlank.png" alt="fill blank"></p>
<p><img src="/img/setPasswd.png" alt="set passwd"></p>
<h1 id="记得连接有线网络，不然是释放不了wifi-热点的-点击右上角网络连接的icon-选择连接隐藏网络，选择你设置的连接名称"><a href="#记得连接有线网络，不然是释放不了wifi-热点的-点击右上角网络连接的icon-选择连接隐藏网络，选择你设置的连接名称" class="headerlink" title="记得连接有线网络，不然是释放不了wifi(热点的),点击右上角网络连接的icon,选择连接隐藏网络，选择你设置的连接名称"></a><strong>记得连接有线网络</strong>，不然是释放不了wifi(热点的),点击右上角网络连接的icon,选择连接隐藏网络，选择你设置的连接名称</h1><p><img src="/img/connectToWIFI.jpg" alt="connect to wifi"></p>
<p><img src="/img/connectToBlueWIFI.jpg" alt="connect to blue&#39;wifi"></p>
<blockquote>
<p>点击连接</p>
</blockquote>
<p><img src="/img/blueWIFI.png" alt="blue&#39;wifi"></p>
<p><strong>这里有点小问题</strong>：好像不能设置wifi安全性，连不上<strong>blue’wifi</strong>。没关系，我们可以另辟蹊径。</p>
<p><img src="/img/setWIFI.jpg" alt="set wifi"></p>
<p><img src="/img/setBlueWIFI.png" alt="set blue&#39;wifi"></p>
<blockquote>
<p>打开之后切换到Wi-Fi安全性的tab那里</p>
</blockquote>
<p><img src="/img/setWIFISec.png" alt="set wifi security"></p>
<h1 id="都设置好了之后就拿去你手机连接你设置的热点吧～"><a href="#都设置好了之后就拿去你手机连接你设置的热点吧～" class="headerlink" title="都设置好了之后就拿去你手机连接你设置的热点吧～"></a>都设置好了之后就拿去你手机连接你设置的热点吧～</h1><blockquote>
<p>可能刚设置完，需要等几分钟才能生效的。</p>
</blockquote>
<p><img src="/img/mobileWIFI.jpg" alt="mobile connect to hot point"></p>
<p><img src="/img/succeedConnect.jpg" alt="success"></p>
<h1 id="如果还是设置不好，那就参考下面的链接"><a href="#如果还是设置不好，那就参考下面的链接" class="headerlink" title="如果还是设置不好，那就参考下面的链接"></a>如果还是设置不好，那就参考下面的链接</h1><ul>
<li><p><a href="http://ubuntuhandbook.org/index.php/2014/06/share-internet-with-android-ubuntu-1404/" target="_blank" rel="external">Share Internet Connection With Android in Ubuntu 14.04</a></p>
</li>
<li><p><a href="http://www.jb51.net/os/Ubuntu/344088.html" target="_blank" rel="external">ubuntu14.04怎么建立wifi热点？</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/ubuntu.png&quot; alt=&quot;ubuntu&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于宿舍路由器坏了，手机流量急剧下降（刷tw
    
    </summary>
    
      <category term="瞎折腾" scheme="https://chanran.github.io/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="ubuntu" scheme="https://chanran.github.io/tags/ubuntu/"/>
    
      <category term="wifi" scheme="https://chanran.github.io/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>electron开发跨平台桌面应用</title>
    <link href="https://chanran.github.io/2016/11/29/electron%E5%BC%80%E5%8F%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>https://chanran.github.io/2016/11/29/electron开发跨平台桌面应用/</id>
    <published>2016-11-29T15:49:23.000Z</published>
    <updated>2016-11-30T01:18:34.379Z</updated>
    
    <content type="html"><![CDATA[<p>留坑======</p>
<h1 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装electron</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;留坑======&lt;/p&gt;
&lt;h1 id=&quot;安装electron&quot;&gt;&lt;a href=&quot;#安装electron&quot; class=&quot;headerlink&quot; title=&quot;安装electron&quot;&gt;&lt;/a&gt;安装electron&lt;/h1&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="electron" scheme="https://chanran.github.io/tags/electron/"/>
    
      <category term="js" scheme="https://chanran.github.io/tags/js/"/>
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>写nodejs时遇到的坑</title>
    <link href="https://chanran.github.io/2016/11/29/%E5%86%99nodejs%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://chanran.github.io/2016/11/29/写nodejs时遇到的坑/</id>
    <published>2016-11-29T11:16:45.000Z</published>
    <updated>2016-12-16T08:15:19.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/nodejs.jpg" alt="nodejs"></p>
<h1 id="坑一：模块require"><a href="#坑一：模块require" class="headerlink" title="坑一：模块require"></a>坑一：模块require</h1><h2 id="在html引入的js文件里require的时候是基于该html文件的。"><a href="#在html引入的js文件里require的时候是基于该html文件的。" class="headerlink" title="在html引入的js文件里require的时候是基于该html文件的。"></a>在html引入的js文件里require的时候是基于该html文件的。</h2><p><code>目录结构</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">   index.html</div><div class="line">   js/</div><div class="line">      index.js</div><div class="line">      test.js</div></pre></td></tr></table></figure>
<p><code>src/index.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;script src=&quot;./js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>src/js/index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const test = require(&apos;./test&apos;);</div><div class="line">test();</div></pre></td></tr></table></figure>
<p><code>src/js/test.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = function()&#123;</div><div class="line">  console.log(&apos;you are require src/js/test.js&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用<strong>nodejs</strong>运行上面的代码，打开<strong>index.html</strong>，会报找不到<strong>./test</strong>模块的错误，将<strong>index.js</strong>的代码改成下面的就行了。</p>
<p><code>src/js/index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const test = require(&apos;./js/test&apos;); //基于index.html所在目录下。</div><div class="line">test();</div></pre></td></tr></table></figure>
<h2 id="nodejs循环依赖（每种情况不同解决方法）。"><a href="#nodejs循环依赖（每种情况不同解决方法）。" class="headerlink" title="nodejs循环依赖（每种情况不同解决方法）。"></a>nodejs循环依赖（每种情况不同解决方法）。</h2><blockquote>
<p>定义： 当有require()模块循环时，模块返回的时候还没有执行完。<br>即： a模块 require b模块，b模块也 require a模块。</p>
<p>官网例子:</p>
</blockquote>
<p>1.当<strong>main.js先require a.js</strong>时，此时程序进入a.js执行require b.js，然后程序又进入b.js之后b.js尝试require a.js，此时就发现有问题,<strong> a.js返回了没有执行完的模块</strong>给b.js,即a.js执行到<code>exports.done =false</code>就返回给b.js了，所以在b.js里的<strong>a.js是没有执行完</strong>的。而如果是另一种情况，a.js是用module.exports出来的，那么b.js得到的是一个空对象object{}。（这里有点绕，有空画一张图出来比较好理解）</p>
<p><code>a.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;a starting&apos;);</div><div class="line">exports.done = false;</div><div class="line">const b = require(&apos;./b.js&apos;);</div><div class="line">console.log(&apos;in a, b.done = %j&apos;, b.done);</div><div class="line">exports.done = true;</div><div class="line">console.log(&apos;a done&apos;);</div></pre></td></tr></table></figure>
<p><code>b.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;b starting&apos;);</div><div class="line">exports.done = false;</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">console.log(&apos;in b, a.done = %j&apos;, a.done);</div><div class="line">exports.done = true;</div><div class="line">console.log(&apos;b done&apos;);</div></pre></td></tr></table></figure>
<p><code>main.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;main starting&apos;);</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">const b = require(&apos;./b.js&apos;);</div><div class="line">console.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</div></pre></td></tr></table></figure>
<p><code>执行结果</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">main starting</div><div class="line">a starting</div><div class="line">b starting</div><div class="line">in b, a.done = false</div><div class="line">b done</div><div class="line">in a, b.done = true</div><div class="line">a done</div><div class="line">in main, a.done=true, b.done=true</div></pre></td></tr></table></figure>
<p>2.基本同上，但是main.js有所改动。这里main.js先调用b.js。对比上面main.js先调用a.js。程序入口不一样，程序的执行顺序也不一样，结果也反过来了。</p>
<p><code>main.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;main starting&apos;);</div><div class="line">const b = require(&apos;./b.js&apos;);     //对比之前的main.js，这里先调用b.js</div><div class="line">const a = require(&apos;./a.js&apos;);</div><div class="line">console.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</div></pre></td></tr></table></figure>
<p><code>执行结果</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">main starting</div><div class="line">b starting</div><div class="line">a starting</div><div class="line">in a, b.done = false</div><div class="line">a done</div><div class="line">in b, a.done = true</div><div class="line">b done</div><div class="line">in main, a.done=true, b.done=true</div></pre></td></tr></table></figure>
<h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/nodejs.jpg&quot; alt=&quot;nodejs&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;坑一：模块require&quot;&gt;&lt;a href=&quot;#坑一：模块require&quot; class=&quot;headerlink&quot; title=&quot;坑一：模块require&quot;&gt;&lt;/a&gt;坑一
    
    </summary>
    
      <category term="nodejs" scheme="https://chanran.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://chanran.github.io/tags/nodejs/"/>
    
      <category term="commonjs" scheme="https://chanran.github.io/tags/commonjs/"/>
    
  </entry>
  
  <entry>
    <title>记录读过的有意义的书籍</title>
    <link href="https://chanran.github.io/2016/11/13/%E8%AE%B0%E5%BD%95%E8%AF%BB%E8%BF%87%E7%9A%84%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%B9%A6%E7%B1%8D/"/>
    <id>https://chanran.github.io/2016/11/13/记录读过的有意义的书籍/</id>
    <published>2016-11-13T11:50:50.000Z</published>
    <updated>2016-12-23T07:31:13.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/yuedu.jpg" alt="阅读的猫"></p>
<blockquote>
<p>无论书读没读完,都对自己的成长有帮助。</p>
</blockquote>
<h1 id="文学类"><a href="#文学类" class="headerlink" title="文学类"></a>文学类</h1><h2 id="《薄暮》"><a href="#《薄暮》" class="headerlink" title="《薄暮》"></a>《薄暮》</h2><h2 id="《三国演义》"><a href="#《三国演义》" class="headerlink" title="《三国演义》"></a>《三国演义》</h2><h2 id="《水浒传》"><a href="#《水浒传》" class="headerlink" title="《水浒传》"></a>《水浒传》</h2><h1 id="杂志类"><a href="#杂志类" class="headerlink" title="杂志类"></a>杂志类</h1><h2 id="《青年文摘》"><a href="#《青年文摘》" class="headerlink" title="《青年文摘》"></a>《青年文摘》</h2><h2 id="《读者》"><a href="#《读者》" class="headerlink" title="《读者》"></a>《读者》</h2><h2 id="《哲思》"><a href="#《哲思》" class="headerlink" title="《哲思》"></a>《哲思》</h2><h1 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h1><blockquote>
<p>技术无分方向,学多了实践多了便会贯通。</p>
</blockquote>
<h2 id="《Javascript设计模式与开发实践》"><a href="#《Javascript设计模式与开发实践》" class="headerlink" title="《Javascript设计模式与开发实践》"></a>《Javascript设计模式与开发实践》</h2><h2 id="《HTML5-Canvas核心技术-图形、动画与游戏开发》"><a href="#《HTML5-Canvas核心技术-图形、动画与游戏开发》" class="headerlink" title="《HTML5 Canvas核心技术 图形、动画与游戏开发》"></a>《HTML5 Canvas核心技术 图形、动画与游戏开发》</h2><h2 id="《深入React技术栈》"><a href="#《深入React技术栈》" class="headerlink" title="《深入React技术栈》"></a>《深入React技术栈》</h2><h2 id="《React精髓》"><a href="#《React精髓》" class="headerlink" title="《React精髓》"></a>《React精髓》</h2><h2 id="《JavaScript高级程序设计-第2版-》"><a href="#《JavaScript高级程序设计-第2版-》" class="headerlink" title="《JavaScript高级程序设计(第2版)》"></a>《JavaScript高级程序设计(第2版)》</h2><h2 id="《JavaScript权威指南》"><a href="#《JavaScript权威指南》" class="headerlink" title="《JavaScript权威指南》"></a>《JavaScript权威指南》</h2><h2 id="《Javascript-Dom编程设计-第3版-》"><a href="#《Javascript-Dom编程设计-第3版-》" class="headerlink" title="《Javascript Dom编程设计(第3版)》"></a>《Javascript Dom编程设计(第3版)》</h2><h2 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a>《HTTP权威指南》</h2><h2 id="《Node-js权威指南》"><a href="#《Node-js权威指南》" class="headerlink" title="《Node.js权威指南》"></a>《Node.js权威指南》</h2><h2 id="《C-Primer-第5版-》"><a href="#《C-Primer-第5版-》" class="headerlink" title="《C++ Primer(第5版)》"></a>《C++ Primer(第5版)》</h2><h2 id="《白帽子讲Web安全-纪念版-》"><a href="#《白帽子讲Web安全-纪念版-》" class="headerlink" title="《白帽子讲Web安全(纪念版)》"></a>《白帽子讲Web安全(纪念版)》</h2><h2 id="《数据库系统概念》"><a href="#《数据库系统概念》" class="headerlink" title="《数据库系统概念》"></a>《数据库系统概念》</h2><h2 id="《Linux指令范例速查手册》-当做字典查指令"><a href="#《Linux指令范例速查手册》-当做字典查指令" class="headerlink" title="《Linux指令范例速查手册》(当做字典查指令)"></a>《Linux指令范例速查手册》(当做字典查指令)</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/yuedu.jpg&quot; alt=&quot;阅读的猫&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论书读没读完,都对自己的成长有帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;文学类&quot;&gt;&lt;a href=&quot;#文学类&quot; class=&quot;header
    
    </summary>
    
      <category term="阅读" scheme="https://chanran.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="书籍" scheme="https://chanran.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="阅读" scheme="https://chanran.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>[转载]计算机常用英语术语、词汇表</title>
    <link href="https://chanran.github.io/2016/11/12/%E8%BD%AC%E8%BD%BD-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
    <id>https://chanran.github.io/2016/11/12/转载-计算机专业术语/</id>
    <published>2016-11-12T07:48:15.000Z</published>
    <updated>2016-11-12T08:35:44.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自<a href="http://www.24en.com/study/words/2006-01-02/373.html" target="_blank" rel="external">计算机常用英语术语、词汇表</a></p>
</blockquote>
<p>Computer Vocabulary In Common Use<br>一、硬件类(Hardware)<br>二、软件类(Software)<br>三、网络类(Network)<br>四、其它</p>
<p>CPU(Center Processor Unit)中央处理单元<br>mainboard主板<br>RAM(random access<br>memory)随机存储器(内存)<br>ROM(Read Only Memory)只读存储器<br>Floppy Disk软盘<br>Hard Disk硬盘<br>CD-ROM光盘驱动器(光驱)<br>monitor监视器<br>keyboard键盘<br>mouse鼠标<br>chip芯片<br>CD-R光盘刻录机<br>HUB集线器<br>Modem= MOdulator-DEModulator,调制解调器<br>P-P(Plug and Play)即插即用<br>UPS(Uninterruptable Power Supply)不间断电源<br>BIOS(Basic-input-Output<br>System)基本输入输出系统<br>CMOS(Complementary Metal-Oxide-Semiconductor)互补金属氧化物半导体<br>setup安装<br>uninstall卸载<br>wizzard向导<br>OS(Operation Systrem)操作系统<br>OA(Office AutoMation)办公自动化<br>exit退出<br>edit编辑<br>copy复制<br>cut剪切<br>paste粘贴<br>delete删除<br>select选择<br>find查找<br>select all全选<br>replace替换<br>undo撤消<br>redo重做<br>program程序<br>license许可(证)<br>back前一步<br>next下一步<br>finish结束<br>folder文件夹<br>Destination Folder目的文件夹<br>user用户<br>click点击<br>double click双击<br>right click右击<br>settings设置<br>update更新<br>release发布<br>data数据<br>data base数据库<br>DBMS(Data Base Manege<br>System)数据库管理系统<br>view视图<br>insert插入<br>object对象<br>configuration配置<br>command命令<br>document文档<br>POST(power-on-self-test)电源自检程序<br>cursor光标<br>attribute属性<br>icon图标<br>service pack服务补丁<br>option pack功能补丁<br>Demo演示<br>short cut快捷方式<br>exception异常<br>debug调试<br>previous前一个<br>column行<br>row列<br>restart重新启动<br>text文本<br>font字体<br>size大小<br>scale比例<br>interface界面<br>function函数<br>access访问<br>manual指南<br>active激活<br>computer language计算机语言<br>menu菜单<br>GUI(graphical user<br>interfaces )图形用户界面<br>template模版<br>page setup页面设置<br>password口令<br>code密码<br>print preview打印预览<br>zoom in放大<br>zoom out缩小<br>pan漫游<br>cruise漫游<br>full screen全屏<br>tool bar工具条<br>status bar状态条<br>ruler标尺<br>table表<br>paragraph段落<br>symbol符号<br>style风格<br>execute执行<br>graphics图形<br>image图像<br>Unix用于服务器的一种操作系统<br>Mac OS苹果公司开发的操作系统<br>OO(Object-Oriented)面向对象<br>virus病毒<br>file文件<br>open打开<br>colse关闭<br>new新建<br>save保存<br>exit退出<br>clear清除<br>default默认<br>LAN局域网<br>WAN广域网<br>Client/Server客户机/服务器<br>ATM( Asynchronous<br>Transfer Mode)异步传输模式<br>Windows NT微软公司的网络操作系统<br>Internet互联网<br>WWW(World Wide Web)万维网<br>protocol协议<br>HTTP超文本传输协议<br>FTP文件传输协议<br>Browser浏览器<br>homepage主页<br>Webpage网页<br>website网站<br>URL在Internet的WWW服务程序上<br>用于指定信息位置的表示方法<br>Online在线<br>Email电子邮件<br>ICQ网上寻呼<br>Firewall防火墙<br>Gateway网关<br>HTML超文本标识语言<br>hypertext超文本<br>hyperlink超级链接<br>IP(Address)互联网协议(地址)<br>SearchEngine搜索引擎<br>TCP/IP用于网络的一组通讯协议<br>Telnet远程登录<br>IE(Internet Explorer)探索者(微软公司的网络浏览器)<br>Navigator引航者(网景公司的浏览器)<br>multimedia多媒体<br>ISO国际标准化组织<br>ANSI美国国家标准协会<br>able 能<br>activefile 活动文件<br>addwatch 添加监视点<br>allfiles 所有文件<br>allrightsreserved 所有的权力保留<br>altdirlst 切换目录格式<br>andfixamuchwiderrangeofdiskproblems 并能够解决更大范围内的磁盘问题<br>andotherinFORMation 以及其它的信息<br>archivefileattribute 归档文件属性<br>assignto 指定到<br>autoanswer 自动应答<br>autodetect 自动检测<br>autoindent 自动缩进<br>autosave 自动存储<br>availableonvolume 该盘剩余空间<br>badcommand 命令错<br>badcommandorfilename 命令或文件名错<br>batchparameters 批处理参数<br>binaryfile 二进制文件<br>binaryfiles 二进制文件<br>borlandinternational borland国际公司<br>bottommargin 页下空白<br>bydate 按日期<br>byextension 按扩展名<br>byname 按名称<br>bytesfree 字节空闲<br>callstack 调用栈<br>casesensitive 区分大小写<br>causespromptingtoconfirmyouwanttooverwritean 要求出现确认提示,在你想覆盖一个<br>centralpointsoftwareinc central point 软件股份公司<br>changedirectory 更换目录<br>changedrive 改变驱动器<br>changename 更改名称<br>characterset 字符集<br>checkingfor 正在检查<br>checksadiskanddisplaysastatusreport 检查磁盘并显示一个状态报告<br>chgdrivepath 改变盘/路径</p>
<p>node 节点<br>npasswd UNIX的一种代理密码检查器，在提交给密码文件前，它将对潜在的密码进行筛选。<br>OSPF 开放最短路径优先协议<br>OSI Model 开放系统互连模式<br>out-of-band attack 带外攻击<br>packet filter 分组过滤器<br>password 口令<br>path 路径<br>payload 净负荷<br>PBX 专用交换机<br>PCS 个人通信业务<br>peer 对等<br>permission 权限<br>plaintext 明文<br>PPTP 点到点隧道协议<br>port 端口<br>prority 优先权<br>protocol 协议<br>potential browser 潜在浏览器<br>POP 互联网电子邮件协议标准<br>是Post Office Protocol 的缩写，是互联网电子邮件协议标准。我们可以通过有POP<br>服务功能的主机传送及接收电子邮件。该协议的缺陷是，当你接收电子邮件时，所有<br>的信件都从服务器上清除，下载到你的本地硬盘。当然也有一些客户端程序可以将电<br>子邮件留在服务器上，或设置成超过一定大小的文件不可下载。随着邮件采用多媒体<br>格式，邮件会越来越大，我们希望能够灵活掌握下载什么文件、何时下载，这就需要<br>IMAP 协议。目前POP的版本为POP3。<br>process 进程<br>proxy 代理<br>proxy server 代理服务器<br>代理服务就是代理Web用户去取得资料回来，通常使用WWW软件要去连结远方的终端取得资<br>料时，必须送出要求信号然后再一个字节一个字节的传送回来。有了proxy的设定以后，要<br>求资料的信号会先送到Proxy Server。当Proxy Server得到用户的请求时，首先会到cache<br>中寻找有没有同样的资料，如果有，就由Proxy Server直接将资料传给用户，如果cache没<br>有资料，Proxy Server就会利用网络上所可以使用的频宽，到远端站台取回资料，一边储存<br>在cache中，一边传送给用户。即使线路阻塞，还是比用户自己直接抓取要来得快速的。<br>paseudorandom 伪随机<br>phreaking 指控制电话系统的过程<br>RAS 远程访问服务<br>Remote control 远程控制<br>RPC 远程过程调用<br>remote boot 远程引导<br>route 路由<br>router 路由器<br>routing 路由选择<br>RIP 路由选择信息协议<br>routed daemon 一种利用RIP的UNIX寻径服务<br>routing table 路由表<br>R.U.P 路由更新协议<br>RSA 一种公共密匙加密算法。而RSA也许是最流行的。<br>script 脚本<br>search engine 搜索引擎<br>SSL 安全套接层<br>secure 密码<br>SID 安全标识符<br>sender 发送者<br>SLIP 串行线网际协议<br>server 服务器<br>server-based network 基于服务器的网络<br>session layer 会话层<br>share、sharing 共享<br>share-level security 共享级安全性<br>SMTP 简单邮件传送协议<br>SNMP 简单网络管理协议<br>Site 站点<br>SCSI 小型计算机系统接口<br>snffer 检错器<br>snooping 探听<br>standalone server 独立服务器<br>strong cipher 强密码<br>stream cipher 流密码<br>strong password 强口令<br>SQL 结构化查询语言<br>subnet mask 子网掩码<br>subdirectory 子目录<br>subnet 子网<br>swap file 交换文件<br>SACL 系统访问控制表<br>S/Key 安全连接的一次性密码系统，在S/Key中，密码从不会经过网络发送，因此不可能被窃取。<br>sniffer（嗅探器） 秘密捕获穿过网络的数据报文的程序，黑客一般用它来设法盗取用户名和密码的。<br>spoofing（电子欺骗） 任何涉及假扮其他用户或主机以对目标进行未授权访问的过程<br>time bomb（时间炸弹） 指等待某一特定时间或事件出先才激活，从而导致机器故障的程序<br>TCPDUMP 是UNIX中捕获数据包的实用工具，常被用语获得详细的网络通信记录的。<br>Traceroute 一个UNIX上的常用TCP程序，用语跟踪本机和远程主机之间的路由<br>T0,DS0 56或者64kbps<br>T1,DS1 24路PCM数字话，总速率为1.544Mbps<br>T3,DS3 28个T1信道，作品能够速率为44.736Mbps<br>thin client 瘦客户机<br>thread 线程<br>throughput 吞吐量<br>transport layer 传输量<br>Transport Protocol 传输协议<br>trust 信任<br>tunnel 安全加密链路<br>vector of attack 攻击向量<br>Virtual directory 虚目录<br>Virtual Machine 虚拟机<br>VRML 虚拟现实模型语言<br>volume 文件集<br>vulnerability 脆弱性<br>weak passwurd 弱口令<br>well-known ports 通用端口<br>workstation 工作站<br>X.25 一种分组交换网协议<br>zone transfer 区域转换</p>
<p>authentication 认证、鉴别<br>authorization 授权<br>Back Office Microsoft公司的一种软件包<br>Back up 备份<br>backup browser 后备浏览器<br>BDC 备份域控制器<br>baseline 基线<br>BIOS 基本输入/输出系统<br>Binding 联编、汇集<br>bit 比特、二进制位<br>BOOTP 引导协议<br>BGP 引导网关协议<br>Bottleneck 瓶径<br>bridge 网桥、桥接器<br>browser 浏览器<br>browsing 浏览<br>channel 信道、通路<br>CSU/DSU 信道服务单元/数字服务单元<br>Checksum 校验和<br>Cluster 簇、群集<br>CGI 公共网关接口<br>CGI（Common Gateway Interface公用网关接口是一个可以产生相同结果或结果随用户输入<br>而变化的程序。它可以用一种解释性的界面语言编写，也可以用一种编译方式的编程语言<br>编写。CGI规定了Web服务器调用其它可执行程序的接口协议标准。Web服务器通过调用CGI程<br>序实现和Web浏览器的交互，也就是CGI程序接受Web浏览器发送给Web服务器的信息，进行处<br>理，并将响应结果再回送给Web服务器和Web浏览器。CGI程序一般完成Web网页中表单数据的<br>处理、数据库查询和实现与传统应用系统的集成等工作。CGI程序虽然可以用任何程序设计<br>语言编写，但是用C语言编写的CGI程序具有执行速度快、安全性高等特点。<br>CGI-based attack（基于CGI攻击）它利用公共网关接口的脆弱点进行攻击，通常借助www站<br>点进行<br>crash（崩溃） 系统突然失效，需要从新引导<br>CD-ROM 只读型光盘<br>Component 组件<br>data link 数据链路<br>datagram 数据报<br>default document 缺省文档<br>digital key system 数字键控系统<br>disk mirroring 磁盘镜像<br>distributed file system 分布式文件系统<br>data-driven attack（数据驱动攻击）依靠隐藏或者封装数据进行的攻击，那些数据可不被察觉<br>的通过防火墙。<br>DNS spoofing（域名服务器电子欺骗）攻击者用来损害域名服务器的方法，可通过欺骗DNS的高速<br>缓存或者内应攻击来实现的一种方式（通常为攻击者假扮合法的DNS服务器角色）<br>DoS（嘿嘿，可不是DOS哦，这个是deniad of service，极为服务拒绝）用户恶意使用网络信息服<br>务器时，将拒绝为合法的用户提供服务。<br>eavesdropping 窃听、窃取<br>encrypted tunnel 加密通道<br>enterprise network 企业网<br>Ethernet 以太网<br>External security 外部安全性<br>environment variable 环境变量<br>fax modem 传真猫<br>file attribute 文件属性<br>file system 文件系统<br>file 文件<br>FORM 格式<br>fragments 分段<br>frame relay 桢中继<br>firewall 防火墙<br>Firework(防火墙)是加强加 Internet 与 Intranetp(内部网)之间安全防范的一个或一组系统。防火<br>墙可以确定哪些内部服务允许外部访问，哪些外人被许可访问所允许的内部服务，那些外部服务可由<br>内部人员访问。为了使防火墙发挥效力，来自和发往 Internet 的所有信息都必须经由防火墙出入。<br>防火墙只允许授权信息通过，而防火墙本身不能被渗透。<br>gated daemon gated进程（好象是一种早期的UNIX寻径服务）<br>gateway 网关<br>global account 全局帐号<br>global group 全局组<br>group 组<br>group account 组帐号<br>group identifier 组标识符<br>HCL 硬件兼容性表<br>hash 散表<br>HPFS 高性能文件系统<br>Home directory 主目录<br>home page 竹叶<br>hop 驿站、中继段<br>host 主机<br>hyperlink 超文本链接<br>highjacking 劫持终端，即为攻击者捕获另一个用户会话的控制。这<br>是很少发生的，一旦发生就表明目标的安全性已经被破坏。<br>其实NetXRay在这一点就做的很好。<br>HTPASSWD 一种用密码来保护WWW(UNIX)上的站点的系统<br>icon 图标<br>impersonation attack 伪装攻击<br>index server 索引服务器<br>ISA 工业标准结构<br>Inherieted Rights Filter 继承权限过滤器<br>ISDN 综合业务数字网<br>interactive user 交互性用户<br>intermediate system 中介系统<br>internal security 内部安全性<br>Internet Explorer（IE） IBM的万维网浏览器<br>Internet server 因特网服务器<br>Interpreter 解释程序<br>intranet 内联网，企业内部网<br>intruder 入 侵 者<br>IMAP 一种邮件协议<br>是Internet Message Access Protocal 的缩写。IMAP 提供了一个在远程服务器上管理邮件的手<br>段，它与POP 协议相似，但功能比POP 要多，功能包括：只下载邮件的标题、建立多个邮箱和在<br>服务器上建立保存邮件的文件夹。<br>Java Virtual Machine Java虚拟机<br>java script 基于Java语言的一种脚本语言<br>jack in 一句黑客常用的口语，意思为破坏服务器安全的行为<br>kernel 内核<br>keys 密钥<br>keyspace 密钥空间<br>Keystroke Recorder（按键记录器） 一些用语窃取他人用户名和密码的工具<br>LAN Server 局域网服务器<br>Local security 局部安全性<br>log 日志、记录<br>logging 登录<br>logoff 退出、注销<br>logical port 逻辑端口<br>logon 注册<br>logon script 登录脚本<br>LFN 长文件名<br>logic bomb（逻辑炸弹）一种可导致系统加锁或者故障的程序或代码。<br>mass browser 主浏览器<br>MAPI<br>是Messaging Application Progrmming Interface 的缩写。微软和其它一些公司开发了MAPI，<br>可使Windows 应用程序接入到从Microsoft Mail 到Novell MHS的多种消息系统。但是， MAPI<br>仅限于在日常工作的水平上工作，即感知邮件的应用程序，它可在网络上交换邮件与数据。<br>member server 成员服务器<br>menu 菜单<br>message 消息<br>multilink 多链接<br>MIME 多媒体Internet邮件扩展<br>MPR 多协议路由器<br>multiprocessing 多重处理<br>Module 模块<br>multihomed host 多穴主机<br>MUD<br>MUD的英文全名是Multiple User Dimension、Multiple User Dialogue或<br>Multiple User Dungeon，译为“多人世界”、“多人对话”或“多人地牢”，<br>俗称“泥巴”游戏。<br>named pipes 命名管道<br>NDS NetWare目录服务<br>NetBEUI NetBIOS扩展用户接口<br>NetBIOS gateway NetBIOS网关<br>NetWare 网络操作系统（不好意思，我忘了是那个公司开发的了）<br>network 网络<br>NetBIOS 网络基本输入/输出系统<br>NDIS 网络驱动程序接口规范<br>NetDDE 网络动态数据交换<br>NIC 网络接口卡<br>network layer 网络层<br>Network Monitor 一个网络监控程序<br>network operating system 网络操作系统<br>network printer 网络打印机<br>network security 网络安全<br>network user 网络用户<br>NFS 网络文件系统</p>
<p>我把网络安全方面的专业词汇整理了一下，虽然大多是乱谈，但初衷在于初学者能更好的了解这些词汇。不全和错误的地方还望高手补充：<br>Access Control List（ACL） 访问控制列表<br>access token 访问令牌<br>account lockout 帐号封锁<br>account policies 记帐策略<br>accounts 帐号<br>adapter 适配器<br>adaptive speed leveling 自适应速率等级调整<br>Address Resolution Protocol(ARP) 地址解析协议<br>Administrator account 管理员帐号<br>ARPANET 阿帕网（internet的前身）<br>algorithm 算法<br>alias 别名<br>allocation 分配、定位<br>alias 小应用程序<br>allocation layer 应用层<br>API 应用程序编程接口<br>anlpasswd 一种与Passwd+相似的代理密码检查器<br>applications 应用程序<br>ATM 异步传递模式<br>attack 攻击<br>audio policy 审记策略<br>auditing 审记、监察<br>back-end 后端<br>borde 边界<br>borde gateway 边界网关<br>breakabie 可破密的<br>breach 攻破、违反<br>cipher 密码<br>ciphertext 密文<br>CAlass A domain A类域<br>CAlass B domain B类域<br>CAlass C domain C类域<br>classless addressing 无类地址分配<br>cleartext 明文<br>CSNW Netware客户服务<br>client 客户，客户机<br>client/server 客户机/服务器<br>code 代码<br>COM port COM口（通信端口）<br>CIX 服务提供者<br>computer name 计算机名<br>crack 闯入<br>cryptanalysis 密码分析<br>DLC 数据链路控制<br>decryption 解密<br>database 数据库<br>dafault route 缺省路由<br>dafault share 缺省共享<br>denial of service 拒绝服务<br>dictionary attack 字典式攻击<br>directory 目录<br>directory replication 目录复制<br>domain 域<br>domain controller 域名控制器<br>domain name 域名<br>域名其实就是入网计算机的名字，它的作用就象寄信需要写明人们的名字、地址一样重<br>要。域名结构如下：计算机主机名.机构名.网络名.最高层域名。域名用文字表达，比<br>用数字表达的IP地址容易记忆。加入Internet的各级网络依照DNS的命名规则对本网内<br>的计算机命名，并负责完成通讯时域名到IP地址的转换 。<br>DNS 域名服务器<br>DNS(Domain Name System,域名系统)是指在 Internet上查询域名或IP地址的目录服务系<br>统。在接收到请求时，它可将另一台主机的域名翻译为IP地址，或反之。大部分域名系<br>统都维护着一个大型的数据库，它描述了域名与 IP地址的对应关系，并且这个数据库被<br>定期地更新。翻译请求通常来自网络上的另一台计算机，它需要IP地址以便进行路由选择。<br>DDE 动态数据交换<br>DHCP 动态主机配置协议<br>encryption 加密<br>EGP 外部网关协议<br>FDDI 光纤分布式数据接口<br>FAT 文件分配表<br>FTP(File Transfer Protocol） 文件传送协议<br>filter 过滤器<br>firmware 固件<br>flooding 淹没<br>GSNW NetWare网关服务<br>GDI(graphical device interface) 图形设备界面<br>GUI 图形用户界面<br>HTML 超文本标记语言<br>HTTP 超文本传送协议<br>IGP 内部安全性<br>ICMP(Internet Control Message Protocol) 网际控制报文协议<br>ICMP用来发送关于IP数据报传输的控制和错误信息的TCP/IP协议。当一个IP数据报不能传送<br>到目的地时，可能是因为目的地的机器暂停服务或者信息交通阻塞，路由器可能使用ICMP将<br>失败信息通知发送者。<br>IGMP（Internet Group Management Protocol，Internet群组管理协议）<br>这种TCP/IP协议允许Internet主机参加多点播送（multicasting）—-一种向计算机群广播<br>信息的有效手段<br>IIS 信息服务器<br>IP(Internet Protocol) 网际协议<br>IRC 网上交谈<br>ISP 网络服务提供者<br>IPX 互连网分组协议<br>IPC 进程间通信<br>IRQ 中断请求<br>IP address IP地址<br>IP地址称作网络协议地址，是分配给主机的一个32位地址，由4个字节组成，分为动<br>态IP地址和静态IP地址两种。动态IP地址指的是每次连线所取得的地址不同，而静<br>态IP地址是指每次连线均为同样固定的地址。一般情况下，以电话拨号所取得的地址<br>均为动态的，也就是每次所取得的地址不同。<br>IP masquerade IP伪装<br>IP spoofing IP欺骗<br>LAN 局域网<br>LPC 局部过程调用<br>NNTP 网络新闻传送协议<br>PPP 点到点协议<br>称为点对点通信协议(Point to Point Protocol)，是为适应那些不能在网络线上的使<br>用者，通过电话线的连接而彼此通信所制定的协议。<br>PDC 主域控制器<br>Telnet 远程登陆<br>TCP/IP 传输控制协议/网际协议<br>TCP/IP通信协议主要包含了在Internet上网络通信细节的标准，以及一组网络互连的协<br>议和路径选择算法。TCP是传输控制协议，相当于物品装箱单，保证数据在传输过程中不<br>会丢失。IP是网间协议，相当于收发货人的地址和姓名，保证数据到达指定的地点。<br>TFTP 普通文件传送协议<br>TFTP是无盘计算机用来传输信息的一种简化的FTP协议。它非常之简单，所以可固化在硬<br>盘上，而且支持无认证操作。TFTP是一种非常不安全的协议。<br>Trojan Horse 特洛伊木马<br>URL 统一资源定位器<br>UDP 用户数据报协议<br>VDM 虚拟DOS机<br>UUCP 是一种基于猫的使用已经很久的文件传输协议，有时候还使用它在Internet上传输<br>Usenet新闻和E-mail，尤其是在那些间断性联网的站点上。现在很少站提供匿名的UUCP来<br>存取文件。而它做为一种文件传输协议，只有那些没有入网而使用猫的用户使用此方法。<br>WWW 万维网<br>WWW(Word Wide Web)是Internet最新的一种信息服务。它是一种基于超文本文件的<br>交互式浏览检索工具。用户可用WWW在Internet网上浏览、传递、编辑超文本格式的文件。<br>WAN 广域网<br>virtual server 虚拟服务器<br>Usenet<br>用户交流网Usenet是网络新闻服务器的主要信息来源。Usenet完全是一个民间自发建立<br>的，使用Internet交换信息但又不完全依赖Internet进行通讯的用户交流网络。使用Usenet<br>的自愿者共同遵守一些约定的网络使用规则。<br>USER name 用户名<br>USER account 用户帐号<br>Web page 网页<br>OpenGL 开放图形语言<br>ODBC 开放数据库连接<br>PCI 外设连接接口</p>
<p>chooseoneofthefollowing 从下列中选一项<br>clearall 全部清除<br>clearallbreakpoints 清除所有断点<br>clearsanattribute 清除属性<br>clearscommandhistory 清除命令历史<br>clearscreen 清除屏幕<br>closeall 关闭所有文件<br>codegeneration 代码生成<br>colorpalette 彩色调色板<br>commandline 命令行<br>commandprompt 命令提示符<br>compressedfile 压缩文件<br>configuresaharddiskforusewithmsdos 配置硬盘,以为 MS-DOS 所用<br>conventionalmemory 常规内存<br>copiesdirectoriesandsubdirectoriesexceptemptyones 拷贝目录和子目录,空的除外<br>copiesfileswiththearchiveattributeset 拷贝设置了归档属性的文件<br>copiesoneormorefilestoanotherlocation 把文件拷贝或搬移至另一地方<br>copiesthecontentsofonefloppydisktoanother 把一个软盘的内容拷贝到另一个软盘上<br>copydiskette 复制磁盘<br>copymovecompfindrenamedeletevervieweditattribwordpprintlist C拷贝M移动 O比 F搜索R改名 D删除 V版本 E浏览A属性 W写字 P打印 L列表<br>copyrightc 版权(c<br>createdospartitionorlogicaldosdrive 创建DOS分区或逻辑DOS驱动器<br>createextendeddospartition 创建扩展DOS分区<br>createlogicaldosdrivesintheextendeddospartition 在扩展DOS分区中创建逻辑DOS驱动器<br>createprimarydospartition 创建DOS主分区<br>createsadirectory 创建一个目录<br>createschangesordeletesthevolumelabelofadisk 创建,改变或删除磁盘的卷标<br>currentfile 当前文件<br>currentfixeddiskdrive 当前硬盘驱动器<br>currentsettings 当前设置<br>currenttime 当前时间<br>cursorposition 光标位置<br>defrag 整理碎片<br>dele 删去<br>deletepartitionorlogicaldosdrive 删除分区或逻辑DOS驱动器<br>deletesadirectoryandallthesubdirectoriesandfilesinit 删除一个目录和所有的子目录及其中的所有文件<br>deltree 删除树<br>devicedriver 设备驱动程序<br>dialogbox 对话栏<br>directionkeys 方向键<br>directly 直接地<br>directorylistargument 目录显示变量<br>directoryof 目录清单<br>directorystructure 目录结构<br>diskaccess 磁盘存取<br>diskcopy 磁盘拷贝<br>diskservicescopycomparefindrenameverifyvieweditmaplocateinitialize 磁盘服务功能: C拷贝 O比较 F搜索R改卷名V校验 浏览E编缉M图 L找文件 N格式化<br>diskspace 磁盘空间<br>displayfile 显示文件<br>displayoptions 显示选项<br>displaypartitioninFORMation 显示分区信息<br>displaysfilesinspecifieddirectoryandallsubdirectories 显示指定目录和所有目录下的文件<br>displaysfileswithspecifiedattributes 显示指定属性的文件<br>displaysorchangesfileattributes 显示或改变文件属性<br>displaysorsetsthedate 显示或设备日期<br>displayssetupscreensinmonochromeinsteadofcolor 以单色而非彩色显示安装屏信息<br>displaystheamountofusedandfreememoryinyoursystem 显示系统中已用和未用的内存数量<br>displaysthefullpathandnameofeveryfileonthedisk 显示磁盘上所有文件的完整路径和名称<br>displaysthenameoforchangesthecurrentdirectory 显示或改变当前目录<br>doctor 医生<br>doesn 不<br>doesntchangetheattribute 不要改变属性<br>dosshell DOS 外壳<br>doubleclick 双击<br>doyouwanttodisplaythelogicaldriveinFORMationyn 你想显示逻辑驱动器信息吗(y/n)?<br>driveletter 驱动器名<br>editmenu 编辑选单<br>emsmemory ems内存<br>endoffile 文件尾<br>endofline 行尾<br>enterchoice 输入选择<br>entiredisk 转换磁盘<br>environmentvariable 环境变量<br>esc esc<br>everyfileandsubdirectory 所有的文件和子目录<br>existingdestinationfile 已存在的目录文件时<br>expandedmemory 扩充内存<br>expandtabs 扩充标签<br>explicitly 明确地<br>extendedmemory 扩展内存<br>fastest 最快的<br>fatfilesystem fat 文件系统<br>fdiskoptions fdisk选项<br>fileattributes 文件属性<br>fileFORMat 文件格式<br>filefunctions 文件功能<br>fileselection 文件选择<br>fileselectionargument 文件选择变元<br>filesin 文件在<br>filesinsubdir 子目录中文件<br>fileslisted 列出文件<br>filespec 文件说明<br>filespecification 文件标识<br>filesselected 选中文件<br>findfile 文件查寻<br>fixeddisk 硬盘<br>fixeddisksetupprogram 硬盘安装程序<br>fixeserrorsonthedisk 解决磁盘错误<br>floppydisk 软盘<br>FORMatdiskette 格式化磁盘<br>FORMatsadiskforusewithmsdos 格式化用于MS-DOS的磁盘<br>FORMfeed 进纸<br>freememory 闲置内存<br>fullscreen 全屏幕<br>functionprocedure 函数过程<br>graphical 图解的<br>graphicslibrary 图形库<br>groupdirectoriesfirst 先显示目录组<br>hangup 挂断<br>harddisk 硬盘<br>hardwaredetection 硬件检测<br>hasbeen 已经<br>helpfile 帮助文件<br>helpindex 帮助索引<br>helpinFORMation 帮助信息<br>helppath 帮助路径<br>helpscreen 帮助屏<br>helptext 帮助说明<br>helptopics 帮助主题<br>helpwindow 帮助窗口<br>hiddenfile 隐含文件<br>hiddenfileattribute 隐含文件属性<br>hiddenfiles 隐含文件<br>howto 操作方式<br>ignorecase 忽略大小写<br>inbothconventionalanduppermemory 在常规和上位内存<br>incorrectdos 不正确的DOS<br>incorrectdosversion DOS 版本不正确<br>indicatesabinaryfile 表示是一个二进制文件<br>indicatesanasciitextfile 表示是一个ascii文本文件<br>insertmode 插入方式<br>insteadofusingchkdsktryusingscandisk 请用scandisk,不要用chkdsk<br>inuse 在使用<br>invaliddirectory 无效的目录<br>is 是<br>kbytes 千字节<br>keyboardtype 键盘类型<br>labeldisk 标注磁盘<br>laptop 膝上<br>largestexecutableprogram 最大可执行程序<br>largestmemoryblockavailable 最大内存块可用<br>lefthanded 左手习惯<br>leftmargin 左边界<br>linenumber 行号<br>linenumbers 行号<br>linespacing 行间距<br>listbyfilesinsortedorder 按指定顺序显示文件<br>listfile 列表文件<br>listof 清单<br>locatefile 文件定位<br>lookat 查看<br>lookup 查找<br>macroname 宏名字<br>makedirectory 创建目录<br>memoryinfo 内存信息<br>memorymodel 内存模式<br>menubar 菜单条<br>menucommand 菜单命令<br>menus 菜单<br>messagewindow 信息窗口<br>microsoft 微软<br>microsoftantivirus 微软反病毒软件<br>microsoftcorporation 微软公司<br>mini 小的<br>modemsetup 调制解调器安装<br>modulename 模块名<br>monitormode 监控状态<br>monochromemonitor 单色监视器<br>moveto 移至<br>multi 多<br>newdata 新建数据<br>newer 更新的<br>newfile 新文件<br>newname 新名称<br>newwindow 新建窗口<br>norton norton<br>nostack 栈未定义<br>noteusedeltreecautiously 注意:小心使用deltree<br>onlinehelp 联机求助<br>optionally 可选择地<br>or 或<br>pageframe 页面<br>pagelength 页长<br>pausesaftereachscreenfulofinFORMation 在显示每屏信息后暂停一下<br>pctools pc工具<br>postscript 附言<br>prefixmeaningnot 前缀意即”不<br>prefixtoreverseorder 反向显示的前缀<br>presetswitchesbyprefixinganyswitchwithhyphenforexamplew 用前缀和放在短横线-后的开关(例如/-w)预置开关<br>pressakeytoresume 按一键继续<br>pressanykeyforfilefunctions 敲任意键执行文件功能<br>pressentertokeepthesamedate 敲回车以保持相同的日期<br>pressentertokeepthesametime 敲回车以保持相同的时间<br>pressesctocontinue 敲esc继续<br>pressesctoexit 敲键退出<br>pressesctoexitfdisk 敲esc退出fdisk<br>pressesctoreturntofdiskoptions 敲esc返回fdisk选项<br>previously 在以前<br>printall 全部打印<br>printdevice 打印设备<br>printerport 打印机端口<br>processesfilesinalldirectoriesinthespecifiedpath 在指定的路径下处理所有目录下的文件<br>programfile 程序文件<br>programmingenvironment 程序设计环境<br>promptsyoubeforecreatingeachdestinationfile 在创建每个目标文件时提醒你<br>promptsyoutopressakeybeforecopying 在拷贝前提示你敲一下键<br>pulldown 下拉<br>pulldownmenus 下拉式选单<br>quickFORMat 快速格式化<br>quickview 快速查看<br>readonlyfile 只读文件<br>readonlyfileattribute 只读文件属性<br>readonlyfiles 只读文件<br>readonlymode 只读方式<br>redial 重拨<br>repeatlastfind 重复上次查找<br>reportfile 报表文件<br>resize 调整大小<br>respectively 分别地<br>rightmargin 右边距<br>rootdirectory 根目录<br>runsdebugaprogramtestingandeditingtool 运行debug, 它是一个测试和编辑工具<br>runtimeerror 运行时出错<br>saveall 全部保存<br>saveas 另存为<br>scandisk 磁盘扫描程序<br>scandiskcanreliablydetect scandisk可以可靠地发现<br>screencolors 屏幕色彩<br>screenoptions 屏幕任选项<br>screensaver 屏幕暂存器<br>screensavers 屏幕保护程序<br>screensize 屏幕大小<br>scrollbars 翻卷栏<br>scrolllockoff 滚屏已锁定<br>searchfor 搜索<br>sectorspertrack 每道扇区数<br>selectgroup 选定组<br>selectionbar 选择栏<br>setactivepartition 设置活动分区<br>setupoptions 安装选项<br>shortcutkeys 快捷键<br>showclipboard 显示剪贴板<br>singleside 单面<br>sizemove 大小/移动<br>sorthelp S排序H帮助<br>sortorder 顺序<br>specialservicesdirectorymaint 特殊服务功能: D目录维护<br>specifiesdrivedirectoryandorfilestolist 指定要列出的驱动器,目录,和文件<br>specifiesthatyouwanttochangetotheparentdirectory 指定你想把父目录作为当前目录<br>specifiesthedirectoryandorfilenameforthenewfile 指定新文件的目录或文件名<br>specifiesthefileorfilestobecopied 指定要拷贝的文件<br>stackoverflow 栈溢出<br>standalone 独立的<br>startupoptions 启动选项<br>statusline 状态行<br>stepover 单步<br>summaryof 摘要信息<br>suppressespromptingtoconfirmyouwanttooverwritean 取消确认提示,在你想覆盖一个<br>swapfile 交换文件<br>switchesmaybepresetinthedircmdenvironmentvariable 开关可在dircmd环境变量中设置<br>switchto 切换到<br>sync 同步<br>systemfile 系统文件<br>systemfiles 系统文件<br>systeminfo 系统信息<br>systeminFORMation 系统信息程序<br>tableofcontents 目录<br>terminalemulation 终端仿真<br>terminalsettings 终端设置<br>testfile 测试文件<br>testfileparameters 测试文件参数<br>theactivewindow 激活窗口<br>theswitchymaybepresetinthecopycmdenvironmentvariable /y开关可以在copycmd环境变量中预置<br>thetwofloppydisksmustbethesametype 两个软磁盘必须是同种类型的<br>thismaybeoverriddenwithyonthecommandline 在命令行输入/-y可以使之无效<br>togglebreakpoint 切换断点<br>tomsdos 转到MS-DOS<br>topmargin 页面顶栏<br>turnoff 关闭<br>typecddrivetodisplaythecurrentdirectoryinthespecifieddrive 键入cd驱动器:显示指定驱动器的当前目录<br>typecdwithoutparameterstodisplaythecurrentdriveanddirectory 键入无参数的cd以显示当前驱动器的当前目录<br>typedatewithoutparameterstodisplaythecurrentdatesettingand 键入无参数的date,显示当前日期设置和<br>unmark 取消标记<br>unselect 取消选择<br>usesbareFORMat 使用简洁方式<br>useslowercase 使用小写<br>useswidelistFORMat 使用宽行显示<br>usinghelp 使用帮助<br>verbosely 冗长地<br>verifiesthatnewfilesarewrittencorrectly 校验新文件是否正确写入了<br>videomode 显示方式<br>viewwindow 内容浏览<br>viruses 病毒<br>vision 景象<br>vollabel 卷标<br>volumelabel 卷标<br>volumeserialnumberis 卷序号是<br>windowshelp windows 帮助<br>wordwrap 整字换行<br>workingdirectory 正在工作的目录<br>worm 蠕虫<br>writemode 写方式<br>writeto 写到<br>xmsmemory 扩充内存<br>youmay 你可以</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;http://www.24en.com/study/words/2006-01-02/373.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机常用英语术语、词汇表&lt;/a&gt;&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="翻译" scheme="https://chanran.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="计算机术语" scheme="https://chanran.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>[转载]web前端开发培训之前端开发必会的二十五个知识点</title>
    <link href="https://chanran.github.io/2016/11/11/%E8%BD%AC%E8%BD%BD-web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%B9%E8%AE%AD%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E4%BC%9A%E7%9A%84%E4%BA%8C%E5%8D%81%E4%BA%94%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://chanran.github.io/2016/11/11/转载-web前端开发培训之前端开发必会的二十五个知识点/</id>
    <published>2016-11-11T14:24:02.000Z</published>
    <updated>2016-11-12T04:10:53.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自 <a href="http://www.cnblogs.com/Ma-lulu/p/5719997.html" target="_blank" rel="external">web前端开发培训之前端开发必会的二十五个知识点</a></p>
</blockquote>
<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="常用那几种浏览器测试？有哪些内核-Layout-Engine"><a href="#常用那几种浏览器测试？有哪些内核-Layout-Engine" class="headerlink" title="常用那几种浏览器测试？有哪些内核(Layout Engine)?"></a>常用那几种浏览器测试？有哪些内核(Layout Engine)?</h2><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。</p>
<h2 id="说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）"><a href="#说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8-以下）" class="headerlink" title="说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）"></a>说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下）</h2><ul>
<li><p>(Q1) 行内元素：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。块级元素：各占据一行，垂直方向排列。从新行开始结束接着一个断行。</p>
</li>
<li><p>(Q2) 兼容性：<code>display:inline-block;*display:inline;*zoom:1;</code></p>
</li>
</ul>
<h2 id="清除浮动有哪些方式？比较好的方式是哪一种？"><a href="#清除浮动有哪些方式？比较好的方式是哪一种？" class="headerlink" title="清除浮动有哪些方式？比较好的方式是哪一种？"></a>清除浮动有哪些方式？比较好的方式是哪一种？</h2><ul>
<li><p>(Q1)</p>
<ul>
<li><p>（1）父级div定义height。</p>
</li>
<li><p>（2）结尾处加空div标签clear:both。</p>
</li>
<li><p>（3）父级div定义伪类:after和zoom。</p>
</li>
<li><p>（4）父级div定义overflow:hidden。</p>
</li>
<li><p>（5）父级div定义overflow:auto。</p>
</li>
<li><p>（6）父级div也浮动，需要定义宽度。</p>
</li>
<li><p>（7）父级div定义display:table。</p>
</li>
<li><p>（8）结尾处加br标签clear:both。</p>
</li>
</ul>
</li>
<li><p>(Q2) 比较好的是第3种方式，好多网站都这么用。</p>
</li>
</ul>
<h2 id="box-sizing常用的属性有哪些？分别有什么作用？"><a href="#box-sizing常用的属性有哪些？分别有什么作用？" class="headerlink" title="box-sizing常用的属性有哪些？分别有什么作用？"></a>box-sizing常用的属性有哪些？分别有什么作用？</h2><ul>
<li><p>(Q1)box-sizing: content-box|border-box|inherit;</p>
</li>
<li><p>(Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。<br>border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>
</li>
</ul>
<h2 id="Doctype作用？标准模式与兼容模式各有什么区别"><a href="#Doctype作用？标准模式与兼容模式各有什么区别" class="headerlink" title="Doctype作用？标准模式与兼容模式各有什么区别?"></a>Doctype作用？标准模式与兼容模式各有什么区别?</h2><ul>
<li><p>(Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p>
</li>
<li><p>(Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>
</li>
</ul>
<h2 id="HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h2><p>HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>
<h2 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h2><ul>
<li>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>
<li>（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>
<li>（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。</li>
</ul>
<h2 id="介绍一下你对浏览器内核的理解？"><a href="#介绍一下你对浏览器内核的理解？" class="headerlink" title="介绍一下你对浏览器内核的理解？"></a>介绍一下你对浏览器内核的理解？</h2><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>
<blockquote>
<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>
<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>
<p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p>
</blockquote>
<h2 id="html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><ul>
<li><p>(Q1)</p>
<blockquote>
<p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>
</blockquote>
<ul>
<li><p>(1)绘画 canvas;</p>
</li>
<li><p>(2)用于媒介回放的 video 和 audio 元素;</p>
</li>
<li><p>(3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</p>
</li>
<li>(4)sessionStorage 的数据在浏览器关闭后自动删除;</li>
<li>(5)语意化更好的内容元素，比如 article、footer、header、nav、section;</li>
<li>(6)表单控件，calendar、date、time、email、url、search;</li>
<li><p>(7)新的技术webworker, websocket, Geolocation;</p>
</li>
<li><p>(Q2)</p>
<blockquote>
<p>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式。<br>当然也可以直接使用成熟的框架、比如html5shim，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="简述一下你对HTML语义化的理解？"><a href="#简述一下你对HTML语义化的理解？" class="headerlink" title="简述一下你对HTML语义化的理解？"></a>简述一下你对HTML语义化的理解？</h2><blockquote>
<p>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
</blockquote>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="介绍js的基本数据类型"><a href="#介绍js的基本数据类型" class="headerlink" title="介绍js的基本数据类型"></a>介绍js的基本数据类型</h2><blockquote>
<p>Undefined、Null、Boolean、Number、String</p>
</blockquote>
<h2 id="js有哪些内置对象？"><a href="#js有哪些内置对象？" class="headerlink" title="js有哪些内置对象？"></a>js有哪些内置对象？</h2><blockquote>
<p>数据封装类对象：Object、Array、Boolean、Number 和 String<br>其他对象：Function、Arguments、Math、Date、RegExp、Error</p>
</blockquote>
<h2 id="this对象的理解"><a href="#this对象的理解" class="headerlink" title="this对象的理解"></a>this对象的理解</h2><blockquote>
<p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。</p>
</blockquote>
<h2 id="eval是做什么的？"><a href="#eval是做什么的？" class="headerlink" title="eval是做什么的？"></a>eval是做什么的？</h2><blockquote>
<p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’)。</p>
</blockquote>
<h2 id="DOM怎样添加、移除、移动、复制、创建和查找节点"><a href="#DOM怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="DOM怎样添加、移除、移动、复制、创建和查找节点"></a>DOM怎样添加、移除、移动、复制、创建和查找节点</h2><p>&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 创建新节点</div><div class="line">createDocumentFragment()    //创建一个DOM片段</div><div class="line">createElement()   //创建一个具体的元素</div><div class="line">createTextNode()   //创建一个文本节点</div><div class="line">// 添加、移除、替换、插入</div><div class="line">appendChild()</div><div class="line">removeChild()</div><div class="line">replaceChild()</div><div class="line">insertBefore() //在已有的子节点前插入一个新的子节点</div><div class="line">// 查找</div><div class="line">getElementsByTagName()    //通过标签名称</div><div class="line">getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class="line">getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure></p>
<h2 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h2><blockquote>
<p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p>
<p>undefined：</p>
<ul>
<li>（1）变量被声明了，但没有赋值时，就等于undefined。</li>
<li>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>
<li>（3）对象没有赋值的属性，该属性的值为undefined。</li>
<li>（4）函数没有返回值时，默认返回undefined。</li>
</ul>
<p>null：</p>
<ul>
<li>（1） 作为函数的参数，表示该函数的参数不是对象。</li>
<li>（2） 作为对象原型链的终点。</li>
</ul>
</blockquote>
<h2 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h2><ul>
<li>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>
<li>（2）属性和方法被加入到 this 引用的对象中。</li>
<li>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。</li>
</ul>
<h2 id="JSON-的了解？"><a href="#JSON-的了解？" class="headerlink" title="JSON 的了解？"></a>JSON 的了解？</h2><blockquote>
<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。</p>
<p>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}</p>
</blockquote>
<h2 id="call-和-apply-的区别和作用？"><a href="#call-和-apply-的区别和作用？" class="headerlink" title="call() 和 apply() 的区别和作用？"></a>call() 和 apply() 的区别和作用？</h2><blockquote>
<p>apply()函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。</p>
<p>如：function.apply(this,[1,2,3]);</p>
<p>call()的第一个参数是上下文，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>
</blockquote>
<h2 id="如何获取UA？"><a href="#如何获取UA？" class="headerlink" title="如何获取UA？"></a>如何获取UA？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function whatBrowser() &#123;  </div><div class="line">    document.Browser.Name.value=navigator.appName;  </div><div class="line">    document.Browser.Version.value=navigator.appVersion;  </div><div class="line">    document.Browser.Code.value=navigator.appCodeName;  </div><div class="line">    document.Browser.Agent.value=navigator.userAgent;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><hr>
<h2 id="HTTP状态码知道哪些？"><a href="#HTTP状态码知道哪些？" class="headerlink" title="HTTP状态码知道哪些？"></a>HTTP状态码知道哪些？</h2><blockquote>
<p>100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</p>
<p>200  OK   正常返回信息</p>
<p>201  Created  请求成功并且服务器创建了新的资源</p>
<p>202  Accepted  服务器已接受请求，但尚未处理</p>
<p>301  Moved Permanently  请求的网页已永久移动到新位置。</p>
<p>302 Found  临时性重定向。</p>
<p>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</p>
<p>304  Not Modified  自从上次请求后，请求的网页未修改过。</p>
<p>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p>
<p>401 Unauthorized  请求未授权。</p>
<p>403 Forbidden  禁止访问。</p>
<p>404 Not Found  找不到如何与 URI 相匹配的资源。</p>
<p>500 Internal Server Error  最常见的服务器端错误。</p>
<p>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</p>
</blockquote>
<h2 id="你有哪些性能优化的方法？"><a href="#你有哪些性能优化的方法？" class="headerlink" title="你有哪些性能优化的方法？"></a>你有哪些性能优化的方法？</h2><ul>
<li>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li>
<li>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li>
<li>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li>
<li>（4） 当需要设置的样式很多时设置className而不是直接操作style。</li>
<li>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</li>
<li>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</li>
<li>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</li>
</ul>
<h2 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h2><blockquote>
<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。</p>
<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>
</blockquote>
<h2 id="哪些常见操作会造成内存泄漏？"><a href="#哪些常见操作会造成内存泄漏？" class="headerlink" title="哪些常见操作会造成内存泄漏？"></a>哪些常见操作会造成内存泄漏？</h2><blockquote>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</p>
</blockquote>
<h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><blockquote>
<p>一个程序至少有一个进程,一个进程至少有一个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p>
<p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&quot;http://www.cnblogs.com/Ma-lulu/p/5719997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web前端开发培训之前端开发必会的二十五个知识点&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="面试" scheme="https://chanran.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://chanran.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>重构页面遇到的各种奇怪问题</title>
    <link href="https://chanran.github.io/2016/11/11/%E9%87%8D%E6%9E%84%E9%A1%B5%E9%9D%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://chanran.github.io/2016/11/11/重构页面遇到的各种奇怪问题/</id>
    <published>2016-11-11T13:22:38.000Z</published>
    <updated>2017-01-21T09:20:01.477Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/rebuild.png" alt="重构"></p>
<h1 id="记录一下干货"><a href="#记录一下干货" class="headerlink" title="记录一下干货"></a>记录一下干货</h1><ul>
<li><a href="https://www.zhihu.com/question/19736007" target="_blank" rel="external">怎样可以很好地保证网页的浏览器兼容性</a></li>
</ul>
<h1 id="特定html标签相关的奇怪问题"><a href="#特定html标签相关的奇怪问题" class="headerlink" title="特定html标签相关的奇怪问题"></a>特定html标签相关的奇怪问题</h1><ul>
<li><h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;!--推荐这样写--&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;  &lt;!--会出现几个空格--&gt;</div><div class="line">&lt;/textarea&gt;</div><div class="line">&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--换行之后有几个空格--&gt;</div><div class="line"></div><div class="line">&lt;/textarea&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>chrome下第二个textarea会出现几个空格,第三个textarea会换行再加几个空格,所以最好使用第一个textarea的写法句号 (其他浏览器有空切换到windows测试)</p>
</blockquote>
<h1 id="css相关的奇怪问题"><a href="#css相关的奇怪问题" class="headerlink" title="css相关的奇怪问题"></a>css相关的奇怪问题</h1><h2 id="行内块元素之间的奇怪间隔"><a href="#行内块元素之间的奇怪间隔" class="headerlink" title="行内块元素之间的奇怪间隔"></a>行内块元素之间的奇怪间隔</h2><blockquote>
<p>以span为例(设置了display:inline-block)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        html,body,div&#123;</div><div class="line">            height:100%;</div><div class="line">            width:100%;</div><div class="line">        &#125;</div><div class="line">        #span1&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:black;</div><div class="line">        &#125;</div><div class="line">        #span2&#123;</div><div class="line">            display:inline-block;</div><div class="line">            width:45%;</div><div class="line">            height:100%;</div><div class="line">            background-color:red;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>左图出现奇怪的间距(元素换行之后会有一个换行符,在《Javascript高级程序设计(第3版)》p269有介绍到类似的问题),右图是解决之后的状态</p>
</blockquote>
<p><img src="/img/strangeSpace.png" alt="奇怪的间距"><br><img src="/img/clearSpace.png" alt="清除了边距"></p>
<blockquote>
<p>解决方法</p>
</blockquote>
<ol>
<li><p>把行内块元素写一在同一行 (不推荐,如果元素多的话太长了,可读性差)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加注释(推荐)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;!--</div><div class="line">    --&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用浮动(不推荐,脱离文本流了,弄起来有点麻烦)</p>
</li>
</ol>
<h2 id="height-100-的问题"><a href="#height-100-的问题" class="headerlink" title="height:100%的问题"></a>height:100%的问题</h2><h3 id="height-100-不起作用"><a href="#height-100-不起作用" class="headerlink" title="height:100%不起作用"></a>height:100%不起作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div style=&quot;height: 100%;background-color:red&quot;&gt;</div><div class="line">      &lt;p&gt;</div><div class="line">        想让这个div高度为 100% 。但是不能实现</div><div class="line">      &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>height:100%这个可以看做是继承的,div没有向上继承过来的height:100%,所以不可以实现height:100%;</p>
</blockquote>
<p>正确的姿势是这样的(记得内联元素最好要放外部文件哦):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;html style=&quot;height: 100%;&quot;&gt;</div><div class="line">  &lt;body style=&quot;height: 100%;&quot;&gt;</div><div class="line">    &lt;div style=&quot;height: 100%;background-color:red&quot;&gt;</div><div class="line">      &lt;p&gt;</div><div class="line">        这样这个div的高度就会100%了</div><div class="line">      &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="height-100-之后出现滚动条"><a href="#height-100-之后出现滚动条" class="headerlink" title="height:100%之后出现滚动条"></a>height:100%之后出现滚动条</h3><p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/rebuild.png&quot; alt=&quot;重构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;记录一下干货&quot;&gt;&lt;a href=&quot;#记录一下干货&quot; class=&quot;headerlink&quot; title=&quot;记录一下干货&quot;&gt;&lt;/a&gt;记录一下干货&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="重构" scheme="https://chanran.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="html" scheme="https://chanran.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(三)--插值</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%89%E6%8F%92%E5%80%BC/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门三插值/</id>
    <published>2016-11-01T05:56:17.000Z</published>
    <updated>2016-11-29T12:29:52.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<h1 id="插值-interporation"><a href="#插值-interporation" class="headerlink" title="插值(interporation)"></a>插值(interporation)</h1><blockquote>
<p>插值相当于解析表达式或者变量，让它们的值替换插值的位置。<br><strong>注：</strong> 不能用于属性值的插值（但属性值可以使用变量替换）。</p>
</blockquote>
<ul>
<li>在css属性名中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">div</div><div class="line">    border-&#123;partOfProp&#125; value  /*切记属性值这里不可以使用插值*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>在选择器中使用插值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">selector = div</div><div class="line">partOfProp = radius</div><div class="line">value = 10px</div><div class="line">&#123;selector&#125;</div><div class="line">    border-&#123;partOfProp&#125; value</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  border-radius: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">selectors = &apos;#foo,#bar,.baz&apos;</div><div class="line"></div><div class="line">&#123;selectors&#125;</div><div class="line">  background: #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#foo,</div><div class="line">#bar,</div><div class="line">.baz &#123;</div><div class="line">  background: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与mixins配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">vendor(prop, args)</div><div class="line">  -webkit-&#123;prop&#125; args</div><div class="line">  -moz-&#123;prop&#125; args</div><div class="line">  &#123;prop&#125; args</div><div class="line"></div><div class="line">border-radius()</div><div class="line">  vendor(&apos;border-radius&apos;, arguments)</div><div class="line"></div><div class="line">box-shadow()</div><div class="line">  vendor(&apos;box-shadow&apos;, arguments)</div><div class="line"></div><div class="line">button</div><div class="line">  border-radius 1px 2px / 3px 4px</div></pre></td></tr></table></figure>
<p>转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button &#123;</div><div class="line">  -webkit-border-radius: 1px 2px / 3px 4px;</div><div class="line">  -moz-border-radius: 1px 2px / 3px 4px;</div><div class="line">  border-radius: 1px 2px / 3px 4px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>高级使用：与循环迭代(iteration)配合使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table</div><div class="line">  for row in 1 2 3 4 5</div><div class="line">    tr:nth-child(&#123;row&#125;)</div><div class="line">      height: 10px * row</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">table tr:nth-child(1) &#123;</div><div class="line">  height: 10px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(2) &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(3) &#123;</div><div class="line">  height: 30px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(4) &#123;</div><div class="line">  height: 40px;</div><div class="line">&#125;</div><div class="line">table tr:nth-child(5) &#123;</div><div class="line">  height: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;插值-interporation&quot;&gt;&lt;a href=&quot;#插值-interporation&quot; class=&quot;headerlink&quot; title=&quot;插值(interpora
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(二)--变量</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%BA%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门二变量/</id>
    <published>2016-11-01T05:54:34.000Z</published>
    <updated>2016-11-29T12:29:44.625Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<h1 id="变量-variables"><a href="#变量-variables" class="headerlink" title="变量(variables)"></a>变量(variables)</h1><blockquote>
<p><strong>变量的标识符可以由$、下划线、字母、数字组成，其中数字不能作为变量的开头。其实这里的变量只是理解为单纯的字符替换</strong></p>
</blockquote>
<p><strong>外部定义变量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_font-size = 14px</div><div class="line">font = _font-size &quot;Lucida Grande&quot;, Arial</div><div class="line"></div><div class="line">body</div><div class="line">  font font, sans-serif</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  font: 14px &quot;Lucida Grande&quot;, Arial, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p> <strong>下面是变量的另外一种用法，不在外部定义变量:</strong></p>
<ul>
<li>内部重新定义当前变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (w / 2)</div><div class="line">  margin-top: (h / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>使用内部变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#logo</div><div class="line">  width: w = 150px</div><div class="line">  height: h = 80px</div><div class="line">  margin-left: (@width / 2)</div><div class="line">  margin-top: (@height / 2) /*注意括号一定要加上*/</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  width: 150px;</div><div class="line">  height: 80px;</div><div class="line">  margin-left: 75px;</div><div class="line">  margin-top: 40px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量的深入用法：写在mixins里，与分支结构配合定义初始属性值等。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">position()</div><div class="line">  position: arguments</div><div class="line">  z-index: 1 unless @z-index /*这里是mixins，如果不懂可以先忽略。*/</div><div class="line"></div><div class="line">#logo</div><div class="line">  z-index: 20</div><div class="line">  position: absolute</div><div class="line"></div><div class="line">#logo2</div><div class="line">  position: absolute</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#logo &#123;</div><div class="line">  z-index: 20;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line">#logo2 &#123;</div><div class="line">  position: absolute;</div><div class="line">  z-index: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>变量冒泡查询</strong></p>
</blockquote>
<p>先看一个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line"> color: red</div><div class="line"> ul</div><div class="line">   li</div><div class="line">     color: blue</div><div class="line">     p</div><div class="line">         color:black</div><div class="line">         a</div><div class="line">             background-color: @color</div></pre></td></tr></table></figure></p>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">body ul li &#123;</div><div class="line">  color: #00f;</div><div class="line">&#125;</div><div class="line">body ul li p &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">body ul li p a &#123;</div><div class="line">  background-color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：从当前层开始，一直往上层查询，直到找到为止，找不到则返回null。上面例子中选择器”body ul li p”就定义了color属性了，而且选择器a被”body ul li p”嵌套的。所以查询到了上层的color属性，停止查询。</p>
</blockquote>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;变量-variables&quot;&gt;&lt;a href=&quot;#变量-variables&quot; class=&quot;headerlink&quot; title=&quot;变量(variables)&quot;&gt;&lt;/a&gt;变
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>stylus预处理入门(一)--选择器</title>
    <link href="https://chanran.github.io/2016/11/01/stylus%E9%A2%84%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E4%B8%80%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://chanran.github.io/2016/11/01/stylus预处理入门一选择器/</id>
    <published>2016-11-01T05:50:46.000Z</published>
    <updated>2016-11-29T12:29:59.514Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/stylus.png" alt="stylus"></p>
<hr>
<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><ul>
<li>官网：<a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a></li>
<li>中文文档：<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="external">stylus中文版参考文档</a> by 张鑫旭</li>
<li>理解css预处理器：<a href="http://leeluolee.github.io/2013/08/01/mcss-start/" target="_blank" rel="external">css预处理器初识</a> by 栓萝卜的棍子</li>
<li>三种css预处理器语言详解：<a href="http://www.oschina.net/question/12_44255" target="_blank" rel="external">less|sass|stylus</a> by 开源中国</li>
</ul>
<hr>
<h1 id="CSS预处理器语言的个人理解"><a href="#CSS预处理器语言的个人理解" class="headerlink" title="CSS预处理器语言的个人理解"></a>CSS预处理器语言的个人理解</h1><ul>
<li>用另外一种可读性高、语法性强的语言来写CSS。stylus可以使用循环、分支、定义变量和函数结构来写css，这样写起来既方便又快捷。</li>
<li>通过一种转换机制将这种语法转化为原生css。每种语言的转化机制也有很多种，可以使用各种语言官网的方法转化，例如<a href="http://lesscss.org/#using-less" target="_blank" rel="external">less</a>。也可以使用构建工具webpack的<a href="https://github.com/shama/stylus-loader" target="_blank" rel="external">stylus-loader</a>来将stylus语言转化为原生css。</li>
</ul>
<hr>
<h1 id="stylus的特点"><a href="#stylus的特点" class="headerlink" title="stylus的特点"></a>stylus的特点</h1><ul>
<li>官网可以直接将stylus代码放在官网<a href="http://stylus-lang.com/try.html#?code=body%20%7B%0A%20%20font%3A%2014px%2F1.5%20Helvetica%2C%20arial%2C%20sans-serif%3B%0A%20%20%23logo%20%7B%0A%20%20%20%20border-radius%3A%205px%3B%0A%20%20%7D%0A%7D" target="_blank" rel="external">这一页</a>测试生成原生css（本人硬加上去的特点）</li>
<li>通过缩进来解释语言（喜欢python的geek应该会比较喜欢）。</li>
<li>待补充..</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  div</div><div class="line">  	color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body div &#123;</div><div class="line">	color:#fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="stylus的优点"><a href="#stylus的优点" class="headerlink" title="stylus的优点"></a>stylus的优点</h1><ul>
<li>类python语法（官网称stylus为pythonic）。</li>
<li>语法灵活（可选的括号，冒号，分号等）。</li>
</ul>
<hr>
<h1 id="stylus的缺点"><a href="#stylus的缺点" class="headerlink" title="stylus的缺点"></a>stylus的缺点</h1><ul>
<li>由于其语法灵活的问题，如果没有团队规范，那么就会带来团队开发混乱，维护起来比较麻烦，各种语法混杂。</li>
</ul>
<hr>
<h1 id="stylus语法介绍"><a href="#stylus语法介绍" class="headerlink" title="stylus语法介绍"></a>stylus语法介绍</h1><h2 id="选择器-selectors"><a href="#选择器-selectors" class="headerlink" title="选择器(selectors)"></a>选择器(selectors)</h2><h3 id="缩进-换行缩进表示语句前进"><a href="#缩进-换行缩进表示语句前进" class="headerlink" title="缩进(换行缩进表示语句前进)"></a><strong>缩进(换行缩进表示语句前进)</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body</div><div class="line">  color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="同级选择器"><a href="#同级选择器" class="headerlink" title="同级选择器"></a><strong>同级选择器</strong></h3><ul>
<li>element,element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div,p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>element &gt;element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	&gt;p</div><div class="line">      color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div &gt;p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>element +element</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">	+p</div><div class="line">    	color:white;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div +p&#123;</div><div class="line">	color:white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>例外：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo bar baz</div><div class="line">&gt;span</div><div class="line">	color:white;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面代码的foo bar baz编译器解析有可能是”标签 属性 属性”，有可能是”标签 标签 标签”（有可能是自定义的标签）</strong>（编译器只会识别文档结构而不是标签或者属性）</p>
</blockquote>
<hr>
<p>建议写成下面这样（在最后的选择器后面加一个逗号[comma]）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo bar baz,</div><div class="line">&gt;span</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注：上面的同级选择器是<a href="http://www.w3school.com.cn/cssref/css_selectors.ASP" target="_blank" rel="external">这里</a>的优化，没有提到的其他选择器大多数保留原来的语法，或者与上面的语法类似，当然上面提到的选择器也可以使用原来的语法</strong></p>
</blockquote>
<hr>
<h3 id="引用父级选择器"><a href="#引用父级选择器" class="headerlink" title="引用父级选择器"></a><strong>引用父级选择器</strong></h3><blockquote>
<p><strong>使用&amp;指向父级选择器，有可能是选择器数组，也有可能是单独的一个选择器。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">	color:#FFF;</div><div class="line">    &amp;:hover</div><div class="line">    	color:#000;</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">div,</div><div class="line">p &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">div:hover,</div><div class="line">p:hover &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>解释：其实”&amp;”可以理解为代替了上一层的选择器，比如上面例子，”&amp;”的上一层是”div,p”，这样说比较好理解。</strong></p>
</blockquote>
<p>下面是引用父级选择器的另一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">box-shadow()</div><div class="line">  -webkit-box-shadow arguments</div><div class="line">  -moz-box-shadow arguments</div><div class="line">  box-shadow arguments</div><div class="line">  html.ie8 &amp;,</div><div class="line">  html.ie7 &amp;,</div><div class="line">  html.ie6 &amp;</div><div class="line">    border 2px solid arguments[length(arguments) - 1]</div><div class="line"></div><div class="line">body</div><div class="line">  #login</div><div class="line">    box-shadow 1px 1px 3px #eee</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">body #login &#123;</div><div class="line">  -webkit-box-shadow: 1px 1px 3px #eee;</div><div class="line">  -moz-box-shadow: 1px 1px 3px #eee;</div><div class="line">  box-shadow: 1px 1px 3px #eee;</div><div class="line">&#125;</div><div class="line">html.ie8 body #login,</div><div class="line">html.ie7 body #login,</div><div class="line">html.ie6 body #login &#123;</div><div class="line">  border: 2px solid #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果想在代码里使用”&amp;”符号而不是stylus的”&amp;”，可以在&amp;字符前加一个反斜杠并加上引号，如下：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.foo[title*=&apos;\&amp;&apos;]  /*.foo[title*=&apos;&amp;&apos;]*/</div></pre></td></tr></table></figure>
<hr>
<h3 id="部分引用父级选择器之单层选择器"><a href="#部分引用父级选择器之单层选择器" class="headerlink" title="部分引用父级选择器之单层选择器"></a><strong>部分引用父级选择器之单层选择器</strong></h3><blockquote>
<p>使用^ [N] 引用第N层父级选择器。如果N是正数，这里的第N层指的是最上层上层选择器到第N层选择器，如果N是负数，这里的第N层指的是最上层选择器到倒数第|N|层选择器。</p>
</blockquote>
<ul>
<li>有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;__bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo__bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo__bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>没有&amp;的情况：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  .bar</div><div class="line">    width: 10px</div><div class="line"></div><div class="line">    ^[0]:hover &amp;</div><div class="line">      width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo:hover .foo .bar &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>N为0或者正数则从最上层开始到最下层，N为负数则从最下层开始到最上层。其实第N层的选择器是包含了上一层的选择器的，例如下面的例子，第一层选择器是foo,第二层就是foo bar,第三层是foo bar baz，如此类推（官网说的是嵌套）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      width: 10px</div><div class="line"></div><div class="line">      ^[-1]:hover &amp;</div><div class="line">        width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar:hover .foo bar baz &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><strong>注：如果写在mixins里的话，推荐将N写成负数。因为你并不知道你在调用哪一层（ 有可能还有隐藏的上层选择器）</strong></p>
</blockquote>
<hr>
<h3 id="部分引用父级选择器之范围选择器"><a href="#部分引用父级选择器之范围选择器" class="headerlink" title="部分引用父级选择器之范围选择器"></a><strong>部分引用父级选择器之范围选择器</strong></h3><blockquote>
<p>^ [N..M] 引用第N层选择器到第M层选择器组成的选择器。<br>注：这里有些跟引用单层选择器有点不同，这里的第几层是不包括上层选择器的，具体来看例子感受一下。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ^[-1]:hover ^[-2..-1]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo bar baz test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo bar baz:hover baz test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="其他部分引用父级选择器"><a href="#其他部分引用父级选择器" class="headerlink" title="其他部分引用父级选择器"></a>其他部分引用父级选择器</h3><ul>
<li>最上层父级选择器(~/)，相当于^ [0]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.block</div><div class="line">  &amp;__element</div><div class="line">    ~/:hover &amp;</div><div class="line">      color: red</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.block:hover .block__element &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>相对父级选择器(../)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  bar</div><div class="line">    baz</div><div class="line">      test</div><div class="line">         width: 10px</div><div class="line">         ../:hover ^[-1..-2]</div><div class="line">             width: 20px</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo .bar .baz .test &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line">.foo .bar .baz:hover .baz .test &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>脱离嵌套的选择器(/)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">p</div><div class="line">   span</div><div class="line">      color #A7A7A7</div><div class="line">      &amp;:hover,</div><div class="line">      /.is-hovered</div><div class="line">        color #000</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">div span,</div><div class="line">p span &#123;</div><div class="line">  color: #a7a7a7;</div><div class="line">&#125;</div><div class="line">div span:hover,</div><div class="line">p span:hover,</div><div class="line">.is-hovered &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>上面的例子里，转化后的代码.is-hovered已经脱离了嵌套结构了，已经不在任何选择器嵌套里。</strong></p>
</blockquote>
<hr>
<h3 id="选择器的值"><a href="#选择器的值" class="headerlink" title="选择器的值"></a><strong>选择器的值</strong></h3><blockquote>
<p><strong>selector()获取当前嵌套层的值，selectors()获取从最上层到当前层每一层的选择器的list</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.foo</div><div class="line">  &amp;:hover</div><div class="line">       class selector()</div><div class="line">       color black</div><div class="line">       span</div><div class="line">          color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.foo:hover &#123;</div><div class="line">  class: &apos;.foo:hover&apos;; /*这个是selector()的值*/</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.foo:hover span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a</div><div class="line">  .b</div><div class="line">    &amp;__c</div><div class="line">      content: selectors()</div><div class="line">      span</div><div class="line">            color white</div></pre></td></tr></table></figure>
<p>转化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.a .b__c &#123;</div><div class="line">  content: &apos;.a&apos;, &apos;&amp; .b&apos;, &apos;&amp;__c&apos;;</div><div class="line">&#125;</div><div class="line">.a .b__c span &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/stylus.png&quot; alt=&quot;stylus&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;相关网站&quot;&gt;&lt;a href=&quot;#相关网站&quot; class=&quot;headerlink&quot; title=&quot;相关网站&quot;&gt;&lt;/a&gt;相关网站&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;官网：
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chanran.github.io/tags/css/"/>
    
      <category term="stylus" scheme="https://chanran.github.io/tags/stylus/"/>
    
      <category term="预处理器" scheme="https://chanran.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
      <category term="前端" scheme="https://chanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css3动画笔记</title>
    <link href="https://chanran.github.io/2016/11/01/css3%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://chanran.github.io/2016/11/01/css3动画笔记/</id>
    <published>2016-11-01T05:34:41.000Z</published>
    <updated>2016-11-29T12:29:36.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/css.jpg" alt="css"></p>
<h1 id="some-sites"><a href="#some-sites" class="headerlink" title="some sites"></a>some sites</h1><ul>
<li><a href="http://www.w3school.com.cn/css3/css3_animation.asp" target="_blank" rel="external">css3动画文档</a> by W3CSchool</li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">css3动画简介</a> by阮一峰</li>
<li><a href="http://isux.tencent.com/css3/" target="_blank" rel="external">css3动画手册</a> by 腾讯 isux</li>
<li><a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">css3动画之硬件加速</a> by w3cplus</li>
<li><a href="http://www.w3ctech.com/topic/1472" target="_blank" rel="external">调试css3 动画 keyframe</a> by w3ctech</li>
<li><a href="http://zencode.in/14.CSS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">css动画的性能优化</a> by zencode.in</li>
<li><a href="http://code.leozhang2018.me/2016/03/07/%E9%9D%A2%E5%90%91%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9B%86%E9%94%A6/" target="_blank" rel="external">浏览器是如何渲染页面的</a> by code.leozhang2018.me (读完了之后会更加懂得如何提升css动画性能)</li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a> by 张云龙 （这个链接是作为拓展的）</li>
</ul>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ul>
<li>grammar: tansition: property duration timing-function delay;</li>
<li>detail<ul>
<li>transition-property：要过渡的css属性</li>
<li>transition-duration：要过渡持续多少秒或者毫秒</li>
<li>transition-timing-function：速度效果的速度曲线</li>
<li>transition-delay：延迟多少秒执行过渡</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：transition:all 0 ease 0</li>
<li>如果transition-duration属性没有被设置，则默认为0，即不会产生过渡效果</li>
<li>tanstion-timing-function: linear/<em>匀速</em>/ | ease-in /<em>加速</em>/ | ease-out /<em>减速</em>/ | ease /<em>逐渐放慢</em>/ | cubic-bezier /<em>函数，自定义速度模式，可以使用 <a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a> 这个网站制作</em>/</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</li>
<li>不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</li>
<li>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</li>
</ul>
</li>
<li>advantage : 简单易用</li>
<li>disavantage<ul>
<li>transition需要事件触发，所以没法在网页加载时自动发生。</li>
<li>transition是一次性的，不能重复发生，除非一再触发。</li>
<li>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</li>
<li>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</li>
</ul>
</li>
</ul>
<h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><ul>
<li>grammar: name duration timing-function delay iteration-count direction</li>
<li>detail<ul>
<li>@keyframes：规定动画</li>
<li>animation-name：绑定选择器的keyframe名称</li>
<li>animation-duration：动画的持续时间，以秒或者毫秒计</li>
<li>animation-timing-function：动画的速度曲线</li>
<li>animation-delay：延迟多少秒执行动画</li>
<li>animation-iteration-count：动画播放次数</li>
<li>animation-diretion：是否应该轮流反向播放动画</li>
<li>animation-play-state(通常用在js控制是否播放,object.style.animationPlayState)：（paused[停止] | running[播放]）规定动画正在播放还是暂停</li>
<li>animation-fill-mode(通常用在js控制动画效果是否可见,object.style.animationFillMode)：（none[不改变默认行为] | forwards[当动画完成后，保持最后一个属性值] | backwards[在animation-delay 所制定的一段时间内，在动画显示之前，应该开始属性值] | both[向前和向后填充模式都被应用]）规定动画在播放之前或之后，其动画效果是否可见。</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性</li>
</ul>
</li>
<li>notice<ul>
<li>默认值：animation:none 0 ease 0 1 normal</li>
<li>尽量少在@keyframe里使用除了transform,opacity,filter以外的元素，因为会触发浏览器的重绘(repaint)<a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">详情</a></li>
<li>@keyframe<ul>
<li>定义：以百分比来规定改变发生的时间，或者通过关键词”from” 和 “to”，等价于0%和100%，0%是动画的开始时间，100%是结束时间</li>
<li>grammar:@keyframes animationname{ keyframes-selector { css-styles;} }</li>
<li>detail<ul>
<li>animationname：（必需）定义动画名称</li>
<li>keyframes-selector：（必需）动画时长的百分比，合法的值：0%-100%（可以使用 from[0%] 和 to[100%]）</li>
<li>css-styles：（必需）一个或多个合法的css样式属性</li>
</ul>
</li>
<li>example</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<pre><code>@keyframes mymove
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
@-moz-keyframes mymove /* Firefox */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-webkit-keyframes mymove /* Safari 和 Chrome */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}

@-o-keyframes mymove /* Opera */
{
  0%   {top:0px;}
  25%  {top:200px;}
  50%  {top:100px;}
  75%  {top:200px;}
  100% {top:0px;}
}
</code></pre><hr>
<ul>
<li>如果animation-duration属性没有设置，则时长为0，即动画不会被播放</li>
<li>animation-iteration-count默认值为1，可设置为infinite（无限次播放）</li>
<li>animation-direction:normal /<em>正常播放</em>/ | alternate /<em>轮流反向播放</em>/<ul>
<li>advantage ：解决了transition过渡效果不能循环播放的弊端</li>
<li>disvantage：目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。代码必须写成下面这样。</li>
</ul>
</li>
</ul>
<hr>
<pre><code>div:hover {
  -webkit-animation: 1s rainbow;
  animation: 1s rainbow;  
}

@-webkit-keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}

@keyframes rainbow {
  0% { background: #c00; }
  50% { background: orange; }
  100% { background: yellowgreen; }
}
</code></pre><hr>
<h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><ul>
<li>grammar:transform:none | transform-functions</li>
<li>detail:none and transform-functions<ul>
<li>none：不定义转换</li>
<li>matrix(n,n,n,n,n,n)：定义2D转换，使用六个值的矩阵</li>
<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义3D转换，使用16个值的4X4矩阵</li>
<li>translate(x,y)：定义2D转换（参数：x轴移动量，y轴移动量。+即向右移动，-即向左移动。单独一个量时表示x轴移动量与y轴移动量相等）</li>
<li>translate3d(x,y,z)：定义3D转换（参数基于translate(x,y)扩展）</li>
<li>translateX(x)：定义转换，只用于X轴的值</li>
<li>translateY(y)：定义转换，只用于Y轴的值</li>
<li>translateZ(z)：定义转换，只用于Z轴的值</li>
<li>scale(x,y)：定义2D缩放转换（参数x,y是倍数）</li>
<li>scale(x,y,z)：定义3D缩放转换（参数基于scale(x,y)扩展）</li>
<li>scaleX(x)：设置X轴的值来定义缩放转换</li>
<li>scaleY(y)：设置Y轴的值来定义缩放转换</li>
<li>scaleZ(z)：设置Z轴的值来定义缩放转换</li>
<li>rotate(angle)：定义2D旋转。在参数中规定角度（正是顺时针，负是逆时针）</li>
<li>rotate3d(x,y,z,angle)：定义3D旋转</li>
<li>rotateX(angle)：定义沿着X轴的3D旋转</li>
<li>rotateY(angle)：定义沿着Y轴的3D旋转</li>
<li>rotateZ(angle)：定义沿着Z轴的3D旋转</li>
<li>skew(x-angle,y-angle)：定义沿着X和Y轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着X轴的2D倾斜转换</li>
<li>skew(angle)：定义沿着Y轴的2D倾斜转换</li>
<li>perspective(n)：为3D转换元素定义透视视图</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
<li>Internet Explorer 10 和 Firefox 支持 3D 转换</li>
<li>Chrome 和 Safari 需要前缀 -webkit-</li>
<li>Opera 仍然不支持 3D 转换（它只支持 2D 转换）</li>
</ul>
</li>
<li>notice<ul>
<li>transform-origin可以定义改变被转换元素的位置<ul>
<li>grammar：transform-origin:x-axis,y-axis,z-zxis</li>
<li>默认值：transform-origin:50% 50% 0</li>
<li>detail<ul>
<li>x-axis | y-axis：定义视图被置于X轴的何处。可能的值：left | center | right | length | %</li>
<li>z-axis：定义视图被置于Z轴的何处。可能的值：length</li>
</ul>
</li>
<li>compatibility<ul>
<li>Internet Explorer 10、Firefox、Opera 支持 transform-origin 属性</li>
<li>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）</li>
<li>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）</li>
<li>Opera 只支持 2D 转换</li>
</ul>
</li>
</ul>
</li>
<li>transform-style规定如何在3D空间中呈现被嵌套的元素<ul>
<li>grammar:transform-style:flat | preserve-3d</li>
<li>tranform-style默认值：transform-style:flat</li>
<li>compatibility<ul>
<li>Firefox 支持 transform-style 属性</li>
<li>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective定义3D元素距视图的距离，以像素计。<ul>
<li>grammar:perspective number | none</li>
<li>perspective默认值：perspective:none</li>
<li>detail<ul>
<li>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>perspective 属性只影响 3D 转换元素</li>
<li>通常和perspective-origin属性配合改变3D元素的底部位置</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspective 属性</li>
</ul>
</li>
</ul>
</li>
<li>perspective-origin定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置<ul>
<li>grammar:perspective-origin:x-axis,y-axis</li>
<li>perspective-origin默认值：perspective-origin:50% 50%</li>
<li>detail<ul>
<li>当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身</li>
<li>该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素</li>
</ul>
</li>
<li>compatibility<ul>
<li>目前浏览器都不支持 perspective-origin 属性</li>
<li>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性</li>
</ul>
</li>
</ul>
</li>
<li>backface-visibility定义当元素不面向屏幕时是否可见<ul>
<li>grammar:backface-visibility: visible | hidden</li>
<li>backface-visibility默认值：backface-visibility:visible</li>
<li>detail<ul>
<li>如果在旋转元素不希望看到其背面时，该属性很有用</li>
</ul>
</li>
<li>compatility<ul>
<li>只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性</li>
<li>Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>QUOTE: If you are not moving ahead , you are falling behind.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/css.jpg&quot; alt=&quot;css&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;some-sites&quot;&gt;&lt;a href=&quot;#some-sites&quot; class=&quot;headerlink&quot; title=&quot;some sites&quot;&gt;&lt;/a&gt;some sites&lt;/h1
    
    </summary>
    
      <category term="css" scheme="https://chanran.github.io/categories/css/"/>
    
    
      <category term="css3" scheme="https://chanran.github.io/tags/css3/"/>
    
      <category term="动画" scheme="https://chanran.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="animation" scheme="https://chanran.github.io/tags/animation/"/>
    
  </entry>
  
</feed>
