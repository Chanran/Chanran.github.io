{"meta":{"title":"blue's blog","subtitle":"coding is funny.","description":"记录着blue的技术生涯--前端,后端,服务器遇到的各种问题以及感悟的博客","author":"blue","url":"https://chanran.github.io"},"pages":[{"title":"","date":"2016-10-31T12:06:20.044Z","updated":"2016-10-31T12:06:20.044Z","comments":false,"path":"categories/index.html","permalink":"https://chanran.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2016-11-01T05:22:25.021Z","updated":"2016-11-01T05:22:25.021Z","comments":false,"path":"tags/index.html","permalink":"https://chanran.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[转载]web前端开发培训之前端开发必会的二十五个知识点","slug":"转载-web前端开发培训之前端开发必会的二十五个知识点","date":"2016-11-11T14:24:02.000Z","updated":"2016-11-12T03:46:42.375Z","comments":true,"path":"2016/11/11/转载-web前端开发培训之前端开发必会的二十五个知识点/","link":"","permalink":"https://chanran.github.io/2016/11/11/转载-web前端开发培训之前端开发必会的二十五个知识点/","excerpt":"","text":"转载自 web前端开发培训之前端开发必会的二十五个知识点 常用那几种浏览器测试？有哪些内核(Layout Engine)?(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera。(Q2) 内核：Trident，Gecko，Presto，Webkit。 说下行内元素和块级元素的区别？行内块元素的兼容性使用？（IE8 以下） (Q1) 行内元素：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。块级元素：各占据一行，垂直方向排列。从新行开始结束接着一个断行。 (Q2) 兼容性：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869703. 清除浮动有哪些方式？比较好的方式是哪一种？ - (Q1) - （1）父级div定义height。 - （2）结尾处加空div标签clear:both。 - （3）父级div定义伪类:after和zoom。 - （4）父级div定义overflow:hidden。 - （5）父级div定义overflow:auto。 - （6）父级div也浮动，需要定义宽度。 - （7）父级div定义display:table。 - （8）结尾处加br标签clear:both。 - (Q2) 比较好的是第3种方式，好多网站都这么用。4. box-sizing常用的属性有哪些？分别有什么作用？ - (Q1)box-sizing: content-box|border-box|inherit; - (Q2)content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。5. Doctype作用？标准模式与兼容模式各有什么区别? - (Q1) &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。 - (Q2) 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。6. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。7. 页面导入样式时，使用link和@import有什么区别？（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。8. 介绍一下你对浏览器内核的理解？主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。 &gt; 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、我们组建一大牛裙前面是4七一，整理讯息（例如加入CSS等），中间是零2七，以及计算网页的显示方式，后面是壹武四，是学习的就加，不是学习的请勿打扰。然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。 &gt; JS引擎则：解析和执行javascript来实现网页的动态效果。 &gt; 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。9. html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？ - (Q1) &gt;HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。 - (1)绘画 canvas; - (2)用于媒介回放的 video 和 audio 元素; - (3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失; - (4)sessionStorage 的数据在浏览器关闭后自动删除; - (5)语意化更好的内容元素，比如 article、footer、header、nav、section; - (6)表单控件，calendar、date、time、email、url、search; - (7)新的技术webworker, websocket, Geolocation; - (Q2) &gt;IE8/IE7/IE6支持通过document.createElement方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签，浏览器支持新标签后，还需要添加标签默认的样式。当然也可以直接使用成熟的框架、比如html5shim， 123456789101112131415161718192021222324252627282930313210. 简述一下你对HTML语义化的理解？&gt; 用正确的标签做正确的事情。html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。JavaScript----------------------------1. 介绍js的基本数据类型&gt;Undefined、Null、Boolean、Number、String2. js有哪些内置对象？&gt;数据封装类对象：Object、Array、Boolean、Number 和 String其他对象：Function、Arguments、Math、Date、RegExp、Error3. this对象的理解&gt;this总是指向函数的直接调用者（而非间接调用者）；如果有new关键字，this指向new出来的那个对象；在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window。4. eval是做什么的？&gt;它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;)。5. DOM怎样添加、移除、移动、复制、创建和查找节点&gt; // 创建新节点createDocumentFragment() //创建一个DOM片段createElement() //创建一个具体的元素createTextNode() //创建一个文本节点// 添加、移除、替换、插入appendChild()removeChild()replaceChild()insertBefore() //在已有的子节点前插入一个新的子节点// 查找getElementsByTagName() //通过标签名称getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)getElementById() //通过元素Id，唯一性1234567891011121314151617181920212223242526272829303132336. null和undefined的区别？&gt; null是一个表示&quot;无&quot;的对象，转为数值时为0；undefined是一个表示&quot;无&quot;的原始值，转为数值时为NaN。&gt;undefined： - （1）变量被声明了，但没有赋值时，就等于undefined。 - （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。 - （3）对象没有赋值的属性，该属性的值为undefined。 - （4）函数没有返回值时，默认返回undefined。 &gt; null： - （1） 作为函数的参数，表示该函数的参数不是对象。 - （2） 作为对象原型链的终点。7. new操作符具体干了什么呢? - （1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。 - （2）属性和方法被加入到 this 引用的对象中。 - （3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。8. JSON 的了解？&gt; JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。 &gt;格式：采用键值对，例如：&#123;&apos;age&apos;:&apos;12&apos;, &apos;name&apos;:&apos;back&apos;&#125;9. call() 和 apply() 的区别和作用？&gt; apply()函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。 &gt;如：function.apply(this,[1,2,3]); &gt;call()的第一个参数是上下文，后续是实例传入的参数序列。如：function.call(this,1,2,3);10. 如何获取UA？ function whatBrowser() { document.Browser.Name.value=navigator.appName; document.Browser.Version.value=navigator.appVersion; document.Browser.Code.value=navigator.appCodeName; document.Browser.Agent.value=navigator.userAgent; } ``` 其他 HTTP状态码知道哪些？ 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息 200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理 301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 304 Not Modified 自从上次请求后，请求的网页未修改过。 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。 404 Not Found 找不到如何与 URI 相匹配的资源。 500 Internal Server Error 最常见的服务器端错误。 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。 你有哪些性能优化的方法？ （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。 （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数 （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。 （4） 当需要设置的样式很多时设置className而不是直接操作style。 （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。 （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。 （7） 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。 什么叫优雅降级和渐进增强？ 优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。 渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。 哪些常见操作会造成内存泄漏？ 内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。 线程与进程的区别 一个程序至少有一个进程,一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。","categories":[{"name":"面试","slug":"面试","permalink":"https://chanran.github.io/categories/面试/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"},{"name":"面试","slug":"面试","permalink":"https://chanran.github.io/tags/面试/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"https://chanran.github.io/categories/面试/"}]},{"title":"重构页面遇到的各种奇怪问题","slug":"重构页面遇到的各种奇怪问题","date":"2016-11-11T13:22:38.000Z","updated":"2016-11-11T13:45:08.451Z","comments":true,"path":"2016/11/11/重构页面遇到的各种奇怪问题/","link":"","permalink":"https://chanran.github.io/2016/11/11/重构页面遇到的各种奇怪问题/","excerpt":"","text":"记录一下干货 怎样可以很好地保证网页的浏览器兼容性 特定html标签相关的奇怪问题 textarea 123456&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;!--推荐这样写--&gt;&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--会出现几个空格--&gt;&lt;/textarea&gt;&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--换行之后有几个空格--&gt;&lt;/textarea&gt; chrome下第二个textarea会出现几个空格,第三个textarea会换行再加几个空格,所以最好使用第一个textarea的写法句号 (其他浏览器有空切换到windows测试) css相关的奇怪问题 行内块元素之间的奇怪间隔 以span为例(设置了display:inline-block) 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; html,body,div&#123; height:100%; width:100%; &#125; #span1&#123; display:inline-block; width:45%; height:100%; background-color:black; &#125; #span2&#123; display:inline-block; width:45%; height:100%; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt; &lt;span id=&quot;span2&quot;&gt;&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 左图出现奇怪的间距(元素换行之后会有一个换行符),右图是解决之后的状态 解决方法 把行内块元素写一在同一行 (不推荐,如果元素多的话太长了,可读性差) 123&lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;&lt;/div&gt; 加注释(推荐) 1234&lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;!-- --&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;&lt;/div&gt; 用浮动(不推荐,脱离文本流了,弄起来有点麻烦)","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"重构","slug":"重构","permalink":"https://chanran.github.io/tags/重构/"},{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://chanran.github.io/tags/html/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(三)--插值","slug":"stylus预处理入门三插值","date":"2016-11-01T05:56:17.000Z","updated":"2016-11-01T06:27:31.454Z","comments":true,"path":"2016/11/01/stylus预处理入门三插值/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门三插值/","excerpt":"","text":"插值(interporation) 插值相当于解析表达式或者变量，让它们的值替换插值的位置。注： 不能用于属性值的插值（但属性值可以使用变量替换）。 在css属性名中使用插值 1234partOfProp = radiusvalue = 10pxdiv border-&#123;partOfProp&#125; value /*切记属性值这里不可以使用插值*/ 转化：123div &#123; border-radius: 10px;&#125; 在选择器中使用插值 12345selector = divpartOfProp = radiusvalue = 10px&#123;selector&#125; border-&#123;partOfProp&#125; value 转化：123div &#123; border-radius: 10px;&#125; 1234selectors = &apos;#foo,#bar,.baz&apos;&#123;selectors&#125; background: #000 转化：12345#foo,#bar,.baz &#123; background: #000;&#125; 高级使用：与mixins配合使用 12345678910111213vendor(prop, args) -webkit-&#123;prop&#125; args -moz-&#123;prop&#125; args &#123;prop&#125; argsborder-radius() vendor(&apos;border-radius&apos;, arguments)box-shadow() vendor(&apos;box-shadow&apos;, arguments)button border-radius 1px 2px / 3px 4px 转化12345button &#123; -webkit-border-radius: 1px 2px / 3px 4px; -moz-border-radius: 1px 2px / 3px 4px; border-radius: 1px 2px / 3px 4px;&#125; 高级使用：与循环迭代(iteration)配合使用 1234table for row in 1 2 3 4 5 tr:nth-child(&#123;row&#125;) height: 10px * row 转化：123456789101112131415table tr:nth-child(1) &#123; height: 10px;&#125;table tr:nth-child(2) &#123; height: 20px;&#125;table tr:nth-child(3) &#123; height: 30px;&#125;table tr:nth-child(4) &#123; height: 40px;&#125;table tr:nth-child(5) &#123; height: 50px;&#125; QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(二)--变量","slug":"stylus预处理入门二变量","date":"2016-11-01T05:54:34.000Z","updated":"2016-11-01T06:27:22.134Z","comments":true,"path":"2016/11/01/stylus预处理入门二变量/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门二变量/","excerpt":"","text":"变量(variables) 变量的标识符可以由$、下划线、字母、数字组成，其中数字不能作为变量的开头。其实这里的变量只是理解为单纯的字符替换 外部定义变量：12345_font-size = 14pxfont = _font-size &quot;Lucida Grande&quot;, Arialbody font font, sans-serif 转化：123body &#123; font: 14px &quot;Lucida Grande&quot;, Arial, sans-serif;&#125; 下面是变量的另外一种用法，不在外部定义变量: 内部重新定义当前变量 12345#logo width: w = 150px height: h = 80px margin-left: (w / 2) margin-top: (h / 2) /*注意括号一定要加上*/ 转化：123456#logo &#123; width: 150px; height: 80px; margin-left: 75px; margin-top: 40px;&#125; 使用内部变量 12345#logo width: w = 150px height: h = 80px margin-left: (@width / 2) margin-top: (@height / 2) /*注意括号一定要加上*/ 转化：123456#logo &#123; width: 150px; height: 80px; margin-left: 75px; margin-top: 40px;&#125; 变量的深入用法：写在mixins里，与分支结构配合定义初始属性值等。 12345678910position() position: arguments z-index: 1 unless @z-index /*这里是mixins，如果不懂可以先忽略。*/#logo z-index: 20 position: absolute#logo2 position: absolute 转化：12345678#logo &#123; z-index: 20; position: absolute;&#125;#logo2 &#123; position: absolute; z-index: 1;&#125; 变量冒泡查询 先看一个栗子：123456789body color: red ul li color: blue p color:black a background-color: @color 转化：123456789101112body &#123; color: #f00;&#125;body ul li &#123; color: #00f;&#125;body ul li p &#123; color: #000;&#125;body ul li p a &#123; background-color: #000;&#125; 注：从当前层开始，一直往上层查询，直到找到为止，找不到则返回null。上面例子中选择器”body ul li p”就定义了color属性了，而且选择器a被”body ul li p”嵌套的。所以查询到了上层的color属性，停止查询。 QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(一)--选择器","slug":"stylus预处理入门一选择器","date":"2016-11-01T05:50:46.000Z","updated":"2016-11-01T06:27:42.522Z","comments":true,"path":"2016/11/01/stylus预处理入门一选择器/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门一选择器/","excerpt":"","text":"相关网站 官网：stylus 中文文档：stylus中文版参考文档 by 张鑫旭 理解css预处理器：css预处理器初识 by 栓萝卜的棍子 三种css预处理器语言详解：less|sass|stylus by 开源中国 CSS预处理器语言的个人理解 用另外一种可读性高、语法性强的语言来写CSS。stylus可以使用循环、分支、定义变量和函数结构来写css，这样写起来既方便又快捷。 通过一种转换机制将这种语法转化为原生css。每种语言的转化机制也有很多种，可以使用各种语言官网的方法转化，例如less。也可以使用构建工具webpack的stylus-loader来将stylus语言转化为原生css。 stylus的特点 官网可以直接将stylus代码放在官网这一页测试生成原生css（本人硬加上去的特点） 通过缩进来解释语言（喜欢python的geek应该会比较喜欢）。 待补充.. 123body div color white 转化：123body div &#123; color:#fff;&#125; stylus的优点 类python语法（官网称stylus为pythonic）。 语法灵活（可选的括号，冒号，分号等）。 stylus的缺点 由于其语法灵活的问题，如果没有团队规范，那么就会带来团队开发混乱，维护起来比较麻烦，各种语法混杂。 stylus语法介绍选择器(selectors)缩进(换行缩进表示语句前进)12body color:white; 转化：123body&#123; color:white;&#125; 同级选择器 element,element 123divp color:white; 转化：123div,p&#123; color:white;&#125; element element 123div p color:white; 转化：123div p&#123; color:white;&#125; element &gt;element 123div &gt;p color:white; 转化：123div &gt;p&#123; color:white;&#125; element +element 123div +p color:white; 转化：123div +p&#123; color:white;&#125; 例外：123foo bar baz&gt;span color:white; 注：上面代码的foo bar baz编译器解析有可能是”标签 属性 属性”，有可能是”标签 标签 标签”（有可能是自定义的标签）（编译器只会识别文档结构而不是标签或者属性） 建议写成下面这样（在最后的选择器后面加一个逗号[comma]）：12foo bar baz,&gt;span 注：上面的同级选择器是这里的优化，没有提到的其他选择器大多数保留原来的语法，或者与上面的语法类似，当然上面提到的选择器也可以使用原来的语法 引用父级选择器 使用&amp;指向父级选择器，有可能是选择器数组，也有可能是单独的一个选择器。 12345divp color:#FFF; &amp;:hover color:#000; 转化：12345678div,p &#123; color: #fff;&#125;div:hover,p:hover &#123; color: #000;&#125; 解释：其实”&amp;”可以理解为代替了上一层的选择器，比如上面例子，”&amp;”的上一层是”div,p”，这样说比较好理解。 下面是引用父级选择器的另一个例子 123456789101112box-shadow() -webkit-box-shadow arguments -moz-box-shadow arguments box-shadow arguments html.ie8 &amp;, html.ie7 &amp;, html.ie6 &amp; border 2px solid arguments[length(arguments) - 1]body #login box-shadow 1px 1px 3px #eee 转化：12345678910body #login &#123; -webkit-box-shadow: 1px 1px 3px #eee; -moz-box-shadow: 1px 1px 3px #eee; box-shadow: 1px 1px 3px #eee;&#125;html.ie8 body #login,html.ie7 body #login,html.ie6 body #login &#123; border: 2px solid #eee;&#125; 注：如果想在代码里使用”&amp;”符号而不是stylus的”&amp;”，可以在&amp;字符前加一个反斜杠并加上引号，如下： 1.foo[title*=&apos;\\&amp;&apos;] /*.foo[title*=&apos;&amp;&apos;]*/ 部分引用父级选择器之单层选择器 使用^ [N] 引用第N层父级选择器。如果N是正数，这里的第N层指的是最上层上层选择器到第N层选择器，如果N是负数，这里的第N层指的是最上层选择器到倒数第|N|层选择器。 有&amp;的情况： 123456.foo &amp;__bar width: 10px ^[0]:hover &amp; width: 20px 转化：123456.foo__bar &#123; width: 10px;&#125;.foo:hover .foo__bar &#123; width: 20px;&#125; 没有&amp;的情况： 123456.foo .bar width: 10px ^[0]:hover &amp; width: 20px 转化：123456.foo .bar &#123; width: 10px;&#125;.foo:hover .foo .bar &#123; width: 20px;&#125; N为0或者正数则从最上层开始到最下层，N为负数则从最下层开始到最上层。其实第N层的选择器是包含了上一层的选择器的，例如下面的例子，第一层选择器是foo,第二层就是foo bar,第三层是foo bar baz，如此类推（官网说的是嵌套）。 1234567.foo bar baz width: 10px ^[-1]:hover &amp; width: 20px 转化：123456.foo bar baz &#123; width: 10px;&#125;.foo bar:hover .foo bar baz &#123; width: 20px;&#125; 注：如果写在mixins里的话，推荐将N写成负数。因为你并不知道你在调用哪一层（ 有可能还有隐藏的上层选择器） 部分引用父级选择器之范围选择器 ^ [N..M] 引用第N层选择器到第M层选择器组成的选择器。注：这里有些跟引用单层选择器有点不同，这里的第几层是不包括上层选择器的，具体来看例子感受一下。 1234567.foo bar baz test width: 10px ^[-1]:hover ^[-2..-1] width: 20px 转化：123456.foo bar baz test &#123; width: 10px;&#125;.foo bar baz:hover baz test &#123; width: 20px;&#125; 其他部分引用父级选择器 最上层父级选择器(~/)，相当于^ [0] 1234.block &amp;__element ~/:hover &amp; color: red 转化：123.block:hover .block__element &#123; color: #f00;&#125; 相对父级选择器(../) 1234567.foo bar baz test width: 10px ../:hover ^[-1..-2] width: 20px 转化：123456.foo .bar .baz .test &#123; width: 10px;&#125;.foo .bar .baz:hover .baz .test &#123; width: 20px;&#125; 脱离嵌套的选择器(/) 1234567divp span color #A7A7A7 &amp;:hover, /.is-hovered color #000 转化：123456789div span,p span &#123; color: #a7a7a7;&#125;div span:hover,p span:hover,.is-hovered &#123; color: #000;&#125; 上面的例子里，转化后的代码.is-hovered已经脱离了嵌套结构了，已经不在任何选择器嵌套里。 选择器的值 selector()获取当前嵌套层的值，selectors()获取从最上层到当前层每一层的选择器的list 123456.foo &amp;:hover class selector() color black span color white 转化：1234567.foo:hover &#123; class: &apos;.foo:hover&apos;; /*这个是selector()的值*/ color: #000;&#125;.foo:hover span &#123; color: #fff;&#125; 123456.a .b &amp;__c content: selectors() span color white 转化：123456.a .b__c &#123; content: &apos;.a&apos;, &apos;&amp; .b&apos;, &apos;&amp;__c&apos;;&#125;.a .b__c span &#123; color: #fff;&#125; QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"css3动画笔记","slug":"css3动画笔记","date":"2016-11-01T05:34:41.000Z","updated":"2016-11-01T06:27:57.470Z","comments":true,"path":"2016/11/01/css3动画笔记/","link":"","permalink":"https://chanran.github.io/2016/11/01/css3动画笔记/","excerpt":"","text":"some sites css3动画文档 by W3CSchool css3动画简介 by阮一峰 css3动画手册 by 腾讯 isux css3动画之硬件加速 by w3cplus 调试css3 动画 keyframe by w3ctech css动画的性能优化 by zencode.in 浏览器是如何渲染页面的 by code.leozhang2018.me (读完了之后会更加懂得如何提升css动画性能) 前端开发体系建设日记 by 张云龙 （这个链接是作为拓展的） transition grammar: tansition: property duration timing-function delay; detail transition-property：要过渡的css属性 transition-duration：要过渡持续多少秒或者毫秒 transition-timing-function：速度效果的速度曲线 transition-delay：延迟多少秒执行过渡 notice 默认值：transition:all 0 ease 0 如果transition-duration属性没有被设置，则默认为0，即不会产生过渡效果 tanstion-timing-function: linear/匀速/ | ease-in /加速/ | ease-out /减速/ | ease /逐渐放慢/ | cubic-bezier /函数，自定义速度模式，可以使用 工具网站 这个网站制作/ compatibility 目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。 不是所有的CSS属性都支持transition，完整的列表查看这里，以及具体的效果。 transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。 advantage : 简单易用 disavantage transition需要事件触发，所以没法在网页加载时自动发生。 transition是一次性的，不能重复发生，除非一再触发。 transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。 一条transition规则，只能定义一个属性的变化，不能涉及多个属性。 animation grammar: name duration timing-function delay iteration-count direction detail @keyframes：规定动画 animation-name：绑定选择器的keyframe名称 animation-duration：动画的持续时间，以秒或者毫秒计 animation-timing-function：动画的速度曲线 animation-delay：延迟多少秒执行动画 animation-iteration-count：动画播放次数 animation-diretion：是否应该轮流反向播放动画 animation-play-state(通常用在js控制是否播放,object.style.animationPlayState)：（paused[停止] | running[播放]）规定动画正在播放还是暂停 animation-fill-mode(通常用在js控制动画效果是否可见,object.style.animationFillMode)：（none[不改变默认行为] | forwards[当动画完成后，保持最后一个属性值] | backwards[在animation-delay 所制定的一段时间内，在动画显示之前，应该开始属性值] | both[向前和向后填充模式都被应用]）规定动画在播放之前或之后，其动画效果是否可见。 compatibility Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。Chrome 和 Safari 需要前缀 -webkit- Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性 notice 默认值：animation:none 0 ease 0 1 normal 尽量少在@keyframe里使用除了transform,opacity,filter以外的元素，因为会触发浏览器的重绘(repaint)详情 @keyframe 定义：以百分比来规定改变发生的时间，或者通过关键词”from” 和 “to”，等价于0%和100%，0%是动画的开始时间，100%是结束时间 grammar:@keyframes animationname{ keyframes-selector { css-styles;} } detail animationname：（必需）定义动画名称 keyframes-selector：（必需）动画时长的百分比，合法的值：0%-100%（可以使用 from[0%] 和 to[100%]） css-styles：（必需）一个或多个合法的css样式属性 example @keyframes mymove { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-moz-keyframes mymove /* Firefox */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-webkit-keyframes mymove /* Safari 和 Chrome */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-o-keyframes mymove /* Opera */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } 如果animation-duration属性没有设置，则时长为0，即动画不会被播放 animation-iteration-count默认值为1，可设置为infinite（无限次播放） animation-direction:normal /正常播放/ | alternate /轮流反向播放/ advantage ：解决了transition过渡效果不能循环播放的弊端 disvantage：目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。代码必须写成下面这样。 div:hover { -webkit-animation: 1s rainbow; animation: 1s rainbow; } @-webkit-keyframes rainbow { 0% { background: #c00; } 50% { background: orange; } 100% { background: yellowgreen; } } @keyframes rainbow { 0% { background: #c00; } 50% { background: orange; } 100% { background: yellowgreen; } } transform grammar:transform:none | transform-functions detail:none and transform-functions none：不定义转换 matrix(n,n,n,n,n,n)：定义2D转换，使用六个值的矩阵 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义3D转换，使用16个值的4X4矩阵 translate(x,y)：定义2D转换（参数：x轴移动量，y轴移动量。+即向右移动，-即向左移动。单独一个量时表示x轴移动量与y轴移动量相等） translate3d(x,y,z)：定义3D转换（参数基于translate(x,y)扩展） translateX(x)：定义转换，只用于X轴的值 translateY(y)：定义转换，只用于Y轴的值 translateZ(z)：定义转换，只用于Z轴的值 scale(x,y)：定义2D缩放转换（参数x,y是倍数） scale(x,y,z)：定义3D缩放转换（参数基于scale(x,y)扩展） scaleX(x)：设置X轴的值来定义缩放转换 scaleY(y)：设置Y轴的值来定义缩放转换 scaleZ(z)：设置Z轴的值来定义缩放转换 rotate(angle)：定义2D旋转。在参数中规定角度（正是顺时针，负是逆时针） rotate3d(x,y,z,angle)：定义3D旋转 rotateX(angle)：定义沿着X轴的3D旋转 rotateY(angle)：定义沿着Y轴的3D旋转 rotateZ(angle)：定义沿着Z轴的3D旋转 skew(x-angle,y-angle)：定义沿着X和Y轴的2D倾斜转换 skew(angle)：定义沿着X轴的2D倾斜转换 skew(angle)：定义沿着Y轴的2D倾斜转换 perspective(n)：为3D转换元素定义透视视图 compatibility Internet Explorer 10、Firefox、Opera 支持 transform 属性 Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换） Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换） Opera 只支持 2D 转换 Internet Explorer 10 和 Firefox 支持 3D 转换 Chrome 和 Safari 需要前缀 -webkit- Opera 仍然不支持 3D 转换（它只支持 2D 转换） notice transform-origin可以定义改变被转换元素的位置 grammar：transform-origin:x-axis,y-axis,z-zxis 默认值：transform-origin:50% 50% 0 detail x-axis | y-axis：定义视图被置于X轴的何处。可能的值：left | center | right | length | % z-axis：定义视图被置于Z轴的何处。可能的值：length compatibility Internet Explorer 10、Firefox、Opera 支持 transform-origin 属性 Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换） Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换） Opera 只支持 2D 转换 transform-style规定如何在3D空间中呈现被嵌套的元素 grammar:transform-style:flat | preserve-3d tranform-style默认值：transform-style:flat compatibility Firefox 支持 transform-style 属性 Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性 perspective定义3D元素距视图的距离，以像素计。 grammar:perspective number | none perspective默认值：perspective:none detail 当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身 perspective 属性只影响 3D 转换元素 通常和perspective-origin属性配合改变3D元素的底部位置 compatibility 目前浏览器都不支持 perspective 属性 Chrome 和 Safari 支持替代的 -webkit-perspective 属性 perspective-origin定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置 grammar:perspective-origin:x-axis,y-axis perspective-origin默认值：perspective-origin:50% 50% detail 当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身 该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素 compatibility 目前浏览器都不支持 perspective-origin 属性 Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性 backface-visibility定义当元素不面向屏幕时是否可见 grammar:backface-visibility: visible | hidden backface-visibility默认值：backface-visibility:visible detail 如果在旋转元素不希望看到其背面时，该属性很有用 compatility 只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性 Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性 QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css3","slug":"css3","permalink":"https://chanran.github.io/tags/css3/"},{"name":"动画","slug":"动画","permalink":"https://chanran.github.io/tags/动画/"},{"name":"animation","slug":"animation","permalink":"https://chanran.github.io/tags/animation/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]}]}