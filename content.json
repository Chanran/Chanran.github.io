{"meta":{"title":"blue's blog","subtitle":"coding is funny.","description":"记录着blue的技术生涯--前端,后端,服务器遇到的各种问题以及感悟的博客","author":"blue","url":"https://chanran.github.io"},"pages":[{"title":"","date":"2016-10-31T12:06:20.044Z","updated":"2016-10-31T12:06:20.044Z","comments":false,"path":"categories/index.html","permalink":"https://chanran.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2016-11-01T05:22:25.021Z","updated":"2016-11-01T05:22:25.021Z","comments":false,"path":"tags/index.html","permalink":"https://chanran.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"重构页面遇到的各种奇怪问题","slug":"重构页面遇到的各种奇怪问题","date":"2016-11-11T13:22:38.000Z","updated":"2016-11-11T13:45:08.451Z","comments":true,"path":"2016/11/11/重构页面遇到的各种奇怪问题/","link":"","permalink":"https://chanran.github.io/2016/11/11/重构页面遇到的各种奇怪问题/","excerpt":"","text":"记录一下干货 怎样可以很好地保证网页的浏览器兼容性 特定html标签相关的奇怪问题 textarea 123456&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;!--推荐这样写--&gt;&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--会出现几个空格--&gt;&lt;/textarea&gt;&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt; &lt;!--换行之后有几个空格--&gt;&lt;/textarea&gt; chrome下第二个textarea会出现几个空格,第三个textarea会换行再加几个空格,所以最好使用第一个textarea的写法句号 (其他浏览器有空切换到windows测试) css相关的奇怪问题 行内块元素之间的奇怪间隔 以span为例(设置了display:inline-block) 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; html,body,div&#123; height:100%; width:100%; &#125; #span1&#123; display:inline-block; width:45%; height:100%; background-color:black; &#125; #span2&#123; display:inline-block; width:45%; height:100%; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt; &lt;span id=&quot;span2&quot;&gt;&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 左图出现奇怪的间距(元素换行之后会有一个换行符),右图是解决之后的状态 解决方法 把行内块元素写一在同一行 (不推荐,如果元素多的话太长了,可读性差) 123&lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;&lt;/div&gt; 加注释(推荐) 1234&lt;div&gt; &lt;span id=&quot;span1&quot;&gt;&lt;/span&gt;&lt;!-- --&gt;&lt;span id=&quot;span2&quot;&gt;&lt;/span&gt;&lt;/div&gt; 用浮动(不推荐,脱离文本流了,弄起来有点麻烦)","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"重构","slug":"重构","permalink":"https://chanran.github.io/tags/重构/"},{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://chanran.github.io/tags/html/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(三)--插值","slug":"stylus预处理入门三插值","date":"2016-11-01T05:56:17.000Z","updated":"2016-11-01T06:27:31.454Z","comments":true,"path":"2016/11/01/stylus预处理入门三插值/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门三插值/","excerpt":"","text":"插值(interporation) 插值相当于解析表达式或者变量，让它们的值替换插值的位置。注： 不能用于属性值的插值（但属性值可以使用变量替换）。 在css属性名中使用插值 1234partOfProp = radiusvalue = 10pxdiv border-&#123;partOfProp&#125; value /*切记属性值这里不可以使用插值*/ 转化：123div &#123; border-radius: 10px;&#125; 在选择器中使用插值 12345selector = divpartOfProp = radiusvalue = 10px&#123;selector&#125; border-&#123;partOfProp&#125; value 转化：123div &#123; border-radius: 10px;&#125; 1234selectors = &apos;#foo,#bar,.baz&apos;&#123;selectors&#125; background: #000 转化：12345#foo,#bar,.baz &#123; background: #000;&#125; 高级使用：与mixins配合使用 12345678910111213vendor(prop, args) -webkit-&#123;prop&#125; args -moz-&#123;prop&#125; args &#123;prop&#125; argsborder-radius() vendor(&apos;border-radius&apos;, arguments)box-shadow() vendor(&apos;box-shadow&apos;, arguments)button border-radius 1px 2px / 3px 4px 转化12345button &#123; -webkit-border-radius: 1px 2px / 3px 4px; -moz-border-radius: 1px 2px / 3px 4px; border-radius: 1px 2px / 3px 4px;&#125; 高级使用：与循环迭代(iteration)配合使用 1234table for row in 1 2 3 4 5 tr:nth-child(&#123;row&#125;) height: 10px * row 转化：123456789101112131415table tr:nth-child(1) &#123; height: 10px;&#125;table tr:nth-child(2) &#123; height: 20px;&#125;table tr:nth-child(3) &#123; height: 30px;&#125;table tr:nth-child(4) &#123; height: 40px;&#125;table tr:nth-child(5) &#123; height: 50px;&#125; QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(二)--变量","slug":"stylus预处理入门二变量","date":"2016-11-01T05:54:34.000Z","updated":"2016-11-01T06:27:22.134Z","comments":true,"path":"2016/11/01/stylus预处理入门二变量/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门二变量/","excerpt":"","text":"变量(variables) 变量的标识符可以由$、下划线、字母、数字组成，其中数字不能作为变量的开头。其实这里的变量只是理解为单纯的字符替换 外部定义变量：12345_font-size = 14pxfont = _font-size &quot;Lucida Grande&quot;, Arialbody font font, sans-serif 转化：123body &#123; font: 14px &quot;Lucida Grande&quot;, Arial, sans-serif;&#125; 下面是变量的另外一种用法，不在外部定义变量: 内部重新定义当前变量 12345#logo width: w = 150px height: h = 80px margin-left: (w / 2) margin-top: (h / 2) /*注意括号一定要加上*/ 转化：123456#logo &#123; width: 150px; height: 80px; margin-left: 75px; margin-top: 40px;&#125; 使用内部变量 12345#logo width: w = 150px height: h = 80px margin-left: (@width / 2) margin-top: (@height / 2) /*注意括号一定要加上*/ 转化：123456#logo &#123; width: 150px; height: 80px; margin-left: 75px; margin-top: 40px;&#125; 变量的深入用法：写在mixins里，与分支结构配合定义初始属性值等。 12345678910position() position: arguments z-index: 1 unless @z-index /*这里是mixins，如果不懂可以先忽略。*/#logo z-index: 20 position: absolute#logo2 position: absolute 转化：12345678#logo &#123; z-index: 20; position: absolute;&#125;#logo2 &#123; position: absolute; z-index: 1;&#125; 变量冒泡查询 先看一个栗子：123456789body color: red ul li color: blue p color:black a background-color: @color 转化：123456789101112body &#123; color: #f00;&#125;body ul li &#123; color: #00f;&#125;body ul li p &#123; color: #000;&#125;body ul li p a &#123; background-color: #000;&#125; 注：从当前层开始，一直往上层查询，直到找到为止，找不到则返回null。上面例子中选择器”body ul li p”就定义了color属性了，而且选择器a被”body ul li p”嵌套的。所以查询到了上层的color属性，停止查询。 QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"stylus预处理入门(一)--选择器","slug":"stylus预处理入门一选择器","date":"2016-11-01T05:50:46.000Z","updated":"2016-11-01T06:27:42.522Z","comments":true,"path":"2016/11/01/stylus预处理入门一选择器/","link":"","permalink":"https://chanran.github.io/2016/11/01/stylus预处理入门一选择器/","excerpt":"","text":"相关网站 官网：stylus 中文文档：stylus中文版参考文档 by 张鑫旭 理解css预处理器：css预处理器初识 by 栓萝卜的棍子 三种css预处理器语言详解：less|sass|stylus by 开源中国 CSS预处理器语言的个人理解 用另外一种可读性高、语法性强的语言来写CSS。stylus可以使用循环、分支、定义变量和函数结构来写css，这样写起来既方便又快捷。 通过一种转换机制将这种语法转化为原生css。每种语言的转化机制也有很多种，可以使用各种语言官网的方法转化，例如less。也可以使用构建工具webpack的stylus-loader来将stylus语言转化为原生css。 stylus的特点 官网可以直接将stylus代码放在官网这一页测试生成原生css（本人硬加上去的特点） 通过缩进来解释语言（喜欢python的geek应该会比较喜欢）。 待补充.. 123body div color white 转化：123body div &#123; color:#fff;&#125; stylus的优点 类python语法（官网称stylus为pythonic）。 语法灵活（可选的括号，冒号，分号等）。 stylus的缺点 由于其语法灵活的问题，如果没有团队规范，那么就会带来团队开发混乱，维护起来比较麻烦，各种语法混杂。 stylus语法介绍选择器(selectors)缩进(换行缩进表示语句前进)12body color:white; 转化：123body&#123; color:white;&#125; 同级选择器 element,element 123divp color:white; 转化：123div,p&#123; color:white;&#125; element element 123div p color:white; 转化：123div p&#123; color:white;&#125; element &gt;element 123div &gt;p color:white; 转化：123div &gt;p&#123; color:white;&#125; element +element 123div +p color:white; 转化：123div +p&#123; color:white;&#125; 例外：123foo bar baz&gt;span color:white; 注：上面代码的foo bar baz编译器解析有可能是”标签 属性 属性”，有可能是”标签 标签 标签”（有可能是自定义的标签）（编译器只会识别文档结构而不是标签或者属性） 建议写成下面这样（在最后的选择器后面加一个逗号[comma]）：12foo bar baz,&gt;span 注：上面的同级选择器是这里的优化，没有提到的其他选择器大多数保留原来的语法，或者与上面的语法类似，当然上面提到的选择器也可以使用原来的语法 引用父级选择器 使用&amp;指向父级选择器，有可能是选择器数组，也有可能是单独的一个选择器。 12345divp color:#FFF; &amp;:hover color:#000; 转化：12345678div,p &#123; color: #fff;&#125;div:hover,p:hover &#123; color: #000;&#125; 解释：其实”&amp;”可以理解为代替了上一层的选择器，比如上面例子，”&amp;”的上一层是”div,p”，这样说比较好理解。 下面是引用父级选择器的另一个例子 123456789101112box-shadow() -webkit-box-shadow arguments -moz-box-shadow arguments box-shadow arguments html.ie8 &amp;, html.ie7 &amp;, html.ie6 &amp; border 2px solid arguments[length(arguments) - 1]body #login box-shadow 1px 1px 3px #eee 转化：12345678910body #login &#123; -webkit-box-shadow: 1px 1px 3px #eee; -moz-box-shadow: 1px 1px 3px #eee; box-shadow: 1px 1px 3px #eee;&#125;html.ie8 body #login,html.ie7 body #login,html.ie6 body #login &#123; border: 2px solid #eee;&#125; 注：如果想在代码里使用”&amp;”符号而不是stylus的”&amp;”，可以在&amp;字符前加一个反斜杠并加上引号，如下： 1.foo[title*=&apos;\\&amp;&apos;] /*.foo[title*=&apos;&amp;&apos;]*/ 部分引用父级选择器之单层选择器 使用^ [N] 引用第N层父级选择器。如果N是正数，这里的第N层指的是最上层上层选择器到第N层选择器，如果N是负数，这里的第N层指的是最上层选择器到倒数第|N|层选择器。 有&amp;的情况： 123456.foo &amp;__bar width: 10px ^[0]:hover &amp; width: 20px 转化：123456.foo__bar &#123; width: 10px;&#125;.foo:hover .foo__bar &#123; width: 20px;&#125; 没有&amp;的情况： 123456.foo .bar width: 10px ^[0]:hover &amp; width: 20px 转化：123456.foo .bar &#123; width: 10px;&#125;.foo:hover .foo .bar &#123; width: 20px;&#125; N为0或者正数则从最上层开始到最下层，N为负数则从最下层开始到最上层。其实第N层的选择器是包含了上一层的选择器的，例如下面的例子，第一层选择器是foo,第二层就是foo bar,第三层是foo bar baz，如此类推（官网说的是嵌套）。 1234567.foo bar baz width: 10px ^[-1]:hover &amp; width: 20px 转化：123456.foo bar baz &#123; width: 10px;&#125;.foo bar:hover .foo bar baz &#123; width: 20px;&#125; 注：如果写在mixins里的话，推荐将N写成负数。因为你并不知道你在调用哪一层（ 有可能还有隐藏的上层选择器） 部分引用父级选择器之范围选择器 ^ [N..M] 引用第N层选择器到第M层选择器组成的选择器。注：这里有些跟引用单层选择器有点不同，这里的第几层是不包括上层选择器的，具体来看例子感受一下。 1234567.foo bar baz test width: 10px ^[-1]:hover ^[-2..-1] width: 20px 转化：123456.foo bar baz test &#123; width: 10px;&#125;.foo bar baz:hover baz test &#123; width: 20px;&#125; 其他部分引用父级选择器 最上层父级选择器(~/)，相当于^ [0] 1234.block &amp;__element ~/:hover &amp; color: red 转化：123.block:hover .block__element &#123; color: #f00;&#125; 相对父级选择器(../) 1234567.foo bar baz test width: 10px ../:hover ^[-1..-2] width: 20px 转化：123456.foo .bar .baz .test &#123; width: 10px;&#125;.foo .bar .baz:hover .baz .test &#123; width: 20px;&#125; 脱离嵌套的选择器(/) 1234567divp span color #A7A7A7 &amp;:hover, /.is-hovered color #000 转化：123456789div span,p span &#123; color: #a7a7a7;&#125;div span:hover,p span:hover,.is-hovered &#123; color: #000;&#125; 上面的例子里，转化后的代码.is-hovered已经脱离了嵌套结构了，已经不在任何选择器嵌套里。 选择器的值 selector()获取当前嵌套层的值，selectors()获取从最上层到当前层每一层的选择器的list 123456.foo &amp;:hover class selector() color black span color white 转化：1234567.foo:hover &#123; class: &apos;.foo:hover&apos;; /*这个是selector()的值*/ color: #000;&#125;.foo:hover span &#123; color: #fff;&#125; 123456.a .b &amp;__c content: selectors() span color white 转化：123456.a .b__c &#123; content: &apos;.a&apos;, &apos;&amp; .b&apos;, &apos;&amp;__c&apos;;&#125;.a .b__c span &#123; color: #fff;&#125; QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"https://chanran.github.io/tags/stylus/"},{"name":"预处理器","slug":"预处理器","permalink":"https://chanran.github.io/tags/预处理器/"},{"name":"前端","slug":"前端","permalink":"https://chanran.github.io/tags/前端/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]},{"title":"css3动画笔记","slug":"css3动画笔记","date":"2016-11-01T05:34:41.000Z","updated":"2016-11-01T06:27:57.470Z","comments":true,"path":"2016/11/01/css3动画笔记/","link":"","permalink":"https://chanran.github.io/2016/11/01/css3动画笔记/","excerpt":"","text":"some sites css3动画文档 by W3CSchool css3动画简介 by阮一峰 css3动画手册 by 腾讯 isux css3动画之硬件加速 by w3cplus 调试css3 动画 keyframe by w3ctech css动画的性能优化 by zencode.in 浏览器是如何渲染页面的 by code.leozhang2018.me (读完了之后会更加懂得如何提升css动画性能) 前端开发体系建设日记 by 张云龙 （这个链接是作为拓展的） transition grammar: tansition: property duration timing-function delay; detail transition-property：要过渡的css属性 transition-duration：要过渡持续多少秒或者毫秒 transition-timing-function：速度效果的速度曲线 transition-delay：延迟多少秒执行过渡 notice 默认值：transition:all 0 ease 0 如果transition-duration属性没有被设置，则默认为0，即不会产生过渡效果 tanstion-timing-function: linear/匀速/ | ease-in /加速/ | ease-out /减速/ | ease /逐渐放慢/ | cubic-bezier /函数，自定义速度模式，可以使用 工具网站 这个网站制作/ compatibility 目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。 不是所有的CSS属性都支持transition，完整的列表查看这里，以及具体的效果。 transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。 advantage : 简单易用 disavantage transition需要事件触发，所以没法在网页加载时自动发生。 transition是一次性的，不能重复发生，除非一再触发。 transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。 一条transition规则，只能定义一个属性的变化，不能涉及多个属性。 animation grammar: name duration timing-function delay iteration-count direction detail @keyframes：规定动画 animation-name：绑定选择器的keyframe名称 animation-duration：动画的持续时间，以秒或者毫秒计 animation-timing-function：动画的速度曲线 animation-delay：延迟多少秒执行动画 animation-iteration-count：动画播放次数 animation-diretion：是否应该轮流反向播放动画 animation-play-state(通常用在js控制是否播放,object.style.animationPlayState)：（paused[停止] | running[播放]）规定动画正在播放还是暂停 animation-fill-mode(通常用在js控制动画效果是否可见,object.style.animationFillMode)：（none[不改变默认行为] | forwards[当动画完成后，保持最后一个属性值] | backwards[在animation-delay 所制定的一段时间内，在动画显示之前，应该开始属性值] | both[向前和向后填充模式都被应用]）规定动画在播放之前或之后，其动画效果是否可见。 compatibility Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。Chrome 和 Safari 需要前缀 -webkit- Internet Explorer 9，以及更早的版本，不支持 @keyframe 规则或 animation 属性 notice 默认值：animation:none 0 ease 0 1 normal 尽量少在@keyframe里使用除了transform,opacity,filter以外的元素，因为会触发浏览器的重绘(repaint)详情 @keyframe 定义：以百分比来规定改变发生的时间，或者通过关键词”from” 和 “to”，等价于0%和100%，0%是动画的开始时间，100%是结束时间 grammar:@keyframes animationname{ keyframes-selector { css-styles;} } detail animationname：（必需）定义动画名称 keyframes-selector：（必需）动画时长的百分比，合法的值：0%-100%（可以使用 from[0%] 和 to[100%]） css-styles：（必需）一个或多个合法的css样式属性 example @keyframes mymove { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-moz-keyframes mymove /* Firefox */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-webkit-keyframes mymove /* Safari 和 Chrome */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } @-o-keyframes mymove /* Opera */ { 0% {top:0px;} 25% {top:200px;} 50% {top:100px;} 75% {top:200px;} 100% {top:0px;} } 如果animation-duration属性没有设置，则时长为0，即动画不会被播放 animation-iteration-count默认值为1，可设置为infinite（无限次播放） animation-direction:normal /正常播放/ | alternate /轮流反向播放/ advantage ：解决了transition过渡效果不能循环播放的弊端 disvantage：目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。代码必须写成下面这样。 div:hover { -webkit-animation: 1s rainbow; animation: 1s rainbow; } @-webkit-keyframes rainbow { 0% { background: #c00; } 50% { background: orange; } 100% { background: yellowgreen; } } @keyframes rainbow { 0% { background: #c00; } 50% { background: orange; } 100% { background: yellowgreen; } } transform grammar:transform:none | transform-functions detail:none and transform-functions none：不定义转换 matrix(n,n,n,n,n,n)：定义2D转换，使用六个值的矩阵 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义3D转换，使用16个值的4X4矩阵 translate(x,y)：定义2D转换（参数：x轴移动量，y轴移动量。+即向右移动，-即向左移动。单独一个量时表示x轴移动量与y轴移动量相等） translate3d(x,y,z)：定义3D转换（参数基于translate(x,y)扩展） translateX(x)：定义转换，只用于X轴的值 translateY(y)：定义转换，只用于Y轴的值 translateZ(z)：定义转换，只用于Z轴的值 scale(x,y)：定义2D缩放转换（参数x,y是倍数） scale(x,y,z)：定义3D缩放转换（参数基于scale(x,y)扩展） scaleX(x)：设置X轴的值来定义缩放转换 scaleY(y)：设置Y轴的值来定义缩放转换 scaleZ(z)：设置Z轴的值来定义缩放转换 rotate(angle)：定义2D旋转。在参数中规定角度（正是顺时针，负是逆时针） rotate3d(x,y,z,angle)：定义3D旋转 rotateX(angle)：定义沿着X轴的3D旋转 rotateY(angle)：定义沿着Y轴的3D旋转 rotateZ(angle)：定义沿着Z轴的3D旋转 skew(x-angle,y-angle)：定义沿着X和Y轴的2D倾斜转换 skew(angle)：定义沿着X轴的2D倾斜转换 skew(angle)：定义沿着Y轴的2D倾斜转换 perspective(n)：为3D转换元素定义透视视图 compatibility Internet Explorer 10、Firefox、Opera 支持 transform 属性 Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换） Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换） Opera 只支持 2D 转换 Internet Explorer 10 和 Firefox 支持 3D 转换 Chrome 和 Safari 需要前缀 -webkit- Opera 仍然不支持 3D 转换（它只支持 2D 转换） notice transform-origin可以定义改变被转换元素的位置 grammar：transform-origin:x-axis,y-axis,z-zxis 默认值：transform-origin:50% 50% 0 detail x-axis | y-axis：定义视图被置于X轴的何处。可能的值：left | center | right | length | % z-axis：定义视图被置于Z轴的何处。可能的值：length compatibility Internet Explorer 10、Firefox、Opera 支持 transform-origin 属性 Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换） Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换） Opera 只支持 2D 转换 transform-style规定如何在3D空间中呈现被嵌套的元素 grammar:transform-style:flat | preserve-3d tranform-style默认值：transform-style:flat compatibility Firefox 支持 transform-style 属性 Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性 perspective定义3D元素距视图的距离，以像素计。 grammar:perspective number | none perspective默认值：perspective:none detail 当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身 perspective 属性只影响 3D 转换元素 通常和perspective-origin属性配合改变3D元素的底部位置 compatibility 目前浏览器都不支持 perspective 属性 Chrome 和 Safari 支持替代的 -webkit-perspective 属性 perspective-origin定义 3D 元素所基于的 X 轴和 Y 轴。该属性允许您改变 3D 元素的底部位置 grammar:perspective-origin:x-axis,y-axis perspective-origin默认值：perspective-origin:50% 50% detail 当为元素定义 perspective-origin 属性时，其子元素会获得透视效果，而不是元素本身 该属性必须与 perspective 属性一同使用，而且只影响 3D 转换元素 compatibility 目前浏览器都不支持 perspective-origin 属性 Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性 backface-visibility定义当元素不面向屏幕时是否可见 grammar:backface-visibility: visible | hidden backface-visibility默认值：backface-visibility:visible detail 如果在旋转元素不希望看到其背面时，该属性很有用 compatility 只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性 Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性 QUOTE: If you are not moving ahead , you are falling behind.","categories":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}],"tags":[{"name":"css3","slug":"css3","permalink":"https://chanran.github.io/tags/css3/"},{"name":"动画","slug":"动画","permalink":"https://chanran.github.io/tags/动画/"},{"name":"animation","slug":"animation","permalink":"https://chanran.github.io/tags/animation/"}],"keywords":[{"name":"css","slug":"css","permalink":"https://chanran.github.io/categories/css/"}]}]}